
RnD-Gyroscope+Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008078  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008208  08008208  00018208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008664  08008664  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800866c  0800866c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  200001dc  08008850  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08008850  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bd9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002086  00000000  00000000  00031de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00033e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00034f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f9f  00000000  00000000  00035ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013499  00000000  00000000  0005de97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6cf4  00000000  00000000  00071330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168024  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058e0  00000000  00000000  00168074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081f0 	.word	0x080081f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080081f0 	.word	0x080081f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MPU6050_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU6050_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;
    char buffer[16];

    //Check WHO_AM_I address
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	f107 0317 	add.w	r3, r7, #23
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	2275      	movs	r2, #117	; 0x75
 8000f66:	21d0      	movs	r1, #208	; 0xd0
 8000f68:	4829      	ldr	r0, [pc, #164]	; (8001010 <MPU6050_Init+0xc4>)
 8000f6a:	f001 fc0f 	bl	800278c <HAL_I2C_Mem_Read>

    sprintf(buffer, "\n\rAddr: %d\n", check);
 8000f6e:	7dfb      	ldrb	r3, [r7, #23]
 8000f70:	461a      	mov	r2, r3
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4927      	ldr	r1, [pc, #156]	; (8001014 <MPU6050_Init+0xc8>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 fec0 	bl	8005cfc <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff f926 	bl	80001d0 <strlen>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	1d39      	adds	r1, r7, #4
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	4822      	ldr	r0, [pc, #136]	; (8001018 <MPU6050_Init+0xcc>)
 8000f90:	f003 fd1c 	bl	80049cc <HAL_UART_Transmit>
    if(check == 104)
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	2b68      	cmp	r3, #104	; 0x68
 8000f98:	d130      	bne.n	8000ffc <MPU6050_Init+0xb0>
    {
        //Write all 0's to wake sensor up
        Data = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	f107 0316 	add.w	r3, r7, #22
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	226b      	movs	r2, #107	; 0x6b
 8000fb2:	21d0      	movs	r1, #208	; 0xd0
 8000fb4:	4816      	ldr	r0, [pc, #88]	; (8001010 <MPU6050_Init+0xc4>)
 8000fb6:	f001 fad5 	bl	8002564 <HAL_I2C_Mem_Write>

        //Set data rate of 1KHz
        Data = 0x07;
 8000fba:	2307      	movs	r3, #7
 8000fbc:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	f107 0316 	add.w	r3, r7, #22
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	2219      	movs	r2, #25
 8000fd2:	21d0      	movs	r1, #208	; 0xd0
 8000fd4:	480e      	ldr	r0, [pc, #56]	; (8001010 <MPU6050_Init+0xc4>)
 8000fd6:	f001 fac5 	bl	8002564 <HAL_I2C_Mem_Write>

        //Set Gyroscopic configuration
        Data = 0xE0;
 8000fda:	23e0      	movs	r3, #224	; 0xe0
 8000fdc:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	f107 0316 	add.w	r3, r7, #22
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	221b      	movs	r2, #27
 8000ff2:	21d0      	movs	r1, #208	; 0xd0
 8000ff4:	4806      	ldr	r0, [pc, #24]	; (8001010 <MPU6050_Init+0xc4>)
 8000ff6:	f001 fab5 	bl	8002564 <HAL_I2C_Mem_Write>
    {
    	//Reset and look for MPU6050 again
        HAL_NVIC_SystemReset();
        HAL_Delay(1200);
    }
}
 8000ffa:	e005      	b.n	8001008 <MPU6050_Init+0xbc>
        HAL_NVIC_SystemReset();
 8000ffc:	f001 f837 	bl	800206e <HAL_NVIC_SystemReset>
        HAL_Delay(1200);
 8001000:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001004:	f000 ff20 	bl	8001e48 <HAL_Delay>
}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200001f8 	.word	0x200001f8
 8001014:	08008208 	.word	0x08008208
 8001018:	20000298 	.word	0x20000298
 800101c:	00000000 	.word	0x00000000

08001020 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af04      	add	r7, sp, #16
    uint8_t Rec_Data[2];

    //Get raw gyro data
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_ZOUT_H_REG, 1, Rec_Data, 2, 1000);
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	2302      	movs	r3, #2
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	2247      	movs	r2, #71	; 0x47
 8001038:	21d0      	movs	r1, #208	; 0xd0
 800103a:	481b      	ldr	r0, [pc, #108]	; (80010a8 <MPU6050_Read_Gyro+0x88>)
 800103c:	f001 fba6 	bl	800278c <HAL_I2C_Mem_Read>
    gyro_raw = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001040:	793b      	ldrb	r3, [r7, #4]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	797b      	ldrb	r3, [r7, #5]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21a      	sxth	r2, r3
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MPU6050_Read_Gyro+0x8c>)
 8001050:	801a      	strh	r2, [r3, #0]

    gyro = ((gyro_raw / 94.4) - gyroOffset);
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MPU6050_Read_Gyro+0x8c>)
 8001054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa63 	bl	8000524 <__aeabi_i2d>
 800105e:	a310      	add	r3, pc, #64	; (adr r3, 80010a0 <MPU6050_Read_Gyro+0x80>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fbf2 	bl	800084c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4614      	mov	r4, r2
 800106e:	461d      	mov	r5, r3
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MPU6050_Read_Gyro+0x90>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa67 	bl	8000548 <__aeabi_f2d>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4620      	mov	r0, r4
 8001080:	4629      	mov	r1, r5
 8001082:	f7ff f901 	bl	8000288 <__aeabi_dsub>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f7ff fd8b 	bl	8000ba8 <__aeabi_d2f>
 8001092:	4603      	mov	r3, r0
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <MPU6050_Read_Gyro+0x94>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bdb0      	pop	{r4, r5, r7, pc}
 80010a0:	9999999a 	.word	0x9999999a
 80010a4:	40579999 	.word	0x40579999
 80010a8:	200001f8 	.word	0x200001f8
 80010ac:	2000031c 	.word	0x2000031c
 80010b0:	20000324 	.word	0x20000324
 80010b4:	20000320 	.word	0x20000320

080010b8 <MPU6050_Calibrate>:

void MPU6050_Calibrate(void)
{
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b096      	sub	sp, #88	; 0x58
 80010bc:	af02      	add	r7, sp, #8
    char buffer[64];
    float count = 512;
 80010be:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80010c2:	647b      	str	r3, [r7, #68]	; 0x44
    float gyroSum = 0;
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	64fb      	str	r3, [r7, #76]	; 0x4c

    for(int i = 0; i < count; i++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80010ce:	e022      	b.n	8001116 <MPU6050_Calibrate+0x5e>
    {
        MPU6050_Read_Gyro();
 80010d0:	f7ff ffa6 	bl	8001020 <MPU6050_Read_Gyro>

        //To get avg values
        gyroSum += gyro;
 80010d4:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <MPU6050_Calibrate+0x110>)
 80010d6:	edd3 7a00 	vldr	s15, [r3]
 80010da:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80010de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        //To get max values
        if(fabs(gyro) > gyroMargin)
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <MPU6050_Calibrate+0x110>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	eeb0 7ae7 	vabs.f32	s14, s15
 80010f0:	4b36      	ldr	r3, [pc, #216]	; (80011cc <MPU6050_Calibrate+0x114>)
 80010f2:	edd3 7a00 	vldr	s15, [r3]
 80010f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fe:	dd07      	ble.n	8001110 <MPU6050_Calibrate+0x58>
            gyroMargin = fabs(gyro);
 8001100:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <MPU6050_Calibrate+0x110>)
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	eef0 7ae7 	vabs.f32	s15, s15
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <MPU6050_Calibrate+0x114>)
 800110c:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < count; i++)
 8001110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001112:	3301      	adds	r3, #1
 8001114:	64bb      	str	r3, [r7, #72]	; 0x48
 8001116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001118:	ee07 3a90 	vmov	s15, r3
 800111c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001120:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001124:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	dcd0      	bgt.n	80010d0 <MPU6050_Calibrate+0x18>
    }
    //Avg values for offset
    gyroOffset = gyroSum / count;
 800112e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001132:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MPU6050_Calibrate+0x118>)
 800113c:	edc3 7a00 	vstr	s15, [r3]

    //Max value for idle margin of error
    gyroMargin = ((gyroMargin - gyroOffset) * 1.1);
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <MPU6050_Calibrate+0x114>)
 8001142:	ed93 7a00 	vldr	s14, [r3]
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MPU6050_Calibrate+0x118>)
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001150:	ee17 0a90 	vmov	r0, s15
 8001154:	f7ff f9f8 	bl	8000548 <__aeabi_f2d>
 8001158:	a319      	add	r3, pc, #100	; (adr r3, 80011c0 <MPU6050_Calibrate+0x108>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fa4b 	bl	80005f8 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fd1d 	bl	8000ba8 <__aeabi_d2f>
 800116e:	4603      	mov	r3, r0
 8001170:	4a16      	ldr	r2, [pc, #88]	; (80011cc <MPU6050_Calibrate+0x114>)
 8001172:	6013      	str	r3, [r2, #0]

    sprintf(buffer, "\rGyro: |%.3f| |%.3f|\n", gyroOffset, gyroMargin);
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MPU6050_Calibrate+0x118>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9e5 	bl	8000548 <__aeabi_f2d>
 800117e:	4604      	mov	r4, r0
 8001180:	460d      	mov	r5, r1
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MPU6050_Calibrate+0x114>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9de 	bl	8000548 <__aeabi_f2d>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	1d38      	adds	r0, r7, #4
 8001192:	e9cd 2300 	strd	r2, r3, [sp]
 8001196:	4622      	mov	r2, r4
 8001198:	462b      	mov	r3, r5
 800119a:	490e      	ldr	r1, [pc, #56]	; (80011d4 <MPU6050_Calibrate+0x11c>)
 800119c:	f004 fdae 	bl	8005cfc <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f814 	bl	80001d0 <strlen>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	1d39      	adds	r1, r7, #4
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	4809      	ldr	r0, [pc, #36]	; (80011d8 <MPU6050_Calibrate+0x120>)
 80011b4:	f003 fc0a 	bl	80049cc <HAL_UART_Transmit>
}
 80011b8:	bf00      	nop
 80011ba:	3750      	adds	r7, #80	; 0x50
 80011bc:	46bd      	mov	sp, r7
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	9999999a 	.word	0x9999999a
 80011c4:	3ff19999 	.word	0x3ff19999
 80011c8:	20000320 	.word	0x20000320
 80011cc:	20000328 	.word	0x20000328
 80011d0:	20000324 	.word	0x20000324
 80011d4:	08008214 	.word	0x08008214
 80011d8:	20000298 	.word	0x20000298
 80011dc:	00000000 	.word	0x00000000

080011e0 <checkAngle>:

void checkAngle(int angle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	char buffer[16];
	float value, sum = 0;
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]

	while(1)
	{
		MPU6050_Read_Gyro();
 80011ee:	f7ff ff17 	bl	8001020 <MPU6050_Read_Gyro>
		if(fabs(gyro) > gyroMargin)
 80011f2:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <checkAngle+0xe8>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	eeb0 7ae7 	vabs.f32	s14, s15
 80011fc:	4b33      	ldr	r3, [pc, #204]	; (80012cc <checkAngle+0xec>)
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	dd08      	ble.n	800121e <checkAngle+0x3e>
			sum += gyro;
 800120c:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <checkAngle+0xe8>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ed97 7a07 	vldr	s14, [r7, #28]
 8001216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121a:	edc7 7a07 	vstr	s15, [r7, #28]

		value = sum * 0.02;
 800121e:	69f8      	ldr	r0, [r7, #28]
 8001220:	f7ff f992 	bl	8000548 <__aeabi_f2d>
 8001224:	a326      	add	r3, pc, #152	; (adr r3, 80012c0 <checkAngle+0xe0>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9e5 	bl	80005f8 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fcb7 	bl	8000ba8 <__aeabi_d2f>
 800123a:	4603      	mov	r3, r0
 800123c:	61bb      	str	r3, [r7, #24]
		sprintf(buffer, "\rAngle: %.2f\n", value);
 800123e:	69b8      	ldr	r0, [r7, #24]
 8001240:	f7ff f982 	bl	8000548 <__aeabi_f2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	f107 0008 	add.w	r0, r7, #8
 800124c:	4920      	ldr	r1, [pc, #128]	; (80012d0 <checkAngle+0xf0>)
 800124e:	f004 fd55 	bl	8005cfc <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	4618      	mov	r0, r3
 8001258:	f7fe ffba 	bl	80001d0 <strlen>
 800125c:	4603      	mov	r3, r0
 800125e:	b29a      	uxth	r2, r3
 8001260:	f107 0108 	add.w	r1, r7, #8
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	481a      	ldr	r0, [pc, #104]	; (80012d4 <checkAngle+0xf4>)
 800126a:	f003 fbaf 	bl	80049cc <HAL_UART_Transmit>
		if(((angle > 0) && (value >= angle)) || ((angle < 0) && (value <= angle)))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	dd0b      	ble.n	800128c <checkAngle+0xac>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	da12      	bge.n	80012b2 <checkAngle+0xd2>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	da0b      	bge.n	80012aa <checkAngle+0xca>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129c:	ed97 7a06 	vldr	s14, [r7, #24]
 80012a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a8:	d903      	bls.n	80012b2 <checkAngle+0xd2>
			break;
		HAL_Delay(10);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f000 fdcc 	bl	8001e48 <HAL_Delay>
		MPU6050_Read_Gyro();
 80012b0:	e79d      	b.n	80011ee <checkAngle+0xe>
	}
}
 80012b2:	bf00      	nop
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	47ae147b 	.word	0x47ae147b
 80012c4:	3f947ae1 	.word	0x3f947ae1
 80012c8:	20000320 	.word	0x20000320
 80012cc:	20000328 	.word	0x20000328
 80012d0:	0800822c 	.word	0x0800822c
 80012d4:	20000298 	.word	0x20000298

080012d8 <getSensor>:

int getSensor(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	int infared = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80012de:	2120      	movs	r1, #32
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f001 f87e 	bl	80023e4 <HAL_GPIO_ReadPin>
 80012e8:	4603      	mov	r3, r0
 80012ea:	607b      	str	r3, [r7, #4]
	if(infared == 0)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <getSensor+0x1e>
		return 1;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <getSensor+0x20>

		return 0;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <forwardControl>:

void forwardControl(int time)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	char buffer[16];
	float value, sum = 0;
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t base_time = __HAL_TIM_GET_COUNTER(&htim16);
 800130e:	4b74      	ldr	r3, [pc, #464]	; (80014e0 <forwardControl+0x1e0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	847b      	strh	r3, [r7, #34]	; 0x22
	timer_val = __HAL_TIM_GET_COUNTER(&htim16) - base_time;
 8001316:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <forwardControl+0x1e0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	b29a      	uxth	r2, r3
 800131e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b6f      	ldr	r3, [pc, #444]	; (80014e4 <forwardControl+0x1e4>)
 8001326:	801a      	strh	r2, [r3, #0]

	while(timer_val < time)
 8001328:	e0b0      	b.n	800148c <forwardControl+0x18c>
	{
		if(getSensor() == 0)
 800132a:	f7ff ffd5 	bl	80012d8 <getSensor>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 80ca 	beq.w	80014ca <forwardControl+0x1ca>
			return;

		MPU6050_Read_Gyro();
 8001336:	f7ff fe73 	bl	8001020 <MPU6050_Read_Gyro>
		if(fabs(gyro) > gyroMargin)
 800133a:	4b6b      	ldr	r3, [pc, #428]	; (80014e8 <forwardControl+0x1e8>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	eeb0 7ae7 	vabs.f32	s14, s15
 8001344:	4b69      	ldr	r3, [pc, #420]	; (80014ec <forwardControl+0x1ec>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	dd08      	ble.n	8001366 <forwardControl+0x66>
			sum += gyro;
 8001354:	4b64      	ldr	r3, [pc, #400]	; (80014e8 <forwardControl+0x1e8>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		value = sum * 0.001;
 8001366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001368:	f7ff f8ee 	bl	8000548 <__aeabi_f2d>
 800136c:	a35a      	add	r3, pc, #360	; (adr r3, 80014d8 <forwardControl+0x1d8>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff f941 	bl	80005f8 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fc13 	bl	8000ba8 <__aeabi_d2f>
 8001382:	4603      	mov	r3, r0
 8001384:	61fb      	str	r3, [r7, #28]
		sprintf(buffer, "\rAngle: %.2f\n", value);
 8001386:	69f8      	ldr	r0, [r7, #28]
 8001388:	f7ff f8de 	bl	8000548 <__aeabi_f2d>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	f107 000c 	add.w	r0, r7, #12
 8001394:	4956      	ldr	r1, [pc, #344]	; (80014f0 <forwardControl+0x1f0>)
 8001396:	f004 fcb1 	bl	8005cfc <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	4618      	mov	r0, r3
 80013a0:	f7fe ff16 	bl	80001d0 <strlen>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	f107 010c 	add.w	r1, r7, #12
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	4850      	ldr	r0, [pc, #320]	; (80014f4 <forwardControl+0x1f4>)
 80013b2:	f003 fb0b 	bl	80049cc <HAL_UART_Transmit>
		if(value <= -1)
 80013b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013ba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80013be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c6:	d81a      	bhi.n	80013fe <forwardControl+0xfe>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);	// Right motor 1
 80013c8:	2201      	movs	r2, #1
 80013ca:	2140      	movs	r1, #64	; 0x40
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f001 f820 	bl	8002414 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);	// Right motor 2
 80013d4:	2200      	movs	r2, #0
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013dc:	f001 f81a 	bl	8002414 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);	// Left motor 1
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f001 f813 	bl	8002414 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);	// Left motor 2
 80013ee:	2201      	movs	r2, #1
 80013f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f001 f80c 	bl	8002414 <HAL_GPIO_WritePin>
 80013fc:	e03d      	b.n	800147a <forwardControl+0x17a>
		}
		else if(value >= 1)
 80013fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	db1a      	blt.n	8001446 <forwardControl+0x146>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);	// Right motor 1
 8001410:	2201      	movs	r2, #1
 8001412:	2140      	movs	r1, #64	; 0x40
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f000 fffc 	bl	8002414 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);	// Right motor 2
 800141c:	2201      	movs	r2, #1
 800141e:	2180      	movs	r1, #128	; 0x80
 8001420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001424:	f000 fff6 	bl	8002414 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);	// Left motor 1
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f000 ffef 	bl	8002414 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);	// Left motor 2
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800143c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001440:	f000 ffe8 	bl	8002414 <HAL_GPIO_WritePin>
 8001444:	e019      	b.n	800147a <forwardControl+0x17a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);	// Right motor 1
 8001446:	2201      	movs	r2, #1
 8001448:	2140      	movs	r1, #64	; 0x40
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f000 ffe1 	bl	8002414 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);	// Right motor 2
 8001452:	2200      	movs	r2, #0
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f000 ffdb 	bl	8002414 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);	// Left motor 1
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001468:	f000 ffd4 	bl	8002414 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);	// Left motor 2
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001476:	f000 ffcd 	bl	8002414 <HAL_GPIO_WritePin>
		}
		timer_val = __HAL_TIM_GET_COUNTER(&htim16) - base_time;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <forwardControl+0x1e0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	b29a      	uxth	r2, r3
 8001482:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <forwardControl+0x1e4>)
 800148a:	801a      	strh	r2, [r3, #0]
	while(timer_val < time)
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <forwardControl+0x1e4>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4293      	cmp	r3, r2
 8001496:	f73f af48 	bgt.w	800132a <forwardControl+0x2a>
	}
	sprintf(buffer, "\r%d\n", timer_val);
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <forwardControl+0x1e4>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	4914      	ldr	r1, [pc, #80]	; (80014f8 <forwardControl+0x1f8>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 fc28 	bl	8005cfc <siprintf>
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fe8d 	bl	80001d0 <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	f107 010c 	add.w	r1, r7, #12
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	480c      	ldr	r0, [pc, #48]	; (80014f4 <forwardControl+0x1f4>)
 80014c4:	f003 fa82 	bl	80049cc <HAL_UART_Transmit>
 80014c8:	e000      	b.n	80014cc <forwardControl+0x1cc>
			return;
 80014ca:	bf00      	nop
}
 80014cc:	3728      	adds	r7, #40	; 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	f3af 8000 	nop.w
 80014d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80014dc:	3f50624d 	.word	0x3f50624d
 80014e0:	2000024c 	.word	0x2000024c
 80014e4:	2000032c 	.word	0x2000032c
 80014e8:	20000320 	.word	0x20000320
 80014ec:	20000328 	.word	0x20000328
 80014f0:	0800822c 	.word	0x0800822c
 80014f4:	20000298 	.word	0x20000298
 80014f8:	0800823c 	.word	0x0800823c

080014fc <stop>:

void stop(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);	// Right motor 1
 8001500:	2201      	movs	r2, #1
 8001502:	2140      	movs	r1, #64	; 0x40
 8001504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001508:	f000 ff84 	bl	8002414 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);	// Right motor 2
 800150c:	2201      	movs	r2, #1
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f000 ff7e 	bl	8002414 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);	// Left motor 1
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f000 ff77 	bl	8002414 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);	// Left motor 2
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f000 ff70 	bl	8002414 <HAL_GPIO_WritePin>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <forward>:

void forward(int time)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	time = time * 500;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	607b      	str	r3, [r7, #4]
	forwardControl(time);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fed7 	bl	8001300 <forwardControl>
	stop();
 8001552:	f7ff ffd3 	bl	80014fc <stop>
	HAL_Delay(100);
 8001556:	2064      	movs	r0, #100	; 0x64
 8001558:	f000 fc76 	bl	8001e48 <HAL_Delay>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <left>:
	stop();
	HAL_Delay(100);
}

void left(int angle)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);	// Right motor 1
 800156c:	2201      	movs	r2, #1
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f000 ff4e 	bl	8002414 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);	// Right motor 2
 8001578:	2200      	movs	r2, #0
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001580:	f000 ff48 	bl	8002414 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);	// Left motor 1
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158e:	f000 ff41 	bl	8002414 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);	// Left motor 2
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159c:	f000 ff3a 	bl	8002414 <HAL_GPIO_WritePin>
	checkAngle(angle);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fe1d 	bl	80011e0 <checkAngle>
	stop();
 80015a6:	f7ff ffa9 	bl	80014fc <stop>
	HAL_Delay(100);
 80015aa:	2064      	movs	r0, #100	; 0x64
 80015ac:	f000 fc4c 	bl	8001e48 <HAL_Delay>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015bc:	f000 fbc8 	bl	8001d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c0:	f000 f836 	bl	8001630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c4:	f000 f91c 	bl	8001800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015c8:	f000 f8ea 	bl	80017a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015cc:	f000 f880 	bl	80016d0 <MX_I2C1_Init>
  MX_TIM16_Init();
 80015d0:	f000 f8be 	bl	8001750 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	stop();
 80015d4:	f7ff ff92 	bl	80014fc <stop>
	MPU6050_Init();
 80015d8:	f7ff fcb8 	bl	8000f4c <MPU6050_Init>
	HAL_Delay(1000);
 80015dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015e0:	f000 fc32 	bl	8001e48 <HAL_Delay>
  	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != 0);
 80015e4:	bf00      	nop
 80015e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ea:	480f      	ldr	r0, [pc, #60]	; (8001628 <main+0x70>)
 80015ec:	f000 fefa 	bl	80023e4 <HAL_GPIO_ReadPin>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f7      	bne.n	80015e6 <main+0x2e>
  	HAL_Delay(400);
 80015f6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80015fa:	f000 fc25 	bl	8001e48 <HAL_Delay>
    MPU6050_Calibrate();
 80015fe:	f7ff fd5b 	bl	80010b8 <MPU6050_Calibrate>
    HAL_Delay(200);
 8001602:	20c8      	movs	r0, #200	; 0xc8
 8001604:	f000 fc20 	bl	8001e48 <HAL_Delay>
    HAL_TIM_Base_Start(&htim16);
 8001608:	4808      	ldr	r0, [pc, #32]	; (800162c <main+0x74>)
 800160a:	f003 f88f 	bl	800472c <HAL_TIM_Base_Start>

    forward(1);
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff ff92 	bl	8001538 <forward>
    left(90);
 8001614:	205a      	movs	r0, #90	; 0x5a
 8001616:	f7ff ffa5 	bl	8001564 <left>
    forward(5);
 800161a:	2005      	movs	r0, #5
 800161c:	f7ff ff8c 	bl	8001538 <forward>
 8001620:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8001622:	4618      	mov	r0, r3
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	48000800 	.word	0x48000800
 800162c:	2000024c 	.word	0x2000024c

08001630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b096      	sub	sp, #88	; 0x58
 8001634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	2244      	movs	r2, #68	; 0x44
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f003 feea 	bl	8005418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001644:	463b      	mov	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001652:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001656:	f001 fcff 	bl	8003058 <HAL_PWREx_ControlVoltageScaling>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001660:	f000 f944 	bl	80018ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001664:	2301      	movs	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001672:	2303      	movs	r3, #3
 8001674:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001676:	2301      	movs	r3, #1
 8001678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800167a:	2314      	movs	r3, #20
 800167c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800167e:	2307      	movs	r3, #7
 8001680:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001682:	2302      	movs	r3, #2
 8001684:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001686:	2302      	movs	r3, #2
 8001688:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4618      	mov	r0, r3
 8001690:	f001 fd38 	bl	8003104 <HAL_RCC_OscConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800169a:	f000 f927 	bl	80018ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169e:	230f      	movs	r3, #15
 80016a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a2:	2303      	movs	r3, #3
 80016a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016b2:	463b      	mov	r3, r7
 80016b4:	2104      	movs	r1, #4
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 f900 	bl	80038bc <HAL_RCC_ClockConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016c2:	f000 f913 	bl	80018ec <Error_Handler>
  }
}
 80016c6:	bf00      	nop
 80016c8:	3758      	adds	r7, #88	; 0x58
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_I2C1_Init+0x74>)
 80016d6:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <MX_I2C1_Init+0x78>)
 80016d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_I2C1_Init+0x74>)
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <MX_I2C1_Init+0x7c>)
 80016de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_I2C1_Init+0x74>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_I2C1_Init+0x74>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_I2C1_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_I2C1_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_I2C1_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_I2C1_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_I2C1_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800170a:	480e      	ldr	r0, [pc, #56]	; (8001744 <MX_I2C1_Init+0x74>)
 800170c:	f000 fe9a 	bl	8002444 <HAL_I2C_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001716:	f000 f8e9 	bl	80018ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800171a:	2100      	movs	r1, #0
 800171c:	4809      	ldr	r0, [pc, #36]	; (8001744 <MX_I2C1_Init+0x74>)
 800171e:	f001 fbf5 	bl	8002f0c <HAL_I2CEx_ConfigAnalogFilter>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001728:	f000 f8e0 	bl	80018ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800172c:	2100      	movs	r1, #0
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_I2C1_Init+0x74>)
 8001730:	f001 fc37 	bl	8002fa2 <HAL_I2CEx_ConfigDigitalFilter>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800173a:	f000 f8d7 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200001f8 	.word	0x200001f8
 8001748:	40005400 	.word	0x40005400
 800174c:	10909cec 	.word	0x10909cec

08001750 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001754:	4b10      	ldr	r3, [pc, #64]	; (8001798 <MX_TIM16_Init+0x48>)
 8001756:	4a11      	ldr	r2, [pc, #68]	; (800179c <MX_TIM16_Init+0x4c>)
 8001758:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_TIM16_Init+0x48>)
 800175c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001760:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <MX_TIM16_Init+0x48>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_TIM16_Init+0x48>)
 800176a:	f242 720f 	movw	r2, #9999	; 0x270f
 800176e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_TIM16_Init+0x48>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_TIM16_Init+0x48>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_TIM16_Init+0x48>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_TIM16_Init+0x48>)
 8001784:	f002 ff7a 	bl	800467c <HAL_TIM_Base_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800178e:	f000 f8ad 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000024c 	.word	0x2000024c
 800179c:	40014400 	.word	0x40014400

080017a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017a6:	4a15      	ldr	r2, [pc, #84]	; (80017fc <MX_USART2_UART_Init+0x5c>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017e4:	f003 f8a4 	bl	8004930 <HAL_UART_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017ee:	f000 f87d 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000298 	.word	0x20000298
 80017fc:	40004400 	.word	0x40004400

08001800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <MX_GPIO_Init+0xe4>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a32      	ldr	r2, [pc, #200]	; (80018e4 <MX_GPIO_Init+0xe4>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <MX_GPIO_Init+0xe4>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <MX_GPIO_Init+0xe4>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <MX_GPIO_Init+0xe4>)
 8001834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <MX_GPIO_Init+0xe4>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <MX_GPIO_Init+0xe4>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a26      	ldr	r2, [pc, #152]	; (80018e4 <MX_GPIO_Init+0xe4>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <MX_GPIO_Init+0xe4>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <MX_GPIO_Init+0xe4>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <MX_GPIO_Init+0xe4>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <MX_GPIO_Init+0xe4>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800187c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001880:	f000 fdc8 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800188a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800188e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4813      	ldr	r0, [pc, #76]	; (80018e8 <MX_GPIO_Init+0xe8>)
 800189c:	f000 fbf8 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018a0:	2320      	movs	r3, #32
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b6:	f000 fbeb 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80018ba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018c8:	2301      	movs	r3, #1
 80018ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d6:	f000 fbdb 	bl	8002090 <HAL_GPIO_Init>

}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000800 	.word	0x48000800

080018ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_MspInit+0x44>)
 8001904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_MspInit+0x44>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6613      	str	r3, [r2, #96]	; 0x60
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_MspInit+0x44>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_MspInit+0x44>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_MspInit+0x44>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6593      	str	r3, [r2, #88]	; 0x58
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_MspInit+0x44>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000

08001944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b0ac      	sub	sp, #176	; 0xb0
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2288      	movs	r2, #136	; 0x88
 8001962:	2100      	movs	r1, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f003 fd57 	bl	8005418 <memset>
  if(hi2c->Instance==I2C1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <HAL_I2C_MspInit+0xb0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d13b      	bne.n	80019ec <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001974:	2340      	movs	r3, #64	; 0x40
 8001976:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001978:	2300      	movs	r3, #0
 800197a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4618      	mov	r0, r3
 8001982:	f002 f9bf 	bl	8003d04 <HAL_RCCEx_PeriphCLKConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800198c:	f7ff ffae 	bl	80018ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_I2C_MspInit+0xb4>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001994:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <HAL_I2C_MspInit+0xb4>)
 8001996:	f043 0302 	orr.w	r3, r3, #2
 800199a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_I2C_MspInit+0xb4>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b0:	2312      	movs	r3, #18
 80019b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019c2:	2304      	movs	r3, #4
 80019c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019cc:	4619      	mov	r1, r3
 80019ce:	480b      	ldr	r0, [pc, #44]	; (80019fc <HAL_I2C_MspInit+0xb8>)
 80019d0:	f000 fb5e 	bl	8002090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_I2C_MspInit+0xb4>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_I2C_MspInit+0xb4>)
 80019da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019de:	6593      	str	r3, [r2, #88]	; 0x58
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_I2C_MspInit+0xb4>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	37b0      	adds	r7, #176	; 0xb0
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40005400 	.word	0x40005400
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000400 	.word	0x48000400

08001a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <HAL_TIM_Base_MspInit+0x38>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10b      	bne.n	8001a2a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_TIM_Base_MspInit+0x3c>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_TIM_Base_MspInit+0x3c>)
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_TIM_Base_MspInit+0x3c>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40014400 	.word	0x40014400
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b0ac      	sub	sp, #176	; 0xb0
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2288      	movs	r2, #136	; 0x88
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 fcd9 	bl	8005418 <memset>
  if(huart->Instance==USART2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <HAL_UART_MspInit+0xb0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d13b      	bne.n	8001ae8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 f941 	bl	8003d04 <HAL_RCCEx_PeriphCLKConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a88:	f7ff ff30 	bl	80018ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_UART_MspInit+0xb4>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <HAL_UART_MspInit+0xb4>)
 8001a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a96:	6593      	str	r3, [r2, #88]	; 0x58
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_UART_MspInit+0xb4>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <HAL_UART_MspInit+0xb4>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <HAL_UART_MspInit+0xb4>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_UART_MspInit+0xb4>)
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001abc:	230c      	movs	r3, #12
 8001abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae4:	f000 fad4 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	37b0      	adds	r7, #176	; 0xb0
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40004400 	.word	0x40004400
 8001af4:	40021000 	.word	0x40021000

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while(1)
 8001afc:	e7fe      	b.n	8001afc <NMI_Handler+0x4>

08001afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b44:	f000 f960 	bl	8001e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_getpid>:
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	2301      	movs	r3, #1
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_kill>:
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	f003 fc2d 	bl	80053c4 <__errno>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2216      	movs	r2, #22
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_exit>:
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ffe7 	bl	8001b5c <_kill>
 8001b8e:	e7fe      	b.n	8001b8e <_exit+0x12>

08001b90 <_read>:
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e00a      	b.n	8001bb8 <_read+0x28>
 8001ba2:	f3af 8000 	nop.w
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	b2ca      	uxtb	r2, r1
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbf0      	blt.n	8001ba2 <_read+0x12>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_write>:
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	e009      	b.n	8001bf0 <_write+0x26>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	60ba      	str	r2, [r7, #8]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f3af 8000 	nop.w
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dbf1      	blt.n	8001bdc <_write+0x12>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_close>:
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <_fstat>:
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <_isatty>:
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	2301      	movs	r3, #1
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_lseek>:
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <_sbrk>:
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <_sbrk+0x5c>)
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <_sbrk+0x60>)
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d102      	bne.n	8001c8e <_sbrk+0x22>
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <_sbrk+0x64>)
 8001c8a:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <_sbrk+0x68>)
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <_sbrk+0x64>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d207      	bcs.n	8001cac <_sbrk+0x40>
 8001c9c:	f003 fb92 	bl	80053c4 <__errno>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	e009      	b.n	8001cc0 <_sbrk+0x54>
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <_sbrk+0x64>)
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20018000 	.word	0x20018000
 8001ccc:	00000400 	.word	0x00000400
 8001cd0:	20000330 	.word	0x20000330
 8001cd4:	20000348 	.word	0x20000348

08001cd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <SystemInit+0x20>)
 8001cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <SystemInit+0x20>)
 8001ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <Reset_Handler>:
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d34 <LoopForever+0x2>
 8001d00:	f7ff ffea 	bl	8001cd8 <SystemInit>
 8001d04:	480c      	ldr	r0, [pc, #48]	; (8001d38 <LoopForever+0x6>)
 8001d06:	490d      	ldr	r1, [pc, #52]	; (8001d3c <LoopForever+0xa>)
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <LoopForever+0xe>)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:
 8001d0e:	58d4      	ldr	r4, [r2, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:
 8001d14:	18c4      	adds	r4, r0, r3
 8001d16:	428c      	cmp	r4, r1
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <LoopForever+0x12>)
 8001d1c:	4c0a      	ldr	r4, [pc, #40]	; (8001d48 <LoopForever+0x16>)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:
 8001d26:	42a2      	cmp	r2, r4
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>
 8001d2a:	f003 fb51 	bl	80053d0 <__libc_init_array>
 8001d2e:	f7ff fc43 	bl	80015b8 <main>

08001d32 <LoopForever>:
 8001d32:	e7fe      	b.n	8001d32 <LoopForever>
 8001d34:	20018000 	.word	0x20018000
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	200001dc 	.word	0x200001dc
 8001d40:	08008674 	.word	0x08008674
 8001d44:	200001dc 	.word	0x200001dc
 8001d48:	20000348 	.word	0x20000348

08001d4c <ADC1_2_IRQHandler>:
 8001d4c:	e7fe      	b.n	8001d4c <ADC1_2_IRQHandler>
	...

08001d50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_Init+0x3c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <HAL_Init+0x3c>)
 8001d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d66:	2003      	movs	r0, #3
 8001d68:	f000 f95a 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f000 f80f 	bl	8001d90 <HAL_InitTick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	e001      	b.n	8001d82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d7e:	f7ff fdbd 	bl	80018fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40022000 	.word	0x40022000

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_InitTick+0x6c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d023      	beq.n	8001dec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_InitTick+0x70>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_InitTick+0x6c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f95b 	bl	8002076 <HAL_SYSTICK_Config>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10f      	bne.n	8001de6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d809      	bhi.n	8001de0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f000 f92f 	bl	8002036 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_InitTick+0x74>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e007      	b.n	8001df0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e004      	b.n	8001df0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	e001      	b.n	8001df0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x20>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x24>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <HAL_IncTick+0x24>)
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	20000334 	.word	0x20000334

08001e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return uwTick;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <HAL_GetTick+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000334 	.word	0x20000334

08001e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff ffee 	bl	8001e30 <HAL_GetTick>
 8001e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d005      	beq.n	8001e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_Delay+0x44>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e6e:	bf00      	nop
 8001e70:	f7ff ffde 	bl	8001e30 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d8f7      	bhi.n	8001e70 <HAL_Delay+0x28>
  {
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000008 	.word	0x20000008

08001e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec2:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	60d3      	str	r3, [r2, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 0307 	and.w	r3, r3, #7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fb4:	f3bf 8f4f 	dsb	sy
}
 8001fb8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <__NVIC_SystemReset+0x24>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001fc2:	4904      	ldr	r1, [pc, #16]	; (8001fd4 <__NVIC_SystemReset+0x24>)
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <__NVIC_SystemReset+0x28>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fca:	f3bf 8f4f 	dsb	sy
}
 8001fce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <__NVIC_SystemReset+0x20>
 8001fd4:	e000ed00 	.word	0xe000ed00
 8001fd8:	05fa0004 	.word	0x05fa0004

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7ff ff78 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff31 	bl	8001e90 <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002048:	f7ff ff46 	bl	8001ed8 <__NVIC_GetPriorityGrouping>
 800204c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f7ff ff78 	bl	8001f48 <NVIC_EncodePriority>
 8002058:	4602      	mov	r2, r0
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff47 	bl	8001ef4 <__NVIC_SetPriority>
}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002072:	f7ff ff9d 	bl	8001fb0 <__NVIC_SystemReset>

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffac 	bl	8001fdc <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209e:	e17f      	b.n	80023a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2101      	movs	r1, #1
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8171 	beq.w	800239a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d005      	beq.n	80020d0 <HAL_GPIO_Init+0x40>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d130      	bne.n	8002132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002106:	2201      	movs	r2, #1
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	f003 0201 	and.w	r2, r3, #1
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b03      	cmp	r3, #3
 800213c:	d118      	bne.n	8002170 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002144:	2201      	movs	r2, #1
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	08db      	lsrs	r3, r3, #3
 800215a:	f003 0201 	and.w	r2, r3, #1
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b03      	cmp	r3, #3
 800217a:	d017      	beq.n	80021ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d123      	bne.n	8002200 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	220f      	movs	r2, #15
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	08da      	lsrs	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3208      	adds	r2, #8
 80021fa:	6939      	ldr	r1, [r7, #16]
 80021fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80ac 	beq.w	800239a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002242:	4b5f      	ldr	r3, [pc, #380]	; (80023c0 <HAL_GPIO_Init+0x330>)
 8002244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002246:	4a5e      	ldr	r2, [pc, #376]	; (80023c0 <HAL_GPIO_Init+0x330>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6613      	str	r3, [r2, #96]	; 0x60
 800224e:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <HAL_GPIO_Init+0x330>)
 8002250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800225a:	4a5a      	ldr	r2, [pc, #360]	; (80023c4 <HAL_GPIO_Init+0x334>)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002266:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	220f      	movs	r2, #15
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002284:	d025      	beq.n	80022d2 <HAL_GPIO_Init+0x242>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4f      	ldr	r2, [pc, #316]	; (80023c8 <HAL_GPIO_Init+0x338>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01f      	beq.n	80022ce <HAL_GPIO_Init+0x23e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4e      	ldr	r2, [pc, #312]	; (80023cc <HAL_GPIO_Init+0x33c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0x23a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4d      	ldr	r2, [pc, #308]	; (80023d0 <HAL_GPIO_Init+0x340>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x236>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4c      	ldr	r2, [pc, #304]	; (80023d4 <HAL_GPIO_Init+0x344>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x232>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4b      	ldr	r2, [pc, #300]	; (80023d8 <HAL_GPIO_Init+0x348>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x22e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4a      	ldr	r2, [pc, #296]	; (80023dc <HAL_GPIO_Init+0x34c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x22a>
 80022b6:	2306      	movs	r3, #6
 80022b8:	e00c      	b.n	80022d4 <HAL_GPIO_Init+0x244>
 80022ba:	2307      	movs	r3, #7
 80022bc:	e00a      	b.n	80022d4 <HAL_GPIO_Init+0x244>
 80022be:	2305      	movs	r3, #5
 80022c0:	e008      	b.n	80022d4 <HAL_GPIO_Init+0x244>
 80022c2:	2304      	movs	r3, #4
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x244>
 80022c6:	2303      	movs	r3, #3
 80022c8:	e004      	b.n	80022d4 <HAL_GPIO_Init+0x244>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e002      	b.n	80022d4 <HAL_GPIO_Init+0x244>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_GPIO_Init+0x244>
 80022d2:	2300      	movs	r3, #0
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	f002 0203 	and.w	r2, r2, #3
 80022da:	0092      	lsls	r2, r2, #2
 80022dc:	4093      	lsls	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022e4:	4937      	ldr	r1, [pc, #220]	; (80023c4 <HAL_GPIO_Init+0x334>)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	089b      	lsrs	r3, r3, #2
 80022ea:	3302      	adds	r3, #2
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022f2:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <HAL_GPIO_Init+0x350>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002316:	4a32      	ldr	r2, [pc, #200]	; (80023e0 <HAL_GPIO_Init+0x350>)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800231c:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_GPIO_Init+0x350>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002340:	4a27      	ldr	r2, [pc, #156]	; (80023e0 <HAL_GPIO_Init+0x350>)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002346:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <HAL_GPIO_Init+0x350>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800236a:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <HAL_GPIO_Init+0x350>)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_GPIO_Init+0x350>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002394:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <HAL_GPIO_Init+0x350>)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f47f ae78 	bne.w	80020a0 <HAL_GPIO_Init+0x10>
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010000 	.word	0x40010000
 80023c8:	48000400 	.word	0x48000400
 80023cc:	48000800 	.word	0x48000800
 80023d0:	48000c00 	.word	0x48000c00
 80023d4:	48001000 	.word	0x48001000
 80023d8:	48001400 	.word	0x48001400
 80023dc:	48001800 	.word	0x48001800
 80023e0:	40010400 	.word	0x40010400

080023e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	887b      	ldrh	r3, [r7, #2]
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
 8002400:	e001      	b.n	8002406 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
 8002420:	4613      	mov	r3, r2
 8002422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002424:	787b      	ldrb	r3, [r7, #1]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002430:	e002      	b.n	8002438 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e081      	b.n	800255a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff fa6a 	bl	8001944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2224      	movs	r2, #36	; 0x24
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002494:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d107      	bne.n	80024be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	e006      	b.n	80024cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d104      	bne.n	80024de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002500:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69d9      	ldr	r1, [r3, #28]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1a      	ldr	r2, [r3, #32]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	4608      	mov	r0, r1
 800256e:	4611      	mov	r1, r2
 8002570:	461a      	mov	r2, r3
 8002572:	4603      	mov	r3, r0
 8002574:	817b      	strh	r3, [r7, #10]
 8002576:	460b      	mov	r3, r1
 8002578:	813b      	strh	r3, [r7, #8]
 800257a:	4613      	mov	r3, r2
 800257c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b20      	cmp	r3, #32
 8002588:	f040 80f9 	bne.w	800277e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_I2C_Mem_Write+0x34>
 8002592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800259e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0ed      	b.n	8002780 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_I2C_Mem_Write+0x4e>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e0e6      	b.n	8002780 <HAL_I2C_Mem_Write+0x21c>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025ba:	f7ff fc39 	bl	8001e30 <HAL_GetTick>
 80025be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2319      	movs	r3, #25
 80025c6:	2201      	movs	r2, #1
 80025c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fac3 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0d1      	b.n	8002780 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2221      	movs	r2, #33	; 0x21
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2240      	movs	r2, #64	; 0x40
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a3a      	ldr	r2, [r7, #32]
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002604:	88f8      	ldrh	r0, [r7, #6]
 8002606:	893a      	ldrh	r2, [r7, #8]
 8002608:	8979      	ldrh	r1, [r7, #10]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	4603      	mov	r3, r0
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f9d3 	bl	80029c0 <I2C_RequestMemoryWrite>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0a9      	b.n	8002780 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2bff      	cmp	r3, #255	; 0xff
 8002634:	d90e      	bls.n	8002654 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	b2da      	uxtb	r2, r3
 8002642:	8979      	ldrh	r1, [r7, #10]
 8002644:	2300      	movs	r3, #0
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fc2b 	bl	8002ea8 <I2C_TransferConfig>
 8002652:	e00f      	b.n	8002674 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	b2da      	uxtb	r2, r3
 8002664:	8979      	ldrh	r1, [r7, #10]
 8002666:	2300      	movs	r3, #0
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fc1a 	bl	8002ea8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 faad 	bl	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e07b      	b.n	8002780 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d034      	beq.n	800272c <HAL_I2C_Mem_Write+0x1c8>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d130      	bne.n	800272c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	2200      	movs	r2, #0
 80026d2:	2180      	movs	r1, #128	; 0x80
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fa3f 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e04d      	b.n	8002780 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2bff      	cmp	r3, #255	; 0xff
 80026ec:	d90e      	bls.n	800270c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	22ff      	movs	r2, #255	; 0xff
 80026f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	8979      	ldrh	r1, [r7, #10]
 80026fc:	2300      	movs	r3, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fbcf 	bl	8002ea8 <I2C_TransferConfig>
 800270a:	e00f      	b.n	800272c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	b2da      	uxtb	r2, r3
 800271c:	8979      	ldrh	r1, [r7, #10]
 800271e:	2300      	movs	r3, #0
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fbbe 	bl	8002ea8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d19e      	bne.n	8002674 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 fa8c 	bl	8002c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e01a      	b.n	8002780 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2220      	movs	r2, #32
 8002750:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_I2C_Mem_Write+0x224>)
 800275e:	400b      	ands	r3, r1
 8002760:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800277e:	2302      	movs	r3, #2
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	fe00e800 	.word	0xfe00e800

0800278c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	4608      	mov	r0, r1
 8002796:	4611      	mov	r1, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4603      	mov	r3, r0
 800279c:	817b      	strh	r3, [r7, #10]
 800279e:	460b      	mov	r3, r1
 80027a0:	813b      	strh	r3, [r7, #8]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	f040 80fd 	bne.w	80029ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_I2C_Mem_Read+0x34>
 80027ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0f1      	b.n	80029b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_I2C_Mem_Read+0x4e>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e0ea      	b.n	80029b0 <HAL_I2C_Mem_Read+0x224>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027e2:	f7ff fb25 	bl	8001e30 <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2319      	movs	r3, #25
 80027ee:	2201      	movs	r2, #1
 80027f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f9af 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0d5      	b.n	80029b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2222      	movs	r2, #34	; 0x22
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a3a      	ldr	r2, [r7, #32]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800282c:	88f8      	ldrh	r0, [r7, #6]
 800282e:	893a      	ldrh	r2, [r7, #8]
 8002830:	8979      	ldrh	r1, [r7, #10]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	4603      	mov	r3, r0
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f913 	bl	8002a68 <I2C_RequestMemoryRead>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0ad      	b.n	80029b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2bff      	cmp	r3, #255	; 0xff
 800285c:	d90e      	bls.n	800287c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	22ff      	movs	r2, #255	; 0xff
 8002862:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	b2da      	uxtb	r2, r3
 800286a:	8979      	ldrh	r1, [r7, #10]
 800286c:	4b52      	ldr	r3, [pc, #328]	; (80029b8 <HAL_I2C_Mem_Read+0x22c>)
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fb17 	bl	8002ea8 <I2C_TransferConfig>
 800287a:	e00f      	b.n	800289c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	b2da      	uxtb	r2, r3
 800288c:	8979      	ldrh	r1, [r7, #10]
 800288e:	4b4a      	ldr	r3, [pc, #296]	; (80029b8 <HAL_I2C_Mem_Read+0x22c>)
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fb06 	bl	8002ea8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	2200      	movs	r2, #0
 80028a4:	2104      	movs	r1, #4
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f956 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e07c      	b.n	80029b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d034      	beq.n	800295c <HAL_I2C_Mem_Read+0x1d0>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d130      	bne.n	800295c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	2200      	movs	r2, #0
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f927 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e04d      	b.n	80029b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	2bff      	cmp	r3, #255	; 0xff
 800291c:	d90e      	bls.n	800293c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	22ff      	movs	r2, #255	; 0xff
 8002922:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	b2da      	uxtb	r2, r3
 800292a:	8979      	ldrh	r1, [r7, #10]
 800292c:	2300      	movs	r3, #0
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fab7 	bl	8002ea8 <I2C_TransferConfig>
 800293a:	e00f      	b.n	800295c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	b2da      	uxtb	r2, r3
 800294c:	8979      	ldrh	r1, [r7, #10]
 800294e:	2300      	movs	r3, #0
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 faa6 	bl	8002ea8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d19a      	bne.n	800289c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f974 	bl	8002c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e01a      	b.n	80029b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2220      	movs	r2, #32
 8002980:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6859      	ldr	r1, [r3, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_I2C_Mem_Read+0x230>)
 800298e:	400b      	ands	r3, r1
 8002990:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
  }
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	80002400 	.word	0x80002400
 80029bc:	fe00e800 	.word	0xfe00e800

080029c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	4608      	mov	r0, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	817b      	strh	r3, [r7, #10]
 80029d2:	460b      	mov	r3, r1
 80029d4:	813b      	strh	r3, [r7, #8]
 80029d6:	4613      	mov	r3, r2
 80029d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	8979      	ldrh	r1, [r7, #10]
 80029e0:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <I2C_RequestMemoryWrite+0xa4>)
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fa5d 	bl	8002ea8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	69b9      	ldr	r1, [r7, #24]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f8f0 	bl	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e02c      	b.n	8002a5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a08:	893b      	ldrh	r3, [r7, #8]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28
 8002a12:	e015      	b.n	8002a40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a14:	893b      	ldrh	r3, [r7, #8]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	69b9      	ldr	r1, [r7, #24]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f8d6 	bl	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e012      	b.n	8002a5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a36:	893b      	ldrh	r3, [r7, #8]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2200      	movs	r2, #0
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f884 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	80002000 	.word	0x80002000

08002a68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	817b      	strh	r3, [r7, #10]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	813b      	strh	r3, [r7, #8]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	8979      	ldrh	r1, [r7, #10]
 8002a88:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <I2C_RequestMemoryRead+0xa4>)
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fa0a 	bl	8002ea8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f89d 	bl	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e02c      	b.n	8002b02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d105      	bne.n	8002aba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aae:	893b      	ldrh	r3, [r7, #8]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ab8:	e015      	b.n	8002ae6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002aba:	893b      	ldrh	r3, [r7, #8]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	69b9      	ldr	r1, [r7, #24]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f883 	bl	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e012      	b.n	8002b02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002adc:	893b      	ldrh	r3, [r7, #8]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2140      	movs	r1, #64	; 0x40
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f831 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	80002000 	.word	0x80002000

08002b10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d103      	bne.n	8002b2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d007      	beq.n	8002b4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	619a      	str	r2, [r3, #24]
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b68:	e022      	b.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d01e      	beq.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b72:	f7ff f95d 	bl	8001e30 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d302      	bcc.n	8002b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d113      	bne.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e00f      	b.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d0cd      	beq.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002be4:	e02c      	b.n	8002c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f870 	bl	8002cd0 <I2C_IsErrorOccurred>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e02a      	b.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d01e      	beq.n	8002c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7ff f915 	bl	8001e30 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d113      	bne.n	8002c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e007      	b.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d1cb      	bne.n	8002be6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c64:	e028      	b.n	8002cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f830 	bl	8002cd0 <I2C_IsErrorOccurred>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e026      	b.n	8002cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7ff f8d9 	bl	8001e30 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d113      	bne.n	8002cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e007      	b.n	8002cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d1cf      	bne.n	8002c66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d075      	beq.n	8002de8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2210      	movs	r2, #16
 8002d02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d04:	e056      	b.n	8002db4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d052      	beq.n	8002db4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d0e:	f7ff f88f 	bl	8001e30 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d302      	bcc.n	8002d24 <I2C_IsErrorOccurred+0x54>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d147      	bne.n	8002db4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d46:	d12e      	bne.n	8002da6 <I2C_IsErrorOccurred+0xd6>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d4e:	d02a      	beq.n	8002da6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d027      	beq.n	8002da6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d66:	f7ff f863 	bl	8001e30 <HAL_GetTick>
 8002d6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d6c:	e01b      	b.n	8002da6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d6e:	f7ff f85f 	bl	8001e30 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b19      	cmp	r3, #25
 8002d7a:	d914      	bls.n	8002da6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d1dc      	bne.n	8002d6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d003      	beq.n	8002dca <I2C_IsErrorOccurred+0xfa>
 8002dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d09d      	beq.n	8002d06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00b      	beq.n	8002e34 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	f043 0308 	orr.w	r3, r3, #8
 8002e22:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01c      	beq.n	8002e98 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f7ff fe56 	bl	8002b10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <I2C_IsErrorOccurred+0x1d4>)
 8002e70:	400b      	ands	r3, r1
 8002e72:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3728      	adds	r7, #40	; 0x28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	fe00e800 	.word	0xfe00e800

08002ea8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	817b      	strh	r3, [r7, #10]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eba:	897b      	ldrh	r3, [r7, #10]
 8002ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ec0:	7a7b      	ldrb	r3, [r7, #9]
 8002ec2:	041b      	lsls	r3, r3, #16
 8002ec4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ec8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ed6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	0d5b      	lsrs	r3, r3, #21
 8002ee2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <I2C_TransferConfig+0x60>)
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	43db      	mvns	r3, r3
 8002eec:	ea02 0103 	and.w	r1, r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	03ff63ff 	.word	0x03ff63ff

08002f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d138      	bne.n	8002f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e032      	b.n	8002f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	; 0x24
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6819      	ldr	r1, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e000      	b.n	8002f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d139      	bne.n	800302c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e033      	b.n	800302e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2224      	movs	r2, #36	; 0x24
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ff4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	e000      	b.n	800302e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <HAL_PWREx_GetVoltageRange+0x18>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40007000 	.word	0x40007000

08003058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003066:	d130      	bne.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003068:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003074:	d038      	beq.n	80030e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800307e:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003080:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003084:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003086:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2232      	movs	r2, #50	; 0x32
 800308c:	fb02 f303 	mul.w	r3, r2, r3
 8003090:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	0c9b      	lsrs	r3, r3, #18
 8003098:	3301      	adds	r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800309c:	e002      	b.n	80030a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b0:	d102      	bne.n	80030b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f2      	bne.n	800309e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c4:	d110      	bne.n	80030e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e00f      	b.n	80030ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d6:	d007      	beq.n	80030e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030d8:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030e0:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40007000 	.word	0x40007000
 80030fc:	20000000 	.word	0x20000000
 8003100:	431bde83 	.word	0x431bde83

08003104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e3ca      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003116:	4b97      	ldr	r3, [pc, #604]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003120:	4b94      	ldr	r3, [pc, #592]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80e4 	beq.w	8003300 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_RCC_OscConfig+0x4a>
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	f040 808b 	bne.w	800325c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b01      	cmp	r3, #1
 800314a:	f040 8087 	bne.w	800325c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800314e:	4b89      	ldr	r3, [pc, #548]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_RCC_OscConfig+0x62>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e3a2      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1a      	ldr	r2, [r3, #32]
 800316a:	4b82      	ldr	r3, [pc, #520]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <HAL_RCC_OscConfig+0x7c>
 8003176:	4b7f      	ldr	r3, [pc, #508]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800317e:	e005      	b.n	800318c <HAL_RCC_OscConfig+0x88>
 8003180:	4b7c      	ldr	r3, [pc, #496]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 8003182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800318c:	4293      	cmp	r3, r2
 800318e:	d223      	bcs.n	80031d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fd55 	bl	8003c44 <RCC_SetFlashLatencyFromMSIRange>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e383      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031a4:	4b73      	ldr	r3, [pc, #460]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a72      	ldr	r2, [pc, #456]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80031aa:	f043 0308 	orr.w	r3, r3, #8
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b70      	ldr	r3, [pc, #448]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	496d      	ldr	r1, [pc, #436]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031c2:	4b6c      	ldr	r3, [pc, #432]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	4968      	ldr	r1, [pc, #416]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	604b      	str	r3, [r1, #4]
 80031d6:	e025      	b.n	8003224 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031d8:	4b66      	ldr	r3, [pc, #408]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a65      	ldr	r2, [pc, #404]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80031de:	f043 0308 	orr.w	r3, r3, #8
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b63      	ldr	r3, [pc, #396]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4960      	ldr	r1, [pc, #384]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f6:	4b5f      	ldr	r3, [pc, #380]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	495b      	ldr	r1, [pc, #364]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fd15 	bl	8003c44 <RCC_SetFlashLatencyFromMSIRange>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e343      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003224:	f000 fc4a 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b52      	ldr	r3, [pc, #328]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	4950      	ldr	r1, [pc, #320]	; (8003378 <HAL_RCC_OscConfig+0x274>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
 8003240:	4a4e      	ldr	r2, [pc, #312]	; (800337c <HAL_RCC_OscConfig+0x278>)
 8003242:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003244:	4b4e      	ldr	r3, [pc, #312]	; (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe fda1 	bl	8001d90 <HAL_InitTick>
 800324e:	4603      	mov	r3, r0
 8003250:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d052      	beq.n	80032fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	e327      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d032      	beq.n	80032ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003264:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a42      	ldr	r2, [pc, #264]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003270:	f7fe fdde 	bl	8001e30 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003278:	f7fe fdda 	bl	8001e30 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e310      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800328a:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003296:	4b37      	ldr	r3, [pc, #220]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a36      	ldr	r2, [pc, #216]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 800329c:	f043 0308 	orr.w	r3, r3, #8
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b34      	ldr	r3, [pc, #208]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4931      	ldr	r1, [pc, #196]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b4:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	492c      	ldr	r1, [pc, #176]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
 80032c8:	e01a      	b.n	8003300 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032ca:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a29      	ldr	r2, [pc, #164]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80032d0:	f023 0301 	bic.w	r3, r3, #1
 80032d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032d6:	f7fe fdab 	bl	8001e30 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032de:	f7fe fda7 	bl	8001e30 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e2dd      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032f0:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f0      	bne.n	80032de <HAL_RCC_OscConfig+0x1da>
 80032fc:	e000      	b.n	8003300 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d074      	beq.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b08      	cmp	r3, #8
 8003310:	d005      	beq.n	800331e <HAL_RCC_OscConfig+0x21a>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b0c      	cmp	r3, #12
 8003316:	d10e      	bne.n	8003336 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d10b      	bne.n	8003336 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d064      	beq.n	80033f4 <HAL_RCC_OscConfig+0x2f0>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d160      	bne.n	80033f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e2ba      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333e:	d106      	bne.n	800334e <HAL_RCC_OscConfig+0x24a>
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 8003346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e026      	b.n	800339c <HAL_RCC_OscConfig+0x298>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003356:	d115      	bne.n	8003384 <HAL_RCC_OscConfig+0x280>
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a05      	ldr	r2, [pc, #20]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 800335e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a02      	ldr	r2, [pc, #8]	; (8003374 <HAL_RCC_OscConfig+0x270>)
 800336a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e014      	b.n	800339c <HAL_RCC_OscConfig+0x298>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	08008244 	.word	0x08008244
 800337c:	20000000 	.word	0x20000000
 8003380:	20000004 	.word	0x20000004
 8003384:	4ba0      	ldr	r3, [pc, #640]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a9f      	ldr	r2, [pc, #636]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 800338a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b9d      	ldr	r3, [pc, #628]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a9c      	ldr	r2, [pc, #624]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 8003396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe fd44 	bl	8001e30 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fe fd40 	bl	8001e30 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e276      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033be:	4b92      	ldr	r3, [pc, #584]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x2a8>
 80033ca:	e014      	b.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe fd30 	bl	8001e30 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fe fd2c 	bl	8001e30 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e262      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033e6:	4b88      	ldr	r3, [pc, #544]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x2d0>
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d060      	beq.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b04      	cmp	r3, #4
 8003406:	d005      	beq.n	8003414 <HAL_RCC_OscConfig+0x310>
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b0c      	cmp	r3, #12
 800340c:	d119      	bne.n	8003442 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d116      	bne.n	8003442 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003414:	4b7c      	ldr	r3, [pc, #496]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_OscConfig+0x328>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e23f      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342c:	4b76      	ldr	r3, [pc, #472]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	061b      	lsls	r3, r3, #24
 800343a:	4973      	ldr	r1, [pc, #460]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003440:	e040      	b.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d023      	beq.n	8003492 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800344a:	4b6f      	ldr	r3, [pc, #444]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a6e      	ldr	r2, [pc, #440]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fe fceb 	bl	8001e30 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800345e:	f7fe fce7 	bl	8001e30 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e21d      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003470:	4b65      	ldr	r3, [pc, #404]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347c:	4b62      	ldr	r3, [pc, #392]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	495f      	ldr	r1, [pc, #380]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
 8003490:	e018      	b.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003492:	4b5d      	ldr	r3, [pc, #372]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a5c      	ldr	r2, [pc, #368]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 8003498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800349c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fe fcc7 	bl	8001e30 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a6:	f7fe fcc3 	bl	8001e30 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e1f9      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034b8:	4b53      	ldr	r3, [pc, #332]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f0      	bne.n	80034a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d03c      	beq.n	800354a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01c      	beq.n	8003512 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d8:	4b4b      	ldr	r3, [pc, #300]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 80034da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034de:	4a4a      	ldr	r2, [pc, #296]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e8:	f7fe fca2 	bl	8001e30 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f0:	f7fe fc9e 	bl	8001e30 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e1d4      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003502:	4b41      	ldr	r3, [pc, #260]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 8003504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ef      	beq.n	80034f0 <HAL_RCC_OscConfig+0x3ec>
 8003510:	e01b      	b.n	800354a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003512:	4b3d      	ldr	r3, [pc, #244]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 8003514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003518:	4a3b      	ldr	r2, [pc, #236]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fe fc85 	bl	8001e30 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352a:	f7fe fc81 	bl	8001e30 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e1b7      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800353c:	4b32      	ldr	r3, [pc, #200]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 800353e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1ef      	bne.n	800352a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80a6 	beq.w	80036a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003558:	2300      	movs	r3, #0
 800355a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800355c:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10d      	bne.n	8003584 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003568:	4b27      	ldr	r3, [pc, #156]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	4a26      	ldr	r2, [pc, #152]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 800356e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003572:	6593      	str	r3, [r2, #88]	; 0x58
 8003574:	4b24      	ldr	r3, [pc, #144]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003580:	2301      	movs	r3, #1
 8003582:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003584:	4b21      	ldr	r3, [pc, #132]	; (800360c <HAL_RCC_OscConfig+0x508>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d118      	bne.n	80035c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003590:	4b1e      	ldr	r3, [pc, #120]	; (800360c <HAL_RCC_OscConfig+0x508>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1d      	ldr	r2, [pc, #116]	; (800360c <HAL_RCC_OscConfig+0x508>)
 8003596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359c:	f7fe fc48 	bl	8001e30 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a4:	f7fe fc44 	bl	8001e30 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e17a      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <HAL_RCC_OscConfig+0x508>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d108      	bne.n	80035dc <HAL_RCC_OscConfig+0x4d8>
 80035ca:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035da:	e029      	b.n	8003630 <HAL_RCC_OscConfig+0x52c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	d115      	bne.n	8003610 <HAL_RCC_OscConfig+0x50c>
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	4a07      	ldr	r2, [pc, #28]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 80035ec:	f043 0304 	orr.w	r3, r3, #4
 80035f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	4a03      	ldr	r2, [pc, #12]	; (8003608 <HAL_RCC_OscConfig+0x504>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003604:	e014      	b.n	8003630 <HAL_RCC_OscConfig+0x52c>
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	40007000 	.word	0x40007000
 8003610:	4b9c      	ldr	r3, [pc, #624]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003616:	4a9b      	ldr	r2, [pc, #620]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003620:	4b98      	ldr	r3, [pc, #608]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	4a97      	ldr	r2, [pc, #604]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003628:	f023 0304 	bic.w	r3, r3, #4
 800362c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d016      	beq.n	8003666 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fe fbfa 	bl	8001e30 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363e:	e00a      	b.n	8003656 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003640:	f7fe fbf6 	bl	8001e30 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e12a      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003656:	4b8b      	ldr	r3, [pc, #556]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ed      	beq.n	8003640 <HAL_RCC_OscConfig+0x53c>
 8003664:	e015      	b.n	8003692 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7fe fbe3 	bl	8001e30 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fe fbdf 	bl	8001e30 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e113      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003684:	4b7f      	ldr	r3, [pc, #508]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ed      	bne.n	800366e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003692:	7ffb      	ldrb	r3, [r7, #31]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d105      	bne.n	80036a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003698:	4b7a      	ldr	r3, [pc, #488]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	4a79      	ldr	r2, [pc, #484]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 800369e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80fe 	beq.w	80038aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	f040 80d0 	bne.w	8003858 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036b8:	4b72      	ldr	r3, [pc, #456]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 0203 	and.w	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d130      	bne.n	800372e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	3b01      	subs	r3, #1
 80036d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d127      	bne.n	800372e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d11f      	bne.n	800372e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036f8:	2a07      	cmp	r2, #7
 80036fa:	bf14      	ite	ne
 80036fc:	2201      	movne	r2, #1
 80036fe:	2200      	moveq	r2, #0
 8003700:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003702:	4293      	cmp	r3, r2
 8003704:	d113      	bne.n	800372e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	3b01      	subs	r3, #1
 8003714:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d109      	bne.n	800372e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	3b01      	subs	r3, #1
 8003728:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d06e      	beq.n	800380c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b0c      	cmp	r3, #12
 8003732:	d069      	beq.n	8003808 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003734:	4b53      	ldr	r3, [pc, #332]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d105      	bne.n	800374c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003740:	4b50      	ldr	r3, [pc, #320]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0ad      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003750:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a4b      	ldr	r2, [pc, #300]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800375a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800375c:	f7fe fb68 	bl	8001e30 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003764:	f7fe fb64 	bl	8001e30 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e09a      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003776:	4b43      	ldr	r3, [pc, #268]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003782:	4b40      	ldr	r3, [pc, #256]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	4b40      	ldr	r3, [pc, #256]	; (8003888 <HAL_RCC_OscConfig+0x784>)
 8003788:	4013      	ands	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003792:	3a01      	subs	r2, #1
 8003794:	0112      	lsls	r2, r2, #4
 8003796:	4311      	orrs	r1, r2
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800379c:	0212      	lsls	r2, r2, #8
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037a4:	0852      	lsrs	r2, r2, #1
 80037a6:	3a01      	subs	r2, #1
 80037a8:	0552      	lsls	r2, r2, #21
 80037aa:	4311      	orrs	r1, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037b0:	0852      	lsrs	r2, r2, #1
 80037b2:	3a01      	subs	r2, #1
 80037b4:	0652      	lsls	r2, r2, #25
 80037b6:	4311      	orrs	r1, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037bc:	0912      	lsrs	r2, r2, #4
 80037be:	0452      	lsls	r2, r2, #17
 80037c0:	430a      	orrs	r2, r1
 80037c2:	4930      	ldr	r1, [pc, #192]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037c8:	4b2e      	ldr	r3, [pc, #184]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2d      	ldr	r2, [pc, #180]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 80037ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037d4:	4b2b      	ldr	r3, [pc, #172]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4a2a      	ldr	r2, [pc, #168]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 80037da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037e0:	f7fe fb26 	bl	8001e30 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fe fb22 	bl	8001e30 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e058      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fa:	4b22      	ldr	r3, [pc, #136]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003806:	e050      	b.n	80038aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e04f      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380c:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d148      	bne.n	80038aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003818:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a19      	ldr	r2, [pc, #100]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 800381e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003822:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003824:	4b17      	ldr	r3, [pc, #92]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a16      	ldr	r2, [pc, #88]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 800382a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800382e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003830:	f7fe fafe 	bl	8001e30 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe fafa 	bl	8001e30 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e030      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x734>
 8003856:	e028      	b.n	80038aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d023      	beq.n	80038a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a08      	ldr	r2, [pc, #32]	; (8003884 <HAL_RCC_OscConfig+0x780>)
 8003864:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fe fae1 	bl	8001e30 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003870:	e00c      	b.n	800388c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003872:	f7fe fadd 	bl	8001e30 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d905      	bls.n	800388c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e013      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
 8003884:	40021000 	.word	0x40021000
 8003888:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_RCC_OscConfig+0x7b0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1ec      	bne.n	8003872 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <HAL_RCC_OscConfig+0x7b0>)
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	4905      	ldr	r1, [pc, #20]	; (80038b4 <HAL_RCC_OscConfig+0x7b0>)
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_RCC_OscConfig+0x7b4>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	60cb      	str	r3, [r1, #12]
 80038a4:	e001      	b.n	80038aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3720      	adds	r7, #32
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000
 80038b8:	feeefffc 	.word	0xfeeefffc

080038bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0e7      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d0:	4b75      	ldr	r3, [pc, #468]	; (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d910      	bls.n	8003900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b72      	ldr	r3, [pc, #456]	; (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 0207 	bic.w	r2, r3, #7
 80038e6:	4970      	ldr	r1, [pc, #448]	; (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b6e      	ldr	r3, [pc, #440]	; (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0cf      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d010      	beq.n	800392e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	4b66      	ldr	r3, [pc, #408]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003918:	429a      	cmp	r2, r3
 800391a:	d908      	bls.n	800392e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b63      	ldr	r3, [pc, #396]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4960      	ldr	r1, [pc, #384]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d04c      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b03      	cmp	r3, #3
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003942:	4b5a      	ldr	r3, [pc, #360]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d121      	bne.n	8003992 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e0a6      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395a:	4b54      	ldr	r3, [pc, #336]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d115      	bne.n	8003992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e09a      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003972:	4b4e      	ldr	r3, [pc, #312]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e08e      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003982:	4b4a      	ldr	r3, [pc, #296]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e086      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b46      	ldr	r3, [pc, #280]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4943      	ldr	r1, [pc, #268]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a4:	f7fe fa44 	bl	8001e30 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fe fa40 	bl	8001e30 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e06e      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b3a      	ldr	r3, [pc, #232]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d010      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	4b31      	ldr	r3, [pc, #196]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d208      	bcs.n	8003a02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	492b      	ldr	r1, [pc, #172]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a02:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d210      	bcs.n	8003a32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a10:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 0207 	bic.w	r2, r3, #7
 8003a18:	4923      	ldr	r1, [pc, #140]	; (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a20:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e036      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3e:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	4918      	ldr	r1, [pc, #96]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d009      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5c:	4b13      	ldr	r3, [pc, #76]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4910      	ldr	r1, [pc, #64]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a70:	f000 f824 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	490b      	ldr	r1, [pc, #44]	; (8003ab0 <HAL_RCC_ClockConfig+0x1f4>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8c:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8003a8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_RCC_ClockConfig+0x1fc>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe f97b 	bl	8001d90 <HAL_InitTick>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40022000 	.word	0x40022000
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	08008244 	.word	0x08008244
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	20000004 	.word	0x20000004

08003abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	; 0x24
 8003ac0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aca:	4b3e      	ldr	r3, [pc, #248]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ad4:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	d121      	bne.n	8003b2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d11e      	bne.n	8003b2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003af0:	4b34      	ldr	r3, [pc, #208]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003afc:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b02:	0a1b      	lsrs	r3, r3, #8
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e005      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b0c:	4b2d      	ldr	r3, [pc, #180]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b18:	4a2b      	ldr	r2, [pc, #172]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10d      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d102      	bne.n	8003b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b34:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	e004      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b40:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b0c      	cmp	r3, #12
 8003b48:	d134      	bne.n	8003bb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d003      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d003      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0xac>
 8003b60:	e005      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b62:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003b64:	617b      	str	r3, [r7, #20]
      break;
 8003b66:	e005      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b68:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b6a:	617b      	str	r3, [r7, #20]
      break;
 8003b6c:	e002      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	617b      	str	r3, [r7, #20]
      break;
 8003b72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b74:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	3301      	adds	r3, #1
 8003b80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	fb03 f202 	mul.w	r2, r3, r2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	0e5b      	lsrs	r3, r3, #25
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bb4:	69bb      	ldr	r3, [r7, #24]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3724      	adds	r7, #36	; 0x24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	0800825c 	.word	0x0800825c
 8003bcc:	00f42400 	.word	0x00f42400
 8003bd0:	007a1200 	.word	0x007a1200

08003bd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000000 	.word	0x20000000

08003bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bf0:	f7ff fff0 	bl	8003bd4 <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4904      	ldr	r1, [pc, #16]	; (8003c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40021000 	.word	0x40021000
 8003c14:	08008254 	.word	0x08008254

08003c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c1c:	f7ff ffda 	bl	8003bd4 <HAL_RCC_GetHCLKFreq>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	0adb      	lsrs	r3, r3, #11
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	4904      	ldr	r1, [pc, #16]	; (8003c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c2e:	5ccb      	ldrb	r3, [r1, r3]
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	08008254 	.word	0x08008254

08003c44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c50:	4b2a      	ldr	r3, [pc, #168]	; (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c5c:	f7ff f9ee 	bl	800303c <HAL_PWREx_GetVoltageRange>
 8003c60:	6178      	str	r0, [r7, #20]
 8003c62:	e014      	b.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c70:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c7c:	f7ff f9de 	bl	800303c <HAL_PWREx_GetVoltageRange>
 8003c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c82:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c94:	d10b      	bne.n	8003cae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b80      	cmp	r3, #128	; 0x80
 8003c9a:	d919      	bls.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2ba0      	cmp	r3, #160	; 0xa0
 8003ca0:	d902      	bls.n	8003ca8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	e013      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ca8:	2301      	movs	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	e010      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b80      	cmp	r3, #128	; 0x80
 8003cb2:	d902      	bls.n	8003cba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	e00a      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b80      	cmp	r3, #128	; 0x80
 8003cbe:	d102      	bne.n	8003cc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	e004      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b70      	cmp	r3, #112	; 0x70
 8003cca:	d101      	bne.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ccc:	2301      	movs	r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 0207 	bic.w	r2, r3, #7
 8003cd8:	4909      	ldr	r1, [pc, #36]	; (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ce0:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d001      	beq.n	8003cf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40022000 	.word	0x40022000

08003d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d10:	2300      	movs	r3, #0
 8003d12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d041      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d28:	d02a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d2e:	d824      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d34:	d008      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d3a:	d81e      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d44:	d010      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d46:	e018      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d48:	4b86      	ldr	r3, [pc, #536]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a85      	ldr	r2, [pc, #532]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d54:	e015      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fabb 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d66:	e00c      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3320      	adds	r3, #32
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fba6 	bl	80044c0 <RCCEx_PLLSAI2_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d78:	e003      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d7e:	e000      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d82:	7cfb      	ldrb	r3, [r7, #19]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10b      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d88:	4b76      	ldr	r3, [pc, #472]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d96:	4973      	ldr	r1, [pc, #460]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d9e:	e001      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da0:	7cfb      	ldrb	r3, [r7, #19]
 8003da2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d041      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003db8:	d02a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003dba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003dbe:	d824      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dc4:	d008      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dca:	d81e      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dd4:	d010      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dd6:	e018      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dd8:	4b62      	ldr	r3, [pc, #392]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a61      	ldr	r2, [pc, #388]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003de4:	e015      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3304      	adds	r3, #4
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fa73 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003df6:	e00c      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3320      	adds	r3, #32
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fb5e 	bl	80044c0 <RCCEx_PLLSAI2_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e08:	e003      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	74fb      	strb	r3, [r7, #19]
      break;
 8003e0e:	e000      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e18:	4b52      	ldr	r3, [pc, #328]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e26:	494f      	ldr	r1, [pc, #316]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e2e:	e001      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80a0 	beq.w	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e46:	4b47      	ldr	r3, [pc, #284]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00d      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5c:	4b41      	ldr	r3, [pc, #260]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e60:	4a40      	ldr	r2, [pc, #256]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e66:	6593      	str	r3, [r2, #88]	; 0x58
 8003e68:	4b3e      	ldr	r3, [pc, #248]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e74:	2301      	movs	r3, #1
 8003e76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e78:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a3a      	ldr	r2, [pc, #232]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e84:	f7fd ffd4 	bl	8001e30 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e8a:	e009      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8c:	f7fd ffd0 	bl	8001e30 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d902      	bls.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	74fb      	strb	r3, [r7, #19]
        break;
 8003e9e:	e005      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ea0:	4b31      	ldr	r3, [pc, #196]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0ef      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d15c      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003eb2:	4b2c      	ldr	r3, [pc, #176]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ebc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01f      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d019      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ed0:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003edc:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eec:	4b1d      	ldr	r3, [pc, #116]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	4a1c      	ldr	r2, [pc, #112]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003efc:	4a19      	ldr	r2, [pc, #100]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d016      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0e:	f7fd ff8f 	bl	8001e30 <HAL_GetTick>
 8003f12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f14:	e00b      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fd ff8b 	bl	8001e30 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d902      	bls.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	74fb      	strb	r3, [r7, #19]
            break;
 8003f2c:	e006      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ec      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f52:	4904      	ldr	r1, [pc, #16]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f5a:	e009      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f5c:	7cfb      	ldrb	r3, [r7, #19]
 8003f5e:	74bb      	strb	r3, [r7, #18]
 8003f60:	e006      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f62:	bf00      	nop
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	7cfb      	ldrb	r3, [r7, #19]
 8003f6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f70:	7c7b      	ldrb	r3, [r7, #17]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d105      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f76:	4b9e      	ldr	r3, [pc, #632]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	4a9d      	ldr	r2, [pc, #628]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f8e:	4b98      	ldr	r3, [pc, #608]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f023 0203 	bic.w	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	4994      	ldr	r1, [pc, #592]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fb0:	4b8f      	ldr	r3, [pc, #572]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f023 020c 	bic.w	r2, r3, #12
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	498c      	ldr	r1, [pc, #560]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fd2:	4b87      	ldr	r3, [pc, #540]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	4983      	ldr	r1, [pc, #524]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ff4:	4b7e      	ldr	r3, [pc, #504]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	497b      	ldr	r1, [pc, #492]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004016:	4b76      	ldr	r3, [pc, #472]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004024:	4972      	ldr	r1, [pc, #456]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004038:	4b6d      	ldr	r3, [pc, #436]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004046:	496a      	ldr	r1, [pc, #424]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800405a:	4b65      	ldr	r3, [pc, #404]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	4961      	ldr	r1, [pc, #388]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800407c:	4b5c      	ldr	r3, [pc, #368]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408a:	4959      	ldr	r1, [pc, #356]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800409e:	4b54      	ldr	r3, [pc, #336]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ac:	4950      	ldr	r1, [pc, #320]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040c0:	4b4b      	ldr	r3, [pc, #300]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	4948      	ldr	r1, [pc, #288]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040e2:	4b43      	ldr	r3, [pc, #268]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	493f      	ldr	r1, [pc, #252]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d028      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004104:	4b3a      	ldr	r3, [pc, #232]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004112:	4937      	ldr	r1, [pc, #220]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800411e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004122:	d106      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004124:	4b32      	ldr	r3, [pc, #200]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a31      	ldr	r2, [pc, #196]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800412e:	60d3      	str	r3, [r2, #12]
 8004130:	e011      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004136:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800413a:	d10c      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	2101      	movs	r1, #1
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f8c8 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d028      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004162:	4b23      	ldr	r3, [pc, #140]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	491f      	ldr	r1, [pc, #124]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004180:	d106      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004182:	4b1b      	ldr	r3, [pc, #108]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4a1a      	ldr	r2, [pc, #104]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800418c:	60d3      	str	r3, [r2, #12]
 800418e:	e011      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004198:	d10c      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3304      	adds	r3, #4
 800419e:	2101      	movs	r1, #1
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f899 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041aa:	7cfb      	ldrb	r3, [r7, #19]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80041b0:	7cfb      	ldrb	r3, [r7, #19]
 80041b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d02b      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ce:	4908      	ldr	r1, [pc, #32]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041de:	d109      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e0:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4a02      	ldr	r2, [pc, #8]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ea:	60d3      	str	r3, [r2, #12]
 80041ec:	e014      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041fc:	d10c      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3304      	adds	r3, #4
 8004202:	2101      	movs	r1, #1
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f867 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800420e:	7cfb      	ldrb	r3, [r7, #19]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d02f      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004224:	4b2b      	ldr	r3, [pc, #172]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004232:	4928      	ldr	r1, [pc, #160]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800423e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004242:	d10d      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	2102      	movs	r1, #2
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f844 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d014      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800425a:	7cfb      	ldrb	r3, [r7, #19]
 800425c:	74bb      	strb	r3, [r7, #18]
 800425e:	e011      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004268:	d10c      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3320      	adds	r3, #32
 800426e:	2102      	movs	r1, #2
 8004270:	4618      	mov	r0, r3
 8004272:	f000 f925 	bl	80044c0 <RCCEx_PLLSAI2_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800427a:	7cfb      	ldrb	r3, [r7, #19]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004290:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800429e:	490d      	ldr	r1, [pc, #52]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c2:	4904      	ldr	r1, [pc, #16]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000

080042d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042e6:	4b75      	ldr	r3, [pc, #468]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d018      	beq.n	8004324 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042f2:	4b72      	ldr	r3, [pc, #456]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0203 	and.w	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d10d      	bne.n	800431e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
       ||
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800430a:	4b6c      	ldr	r3, [pc, #432]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	091b      	lsrs	r3, r3, #4
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
       ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d047      	beq.n	80043ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
 8004322:	e044      	b.n	80043ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d018      	beq.n	800435e <RCCEx_PLLSAI1_Config+0x86>
 800432c:	2b03      	cmp	r3, #3
 800432e:	d825      	bhi.n	800437c <RCCEx_PLLSAI1_Config+0xa4>
 8004330:	2b01      	cmp	r3, #1
 8004332:	d002      	beq.n	800433a <RCCEx_PLLSAI1_Config+0x62>
 8004334:	2b02      	cmp	r3, #2
 8004336:	d009      	beq.n	800434c <RCCEx_PLLSAI1_Config+0x74>
 8004338:	e020      	b.n	800437c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800433a:	4b60      	ldr	r3, [pc, #384]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11d      	bne.n	8004382 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800434a:	e01a      	b.n	8004382 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800434c:	4b5b      	ldr	r3, [pc, #364]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d116      	bne.n	8004386 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435c:	e013      	b.n	8004386 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800435e:	4b57      	ldr	r3, [pc, #348]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10f      	bne.n	800438a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800436a:	4b54      	ldr	r3, [pc, #336]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800437a:	e006      	b.n	800438a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
      break;
 8004380:	e004      	b.n	800438c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004382:	bf00      	nop
 8004384:	e002      	b.n	800438c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800438a:	bf00      	nop
    }

    if(status == HAL_OK)
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10d      	bne.n	80043ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004392:	4b4a      	ldr	r3, [pc, #296]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6819      	ldr	r1, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	430b      	orrs	r3, r1
 80043a8:	4944      	ldr	r1, [pc, #272]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d17d      	bne.n	80044b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043b4:	4b41      	ldr	r3, [pc, #260]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a40      	ldr	r2, [pc, #256]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c0:	f7fd fd36 	bl	8001e30 <HAL_GetTick>
 80043c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043c6:	e009      	b.n	80043dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043c8:	f7fd fd32 	bl	8001e30 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d902      	bls.n	80043dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	73fb      	strb	r3, [r7, #15]
        break;
 80043da:	e005      	b.n	80043e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043dc:	4b37      	ldr	r3, [pc, #220]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ef      	bne.n	80043c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d160      	bne.n	80044b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d111      	bne.n	8004418 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043f4:	4b31      	ldr	r3, [pc, #196]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80043fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6892      	ldr	r2, [r2, #8]
 8004404:	0211      	lsls	r1, r2, #8
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68d2      	ldr	r2, [r2, #12]
 800440a:	0912      	lsrs	r2, r2, #4
 800440c:	0452      	lsls	r2, r2, #17
 800440e:	430a      	orrs	r2, r1
 8004410:	492a      	ldr	r1, [pc, #168]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	610b      	str	r3, [r1, #16]
 8004416:	e027      	b.n	8004468 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d112      	bne.n	8004444 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800441e:	4b27      	ldr	r3, [pc, #156]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004426:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6892      	ldr	r2, [r2, #8]
 800442e:	0211      	lsls	r1, r2, #8
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6912      	ldr	r2, [r2, #16]
 8004434:	0852      	lsrs	r2, r2, #1
 8004436:	3a01      	subs	r2, #1
 8004438:	0552      	lsls	r2, r2, #21
 800443a:	430a      	orrs	r2, r1
 800443c:	491f      	ldr	r1, [pc, #124]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800443e:	4313      	orrs	r3, r2
 8004440:	610b      	str	r3, [r1, #16]
 8004442:	e011      	b.n	8004468 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004444:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800444c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6892      	ldr	r2, [r2, #8]
 8004454:	0211      	lsls	r1, r2, #8
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6952      	ldr	r2, [r2, #20]
 800445a:	0852      	lsrs	r2, r2, #1
 800445c:	3a01      	subs	r2, #1
 800445e:	0652      	lsls	r2, r2, #25
 8004460:	430a      	orrs	r2, r1
 8004462:	4916      	ldr	r1, [pc, #88]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004464:	4313      	orrs	r3, r2
 8004466:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004468:	4b14      	ldr	r3, [pc, #80]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a13      	ldr	r2, [pc, #76]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800446e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004472:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fd fcdc 	bl	8001e30 <HAL_GetTick>
 8004478:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800447a:	e009      	b.n	8004490 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800447c:	f7fd fcd8 	bl	8001e30 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d902      	bls.n	8004490 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	73fb      	strb	r3, [r7, #15]
          break;
 800448e:	e005      	b.n	800449c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004490:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0ef      	beq.n	800447c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	4904      	ldr	r1, [pc, #16]	; (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000

080044c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ce:	4b6a      	ldr	r3, [pc, #424]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d018      	beq.n	800450c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044da:	4b67      	ldr	r3, [pc, #412]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0203 	and.w	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d10d      	bne.n	8004506 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
       ||
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044f2:	4b61      	ldr	r3, [pc, #388]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
       ||
 8004502:	429a      	cmp	r2, r3
 8004504:	d047      	beq.n	8004596 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
 800450a:	e044      	b.n	8004596 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b03      	cmp	r3, #3
 8004512:	d018      	beq.n	8004546 <RCCEx_PLLSAI2_Config+0x86>
 8004514:	2b03      	cmp	r3, #3
 8004516:	d825      	bhi.n	8004564 <RCCEx_PLLSAI2_Config+0xa4>
 8004518:	2b01      	cmp	r3, #1
 800451a:	d002      	beq.n	8004522 <RCCEx_PLLSAI2_Config+0x62>
 800451c:	2b02      	cmp	r3, #2
 800451e:	d009      	beq.n	8004534 <RCCEx_PLLSAI2_Config+0x74>
 8004520:	e020      	b.n	8004564 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004522:	4b55      	ldr	r3, [pc, #340]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d11d      	bne.n	800456a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004532:	e01a      	b.n	800456a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004534:	4b50      	ldr	r3, [pc, #320]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453c:	2b00      	cmp	r3, #0
 800453e:	d116      	bne.n	800456e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004544:	e013      	b.n	800456e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004546:	4b4c      	ldr	r3, [pc, #304]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10f      	bne.n	8004572 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004552:	4b49      	ldr	r3, [pc, #292]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004562:	e006      	b.n	8004572 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
      break;
 8004568:	e004      	b.n	8004574 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800456a:	bf00      	nop
 800456c:	e002      	b.n	8004574 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800456e:	bf00      	nop
 8004570:	e000      	b.n	8004574 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004572:	bf00      	nop
    }

    if(status == HAL_OK)
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10d      	bne.n	8004596 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800457a:	4b3f      	ldr	r3, [pc, #252]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6819      	ldr	r1, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	3b01      	subs	r3, #1
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	430b      	orrs	r3, r1
 8004590:	4939      	ldr	r1, [pc, #228]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004592:	4313      	orrs	r3, r2
 8004594:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d167      	bne.n	800466c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800459c:	4b36      	ldr	r3, [pc, #216]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a35      	ldr	r2, [pc, #212]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a8:	f7fd fc42 	bl	8001e30 <HAL_GetTick>
 80045ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045ae:	e009      	b.n	80045c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045b0:	f7fd fc3e 	bl	8001e30 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d902      	bls.n	80045c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	73fb      	strb	r3, [r7, #15]
        break;
 80045c2:	e005      	b.n	80045d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045c4:	4b2c      	ldr	r3, [pc, #176]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1ef      	bne.n	80045b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d14a      	bne.n	800466c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d111      	bne.n	8004600 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045dc:	4b26      	ldr	r3, [pc, #152]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6892      	ldr	r2, [r2, #8]
 80045ec:	0211      	lsls	r1, r2, #8
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68d2      	ldr	r2, [r2, #12]
 80045f2:	0912      	lsrs	r2, r2, #4
 80045f4:	0452      	lsls	r2, r2, #17
 80045f6:	430a      	orrs	r2, r1
 80045f8:	491f      	ldr	r1, [pc, #124]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	614b      	str	r3, [r1, #20]
 80045fe:	e011      	b.n	8004624 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004600:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004608:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6892      	ldr	r2, [r2, #8]
 8004610:	0211      	lsls	r1, r2, #8
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6912      	ldr	r2, [r2, #16]
 8004616:	0852      	lsrs	r2, r2, #1
 8004618:	3a01      	subs	r2, #1
 800461a:	0652      	lsls	r2, r2, #25
 800461c:	430a      	orrs	r2, r1
 800461e:	4916      	ldr	r1, [pc, #88]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004620:	4313      	orrs	r3, r2
 8004622:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004624:	4b14      	ldr	r3, [pc, #80]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a13      	ldr	r2, [pc, #76]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004630:	f7fd fbfe 	bl	8001e30 <HAL_GetTick>
 8004634:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004636:	e009      	b.n	800464c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004638:	f7fd fbfa 	bl	8001e30 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d902      	bls.n	800464c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	73fb      	strb	r3, [r7, #15]
          break;
 800464a:	e005      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ef      	beq.n	8004638 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800465e:	4b06      	ldr	r3, [pc, #24]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	4904      	ldr	r1, [pc, #16]	; (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004668:	4313      	orrs	r3, r2
 800466a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000

0800467c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e049      	b.n	8004722 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fd f9ac 	bl	8001a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f000 f89e 	bl	80047fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	d001      	beq.n	8004744 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e047      	b.n	80047d4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a23      	ldr	r2, [pc, #140]	; (80047e0 <HAL_TIM_Base_Start+0xb4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01d      	beq.n	8004792 <HAL_TIM_Base_Start+0x66>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475e:	d018      	beq.n	8004792 <HAL_TIM_Base_Start+0x66>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1f      	ldr	r2, [pc, #124]	; (80047e4 <HAL_TIM_Base_Start+0xb8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <HAL_TIM_Base_Start+0x66>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1e      	ldr	r2, [pc, #120]	; (80047e8 <HAL_TIM_Base_Start+0xbc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00e      	beq.n	8004792 <HAL_TIM_Base_Start+0x66>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <HAL_TIM_Base_Start+0xc0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d009      	beq.n	8004792 <HAL_TIM_Base_Start+0x66>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1b      	ldr	r2, [pc, #108]	; (80047f0 <HAL_TIM_Base_Start+0xc4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_TIM_Base_Start+0x66>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a19      	ldr	r2, [pc, #100]	; (80047f4 <HAL_TIM_Base_Start+0xc8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d115      	bne.n	80047be <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <HAL_TIM_Base_Start+0xcc>)
 800479a:	4013      	ands	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b06      	cmp	r3, #6
 80047a2:	d015      	beq.n	80047d0 <HAL_TIM_Base_Start+0xa4>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047aa:	d011      	beq.n	80047d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047bc:	e008      	b.n	80047d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e000      	b.n	80047d2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	40012c00 	.word	0x40012c00
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40013400 	.word	0x40013400
 80047f4:	40014000 	.word	0x40014000
 80047f8:	00010007 	.word	0x00010007

080047fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a40      	ldr	r2, [pc, #256]	; (8004910 <TIM_Base_SetConfig+0x114>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d013      	beq.n	800483c <TIM_Base_SetConfig+0x40>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481a:	d00f      	beq.n	800483c <TIM_Base_SetConfig+0x40>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a3d      	ldr	r2, [pc, #244]	; (8004914 <TIM_Base_SetConfig+0x118>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00b      	beq.n	800483c <TIM_Base_SetConfig+0x40>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a3c      	ldr	r2, [pc, #240]	; (8004918 <TIM_Base_SetConfig+0x11c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d007      	beq.n	800483c <TIM_Base_SetConfig+0x40>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a3b      	ldr	r2, [pc, #236]	; (800491c <TIM_Base_SetConfig+0x120>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_Base_SetConfig+0x40>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a3a      	ldr	r2, [pc, #232]	; (8004920 <TIM_Base_SetConfig+0x124>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d108      	bne.n	800484e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a2f      	ldr	r2, [pc, #188]	; (8004910 <TIM_Base_SetConfig+0x114>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d01f      	beq.n	8004896 <TIM_Base_SetConfig+0x9a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485c:	d01b      	beq.n	8004896 <TIM_Base_SetConfig+0x9a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a2c      	ldr	r2, [pc, #176]	; (8004914 <TIM_Base_SetConfig+0x118>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d017      	beq.n	8004896 <TIM_Base_SetConfig+0x9a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a2b      	ldr	r2, [pc, #172]	; (8004918 <TIM_Base_SetConfig+0x11c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <TIM_Base_SetConfig+0x9a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a2a      	ldr	r2, [pc, #168]	; (800491c <TIM_Base_SetConfig+0x120>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00f      	beq.n	8004896 <TIM_Base_SetConfig+0x9a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a29      	ldr	r2, [pc, #164]	; (8004920 <TIM_Base_SetConfig+0x124>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00b      	beq.n	8004896 <TIM_Base_SetConfig+0x9a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a28      	ldr	r2, [pc, #160]	; (8004924 <TIM_Base_SetConfig+0x128>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d007      	beq.n	8004896 <TIM_Base_SetConfig+0x9a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a27      	ldr	r2, [pc, #156]	; (8004928 <TIM_Base_SetConfig+0x12c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d003      	beq.n	8004896 <TIM_Base_SetConfig+0x9a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a26      	ldr	r2, [pc, #152]	; (800492c <TIM_Base_SetConfig+0x130>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d108      	bne.n	80048a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800489c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a10      	ldr	r2, [pc, #64]	; (8004910 <TIM_Base_SetConfig+0x114>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00f      	beq.n	80048f4 <TIM_Base_SetConfig+0xf8>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a12      	ldr	r2, [pc, #72]	; (8004920 <TIM_Base_SetConfig+0x124>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00b      	beq.n	80048f4 <TIM_Base_SetConfig+0xf8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a11      	ldr	r2, [pc, #68]	; (8004924 <TIM_Base_SetConfig+0x128>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d007      	beq.n	80048f4 <TIM_Base_SetConfig+0xf8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a10      	ldr	r2, [pc, #64]	; (8004928 <TIM_Base_SetConfig+0x12c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d003      	beq.n	80048f4 <TIM_Base_SetConfig+0xf8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a0f      	ldr	r2, [pc, #60]	; (800492c <TIM_Base_SetConfig+0x130>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d103      	bne.n	80048fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	615a      	str	r2, [r3, #20]
}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40012c00 	.word	0x40012c00
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800
 800491c:	40000c00 	.word	0x40000c00
 8004920:	40013400 	.word	0x40013400
 8004924:	40014000 	.word	0x40014000
 8004928:	40014400 	.word	0x40014400
 800492c:	40014800 	.word	0x40014800

08004930 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e040      	b.n	80049c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fd f874 	bl	8001a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2224      	movs	r2, #36	; 0x24
 800495c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0201 	bic.w	r2, r2, #1
 800496c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f8c0 	bl	8004af4 <UART_SetConfig>
 8004974:	4603      	mov	r3, r0
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e022      	b.n	80049c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fb6c 	bl	8005064 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800499a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 fbf3 	bl	80051a8 <UART_CheckIdleState>
 80049c2:	4603      	mov	r3, r0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	f040 8082 	bne.w	8004aea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_UART_Transmit+0x26>
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e07a      	b.n	8004aec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_UART_Transmit+0x38>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e073      	b.n	8004aec <HAL_UART_Transmit+0x120>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2221      	movs	r2, #33	; 0x21
 8004a18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a1a:	f7fd fa09 	bl	8001e30 <HAL_GetTick>
 8004a1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	88fa      	ldrh	r2, [r7, #6]
 8004a24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a38:	d108      	bne.n	8004a4c <HAL_UART_Transmit+0x80>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	e003      	b.n	8004a54 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a5c:	e02d      	b.n	8004aba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2200      	movs	r2, #0
 8004a66:	2180      	movs	r1, #128	; 0x80
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fbe6 	bl	800523a <UART_WaitOnFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e039      	b.n	8004aec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10b      	bne.n	8004a96 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	881a      	ldrh	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a8a:	b292      	uxth	r2, r2
 8004a8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	3302      	adds	r3, #2
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	e008      	b.n	8004aa8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	781a      	ldrb	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	b292      	uxth	r2, r2
 8004aa0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1cb      	bne.n	8004a5e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2200      	movs	r2, #0
 8004ace:	2140      	movs	r1, #64	; 0x40
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fbb2 	bl	800523a <UART_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e005      	b.n	8004aec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e000      	b.n	8004aec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004aea:	2302      	movs	r3, #2
  }
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3720      	adds	r7, #32
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004af8:	b08a      	sub	sp, #40	; 0x28
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4ba4      	ldr	r3, [pc, #656]	; (8004db4 <UART_SetConfig+0x2c0>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a99      	ldr	r2, [pc, #612]	; (8004db8 <UART_SetConfig+0x2c4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b70:	430a      	orrs	r2, r1
 8004b72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a90      	ldr	r2, [pc, #576]	; (8004dbc <UART_SetConfig+0x2c8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d126      	bne.n	8004bcc <UART_SetConfig+0xd8>
 8004b7e:	4b90      	ldr	r3, [pc, #576]	; (8004dc0 <UART_SetConfig+0x2cc>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d81b      	bhi.n	8004bc4 <UART_SetConfig+0xd0>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <UART_SetConfig+0xa0>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004ba5 	.word	0x08004ba5
 8004b98:	08004bb5 	.word	0x08004bb5
 8004b9c:	08004bad 	.word	0x08004bad
 8004ba0:	08004bbd 	.word	0x08004bbd
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e116      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004bac:	2302      	movs	r3, #2
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb2:	e112      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bba:	e10e      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004bbc:	2308      	movs	r3, #8
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc2:	e10a      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bca:	e106      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a7c      	ldr	r2, [pc, #496]	; (8004dc4 <UART_SetConfig+0x2d0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d138      	bne.n	8004c48 <UART_SetConfig+0x154>
 8004bd6:	4b7a      	ldr	r3, [pc, #488]	; (8004dc0 <UART_SetConfig+0x2cc>)
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bdc:	f003 030c 	and.w	r3, r3, #12
 8004be0:	2b0c      	cmp	r3, #12
 8004be2:	d82d      	bhi.n	8004c40 <UART_SetConfig+0x14c>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <UART_SetConfig+0xf8>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004c21 	.word	0x08004c21
 8004bf0:	08004c41 	.word	0x08004c41
 8004bf4:	08004c41 	.word	0x08004c41
 8004bf8:	08004c41 	.word	0x08004c41
 8004bfc:	08004c31 	.word	0x08004c31
 8004c00:	08004c41 	.word	0x08004c41
 8004c04:	08004c41 	.word	0x08004c41
 8004c08:	08004c41 	.word	0x08004c41
 8004c0c:	08004c29 	.word	0x08004c29
 8004c10:	08004c41 	.word	0x08004c41
 8004c14:	08004c41 	.word	0x08004c41
 8004c18:	08004c41 	.word	0x08004c41
 8004c1c:	08004c39 	.word	0x08004c39
 8004c20:	2300      	movs	r3, #0
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c26:	e0d8      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2e:	e0d4      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c30:	2304      	movs	r3, #4
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c36:	e0d0      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c38:	2308      	movs	r3, #8
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3e:	e0cc      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c40:	2310      	movs	r3, #16
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c46:	e0c8      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a5e      	ldr	r2, [pc, #376]	; (8004dc8 <UART_SetConfig+0x2d4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d125      	bne.n	8004c9e <UART_SetConfig+0x1aa>
 8004c52:	4b5b      	ldr	r3, [pc, #364]	; (8004dc0 <UART_SetConfig+0x2cc>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c5c:	2b30      	cmp	r3, #48	; 0x30
 8004c5e:	d016      	beq.n	8004c8e <UART_SetConfig+0x19a>
 8004c60:	2b30      	cmp	r3, #48	; 0x30
 8004c62:	d818      	bhi.n	8004c96 <UART_SetConfig+0x1a2>
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d00a      	beq.n	8004c7e <UART_SetConfig+0x18a>
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d814      	bhi.n	8004c96 <UART_SetConfig+0x1a2>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <UART_SetConfig+0x182>
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d008      	beq.n	8004c86 <UART_SetConfig+0x192>
 8004c74:	e00f      	b.n	8004c96 <UART_SetConfig+0x1a2>
 8004c76:	2300      	movs	r3, #0
 8004c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7c:	e0ad      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c84:	e0a9      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c86:	2304      	movs	r3, #4
 8004c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8c:	e0a5      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c8e:	2308      	movs	r3, #8
 8004c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c94:	e0a1      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c96:	2310      	movs	r3, #16
 8004c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9c:	e09d      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a4a      	ldr	r2, [pc, #296]	; (8004dcc <UART_SetConfig+0x2d8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d125      	bne.n	8004cf4 <UART_SetConfig+0x200>
 8004ca8:	4b45      	ldr	r3, [pc, #276]	; (8004dc0 <UART_SetConfig+0x2cc>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cb4:	d016      	beq.n	8004ce4 <UART_SetConfig+0x1f0>
 8004cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8004cb8:	d818      	bhi.n	8004cec <UART_SetConfig+0x1f8>
 8004cba:	2b80      	cmp	r3, #128	; 0x80
 8004cbc:	d00a      	beq.n	8004cd4 <UART_SetConfig+0x1e0>
 8004cbe:	2b80      	cmp	r3, #128	; 0x80
 8004cc0:	d814      	bhi.n	8004cec <UART_SetConfig+0x1f8>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <UART_SetConfig+0x1d8>
 8004cc6:	2b40      	cmp	r3, #64	; 0x40
 8004cc8:	d008      	beq.n	8004cdc <UART_SetConfig+0x1e8>
 8004cca:	e00f      	b.n	8004cec <UART_SetConfig+0x1f8>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e082      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e07e      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e07a      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cea:	e076      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004cec:	2310      	movs	r3, #16
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf2:	e072      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a35      	ldr	r2, [pc, #212]	; (8004dd0 <UART_SetConfig+0x2dc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d12a      	bne.n	8004d54 <UART_SetConfig+0x260>
 8004cfe:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <UART_SetConfig+0x2cc>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0c:	d01a      	beq.n	8004d44 <UART_SetConfig+0x250>
 8004d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d12:	d81b      	bhi.n	8004d4c <UART_SetConfig+0x258>
 8004d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d18:	d00c      	beq.n	8004d34 <UART_SetConfig+0x240>
 8004d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d1e:	d815      	bhi.n	8004d4c <UART_SetConfig+0x258>
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <UART_SetConfig+0x238>
 8004d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d28:	d008      	beq.n	8004d3c <UART_SetConfig+0x248>
 8004d2a:	e00f      	b.n	8004d4c <UART_SetConfig+0x258>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d32:	e052      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d34:	2302      	movs	r3, #2
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3a:	e04e      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d42:	e04a      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d44:	2308      	movs	r3, #8
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4a:	e046      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d52:	e042      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <UART_SetConfig+0x2c4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d13a      	bne.n	8004dd4 <UART_SetConfig+0x2e0>
 8004d5e:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <UART_SetConfig+0x2cc>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d6c:	d01a      	beq.n	8004da4 <UART_SetConfig+0x2b0>
 8004d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d72:	d81b      	bhi.n	8004dac <UART_SetConfig+0x2b8>
 8004d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d78:	d00c      	beq.n	8004d94 <UART_SetConfig+0x2a0>
 8004d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7e:	d815      	bhi.n	8004dac <UART_SetConfig+0x2b8>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <UART_SetConfig+0x298>
 8004d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d88:	d008      	beq.n	8004d9c <UART_SetConfig+0x2a8>
 8004d8a:	e00f      	b.n	8004dac <UART_SetConfig+0x2b8>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e022      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d94:	2302      	movs	r3, #2
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e01e      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	e01a      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004da4:	2308      	movs	r3, #8
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	e016      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db2:	e012      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004db4:	efff69f3 	.word	0xefff69f3
 8004db8:	40008000 	.word	0x40008000
 8004dbc:	40013800 	.word	0x40013800
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40004400 	.word	0x40004400
 8004dc8:	40004800 	.word	0x40004800
 8004dcc:	40004c00 	.word	0x40004c00
 8004dd0:	40005000 	.word	0x40005000
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a9f      	ldr	r2, [pc, #636]	; (800505c <UART_SetConfig+0x568>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d17a      	bne.n	8004eda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d824      	bhi.n	8004e36 <UART_SetConfig+0x342>
 8004dec:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <UART_SetConfig+0x300>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e19 	.word	0x08004e19
 8004df8:	08004e37 	.word	0x08004e37
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e37 	.word	0x08004e37
 8004e04:	08004e27 	.word	0x08004e27
 8004e08:	08004e37 	.word	0x08004e37
 8004e0c:	08004e37 	.word	0x08004e37
 8004e10:	08004e37 	.word	0x08004e37
 8004e14:	08004e2f 	.word	0x08004e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e18:	f7fe fee8 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004e1c:	61f8      	str	r0, [r7, #28]
        break;
 8004e1e:	e010      	b.n	8004e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e20:	4b8f      	ldr	r3, [pc, #572]	; (8005060 <UART_SetConfig+0x56c>)
 8004e22:	61fb      	str	r3, [r7, #28]
        break;
 8004e24:	e00d      	b.n	8004e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e26:	f7fe fe49 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004e2a:	61f8      	str	r0, [r7, #28]
        break;
 8004e2c:	e009      	b.n	8004e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e32:	61fb      	str	r3, [r7, #28]
        break;
 8004e34:	e005      	b.n	8004e42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80fb 	beq.w	8005040 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	4413      	add	r3, r2
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d305      	bcc.n	8004e66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d903      	bls.n	8004e6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e6c:	e0e8      	b.n	8005040 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2200      	movs	r2, #0
 8004e72:	461c      	mov	r4, r3
 8004e74:	4615      	mov	r5, r2
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	022b      	lsls	r3, r5, #8
 8004e80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e84:	0222      	lsls	r2, r4, #8
 8004e86:	68f9      	ldr	r1, [r7, #12]
 8004e88:	6849      	ldr	r1, [r1, #4]
 8004e8a:	0849      	lsrs	r1, r1, #1
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	4688      	mov	r8, r1
 8004e90:	4681      	mov	r9, r0
 8004e92:	eb12 0a08 	adds.w	sl, r2, r8
 8004e96:	eb43 0b09 	adc.w	fp, r3, r9
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ea8:	4650      	mov	r0, sl
 8004eaa:	4659      	mov	r1, fp
 8004eac:	f7fb fecc 	bl	8000c48 <__aeabi_uldivmod>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ebe:	d308      	bcc.n	8004ed2 <UART_SetConfig+0x3de>
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec6:	d204      	bcs.n	8004ed2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	60da      	str	r2, [r3, #12]
 8004ed0:	e0b6      	b.n	8005040 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ed8:	e0b2      	b.n	8005040 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee2:	d15e      	bne.n	8004fa2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d828      	bhi.n	8004f3e <UART_SetConfig+0x44a>
 8004eec:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <UART_SetConfig+0x400>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	08004f21 	.word	0x08004f21
 8004efc:	08004f29 	.word	0x08004f29
 8004f00:	08004f3f 	.word	0x08004f3f
 8004f04:	08004f2f 	.word	0x08004f2f
 8004f08:	08004f3f 	.word	0x08004f3f
 8004f0c:	08004f3f 	.word	0x08004f3f
 8004f10:	08004f3f 	.word	0x08004f3f
 8004f14:	08004f37 	.word	0x08004f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f18:	f7fe fe68 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004f1c:	61f8      	str	r0, [r7, #28]
        break;
 8004f1e:	e014      	b.n	8004f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f20:	f7fe fe7a 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 8004f24:	61f8      	str	r0, [r7, #28]
        break;
 8004f26:	e010      	b.n	8004f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f28:	4b4d      	ldr	r3, [pc, #308]	; (8005060 <UART_SetConfig+0x56c>)
 8004f2a:	61fb      	str	r3, [r7, #28]
        break;
 8004f2c:	e00d      	b.n	8004f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f2e:	f7fe fdc5 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004f32:	61f8      	str	r0, [r7, #28]
        break;
 8004f34:	e009      	b.n	8004f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f3a:	61fb      	str	r3, [r7, #28]
        break;
 8004f3c:	e005      	b.n	8004f4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d077      	beq.n	8005040 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	005a      	lsls	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	441a      	add	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b0f      	cmp	r3, #15
 8004f6a:	d916      	bls.n	8004f9a <UART_SetConfig+0x4a6>
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f72:	d212      	bcs.n	8004f9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f023 030f 	bic.w	r3, r3, #15
 8004f7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	8afb      	ldrh	r3, [r7, #22]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	8afa      	ldrh	r2, [r7, #22]
 8004f96:	60da      	str	r2, [r3, #12]
 8004f98:	e052      	b.n	8005040 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fa0:	e04e      	b.n	8005040 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d827      	bhi.n	8004ffa <UART_SetConfig+0x506>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <UART_SetConfig+0x4bc>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08004fdd 	.word	0x08004fdd
 8004fb8:	08004fe5 	.word	0x08004fe5
 8004fbc:	08004ffb 	.word	0x08004ffb
 8004fc0:	08004feb 	.word	0x08004feb
 8004fc4:	08004ffb 	.word	0x08004ffb
 8004fc8:	08004ffb 	.word	0x08004ffb
 8004fcc:	08004ffb 	.word	0x08004ffb
 8004fd0:	08004ff3 	.word	0x08004ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7fe fe0a 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004fd8:	61f8      	str	r0, [r7, #28]
        break;
 8004fda:	e014      	b.n	8005006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7fe fe1c 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 8004fe0:	61f8      	str	r0, [r7, #28]
        break;
 8004fe2:	e010      	b.n	8005006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe4:	4b1e      	ldr	r3, [pc, #120]	; (8005060 <UART_SetConfig+0x56c>)
 8004fe6:	61fb      	str	r3, [r7, #28]
        break;
 8004fe8:	e00d      	b.n	8005006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fea:	f7fe fd67 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004fee:	61f8      	str	r0, [r7, #28]
        break;
 8004ff0:	e009      	b.n	8005006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff6:	61fb      	str	r3, [r7, #28]
        break;
 8004ff8:	e005      	b.n	8005006 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005004:	bf00      	nop
    }

    if (pclk != 0U)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d019      	beq.n	8005040 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	085a      	lsrs	r2, r3, #1
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	441a      	add	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	fbb2 f3f3 	udiv	r3, r2, r3
 800501e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b0f      	cmp	r3, #15
 8005024:	d909      	bls.n	800503a <UART_SetConfig+0x546>
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502c:	d205      	bcs.n	800503a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60da      	str	r2, [r3, #12]
 8005038:	e002      	b.n	8005040 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800504c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005050:	4618      	mov	r0, r3
 8005052:	3728      	adds	r7, #40	; 0x28
 8005054:	46bd      	mov	sp, r7
 8005056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800505a:	bf00      	nop
 800505c:	40008000 	.word	0x40008000
 8005060:	00f42400 	.word	0x00f42400

08005064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b00      	cmp	r3, #0
 8005142:	d01a      	beq.n	800517a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005162:	d10a      	bne.n	800517a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	605a      	str	r2, [r3, #4]
  }
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051b8:	f7fc fe3a 	bl	8001e30 <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d10e      	bne.n	80051ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f82d 	bl	800523a <UART_WaitOnFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e023      	b.n	8005232 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d10e      	bne.n	8005216 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f817 	bl	800523a <UART_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e00d      	b.n	8005232 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b09c      	sub	sp, #112	; 0x70
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	603b      	str	r3, [r7, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800524a:	e0a5      	b.n	8005398 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	f000 80a1 	beq.w	8005398 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005256:	f7fc fdeb 	bl	8001e30 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005262:	429a      	cmp	r2, r3
 8005264:	d302      	bcc.n	800526c <UART_WaitOnFlagUntilTimeout+0x32>
 8005266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005268:	2b00      	cmp	r3, #0
 800526a:	d13e      	bne.n	80052ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800527a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005280:	667b      	str	r3, [r7, #100]	; 0x64
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800528a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800528c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005290:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e6      	bne.n	800526c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3308      	adds	r3, #8
 80052a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a8:	e853 3f00 	ldrex	r3, [r3]
 80052ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b0:	f023 0301 	bic.w	r3, r3, #1
 80052b4:	663b      	str	r3, [r7, #96]	; 0x60
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3308      	adds	r3, #8
 80052bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052be:	64ba      	str	r2, [r7, #72]	; 0x48
 80052c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e5      	bne.n	800529e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e067      	b.n	80053ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d04f      	beq.n	8005398 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005306:	d147      	bne.n	8005398 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005310:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005326:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005330:	637b      	str	r3, [r7, #52]	; 0x34
 8005332:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e6      	bne.n	8005312 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3308      	adds	r3, #8
 800534a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	613b      	str	r3, [r7, #16]
   return(result);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f023 0301 	bic.w	r3, r3, #1
 800535a:	66bb      	str	r3, [r7, #104]	; 0x68
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3308      	adds	r3, #8
 8005362:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005364:	623a      	str	r2, [r7, #32]
 8005366:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	69f9      	ldr	r1, [r7, #28]
 800536a:	6a3a      	ldr	r2, [r7, #32]
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	61bb      	str	r3, [r7, #24]
   return(result);
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e5      	bne.n	8005344 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e010      	b.n	80053ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69da      	ldr	r2, [r3, #28]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4013      	ands	r3, r2
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	bf0c      	ite	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2300      	movne	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	461a      	mov	r2, r3
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	f43f af4a 	beq.w	800524c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3770      	adds	r7, #112	; 0x70
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <__errno>:
 80053c4:	4b01      	ldr	r3, [pc, #4]	; (80053cc <__errno+0x8>)
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	2000000c 	.word	0x2000000c

080053d0 <__libc_init_array>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	4d0d      	ldr	r5, [pc, #52]	; (8005408 <__libc_init_array+0x38>)
 80053d4:	4c0d      	ldr	r4, [pc, #52]	; (800540c <__libc_init_array+0x3c>)
 80053d6:	1b64      	subs	r4, r4, r5
 80053d8:	10a4      	asrs	r4, r4, #2
 80053da:	2600      	movs	r6, #0
 80053dc:	42a6      	cmp	r6, r4
 80053de:	d109      	bne.n	80053f4 <__libc_init_array+0x24>
 80053e0:	4d0b      	ldr	r5, [pc, #44]	; (8005410 <__libc_init_array+0x40>)
 80053e2:	4c0c      	ldr	r4, [pc, #48]	; (8005414 <__libc_init_array+0x44>)
 80053e4:	f002 ff04 	bl	80081f0 <_init>
 80053e8:	1b64      	subs	r4, r4, r5
 80053ea:	10a4      	asrs	r4, r4, #2
 80053ec:	2600      	movs	r6, #0
 80053ee:	42a6      	cmp	r6, r4
 80053f0:	d105      	bne.n	80053fe <__libc_init_array+0x2e>
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f8:	4798      	blx	r3
 80053fa:	3601      	adds	r6, #1
 80053fc:	e7ee      	b.n	80053dc <__libc_init_array+0xc>
 80053fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005402:	4798      	blx	r3
 8005404:	3601      	adds	r6, #1
 8005406:	e7f2      	b.n	80053ee <__libc_init_array+0x1e>
 8005408:	0800866c 	.word	0x0800866c
 800540c:	0800866c 	.word	0x0800866c
 8005410:	0800866c 	.word	0x0800866c
 8005414:	08008670 	.word	0x08008670

08005418 <memset>:
 8005418:	4402      	add	r2, r0
 800541a:	4603      	mov	r3, r0
 800541c:	4293      	cmp	r3, r2
 800541e:	d100      	bne.n	8005422 <memset+0xa>
 8005420:	4770      	bx	lr
 8005422:	f803 1b01 	strb.w	r1, [r3], #1
 8005426:	e7f9      	b.n	800541c <memset+0x4>

08005428 <__cvt>:
 8005428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800542c:	ec55 4b10 	vmov	r4, r5, d0
 8005430:	2d00      	cmp	r5, #0
 8005432:	460e      	mov	r6, r1
 8005434:	4619      	mov	r1, r3
 8005436:	462b      	mov	r3, r5
 8005438:	bfbb      	ittet	lt
 800543a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800543e:	461d      	movlt	r5, r3
 8005440:	2300      	movge	r3, #0
 8005442:	232d      	movlt	r3, #45	; 0x2d
 8005444:	700b      	strb	r3, [r1, #0]
 8005446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005448:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800544c:	4691      	mov	r9, r2
 800544e:	f023 0820 	bic.w	r8, r3, #32
 8005452:	bfbc      	itt	lt
 8005454:	4622      	movlt	r2, r4
 8005456:	4614      	movlt	r4, r2
 8005458:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800545c:	d005      	beq.n	800546a <__cvt+0x42>
 800545e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005462:	d100      	bne.n	8005466 <__cvt+0x3e>
 8005464:	3601      	adds	r6, #1
 8005466:	2102      	movs	r1, #2
 8005468:	e000      	b.n	800546c <__cvt+0x44>
 800546a:	2103      	movs	r1, #3
 800546c:	ab03      	add	r3, sp, #12
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	ab02      	add	r3, sp, #8
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	ec45 4b10 	vmov	d0, r4, r5
 8005478:	4653      	mov	r3, sl
 800547a:	4632      	mov	r2, r6
 800547c:	f000 fcec 	bl	8005e58 <_dtoa_r>
 8005480:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005484:	4607      	mov	r7, r0
 8005486:	d102      	bne.n	800548e <__cvt+0x66>
 8005488:	f019 0f01 	tst.w	r9, #1
 800548c:	d022      	beq.n	80054d4 <__cvt+0xac>
 800548e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005492:	eb07 0906 	add.w	r9, r7, r6
 8005496:	d110      	bne.n	80054ba <__cvt+0x92>
 8005498:	783b      	ldrb	r3, [r7, #0]
 800549a:	2b30      	cmp	r3, #48	; 0x30
 800549c:	d10a      	bne.n	80054b4 <__cvt+0x8c>
 800549e:	2200      	movs	r2, #0
 80054a0:	2300      	movs	r3, #0
 80054a2:	4620      	mov	r0, r4
 80054a4:	4629      	mov	r1, r5
 80054a6:	f7fb fb0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80054aa:	b918      	cbnz	r0, 80054b4 <__cvt+0x8c>
 80054ac:	f1c6 0601 	rsb	r6, r6, #1
 80054b0:	f8ca 6000 	str.w	r6, [sl]
 80054b4:	f8da 3000 	ldr.w	r3, [sl]
 80054b8:	4499      	add	r9, r3
 80054ba:	2200      	movs	r2, #0
 80054bc:	2300      	movs	r3, #0
 80054be:	4620      	mov	r0, r4
 80054c0:	4629      	mov	r1, r5
 80054c2:	f7fb fb01 	bl	8000ac8 <__aeabi_dcmpeq>
 80054c6:	b108      	cbz	r0, 80054cc <__cvt+0xa4>
 80054c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80054cc:	2230      	movs	r2, #48	; 0x30
 80054ce:	9b03      	ldr	r3, [sp, #12]
 80054d0:	454b      	cmp	r3, r9
 80054d2:	d307      	bcc.n	80054e4 <__cvt+0xbc>
 80054d4:	9b03      	ldr	r3, [sp, #12]
 80054d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054d8:	1bdb      	subs	r3, r3, r7
 80054da:	4638      	mov	r0, r7
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	b004      	add	sp, #16
 80054e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e4:	1c59      	adds	r1, r3, #1
 80054e6:	9103      	str	r1, [sp, #12]
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	e7f0      	b.n	80054ce <__cvt+0xa6>

080054ec <__exponent>:
 80054ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ee:	4603      	mov	r3, r0
 80054f0:	2900      	cmp	r1, #0
 80054f2:	bfb8      	it	lt
 80054f4:	4249      	neglt	r1, r1
 80054f6:	f803 2b02 	strb.w	r2, [r3], #2
 80054fa:	bfb4      	ite	lt
 80054fc:	222d      	movlt	r2, #45	; 0x2d
 80054fe:	222b      	movge	r2, #43	; 0x2b
 8005500:	2909      	cmp	r1, #9
 8005502:	7042      	strb	r2, [r0, #1]
 8005504:	dd2a      	ble.n	800555c <__exponent+0x70>
 8005506:	f10d 0407 	add.w	r4, sp, #7
 800550a:	46a4      	mov	ip, r4
 800550c:	270a      	movs	r7, #10
 800550e:	46a6      	mov	lr, r4
 8005510:	460a      	mov	r2, r1
 8005512:	fb91 f6f7 	sdiv	r6, r1, r7
 8005516:	fb07 1516 	mls	r5, r7, r6, r1
 800551a:	3530      	adds	r5, #48	; 0x30
 800551c:	2a63      	cmp	r2, #99	; 0x63
 800551e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005522:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005526:	4631      	mov	r1, r6
 8005528:	dcf1      	bgt.n	800550e <__exponent+0x22>
 800552a:	3130      	adds	r1, #48	; 0x30
 800552c:	f1ae 0502 	sub.w	r5, lr, #2
 8005530:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005534:	1c44      	adds	r4, r0, #1
 8005536:	4629      	mov	r1, r5
 8005538:	4561      	cmp	r1, ip
 800553a:	d30a      	bcc.n	8005552 <__exponent+0x66>
 800553c:	f10d 0209 	add.w	r2, sp, #9
 8005540:	eba2 020e 	sub.w	r2, r2, lr
 8005544:	4565      	cmp	r5, ip
 8005546:	bf88      	it	hi
 8005548:	2200      	movhi	r2, #0
 800554a:	4413      	add	r3, r2
 800554c:	1a18      	subs	r0, r3, r0
 800554e:	b003      	add	sp, #12
 8005550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005556:	f804 2f01 	strb.w	r2, [r4, #1]!
 800555a:	e7ed      	b.n	8005538 <__exponent+0x4c>
 800555c:	2330      	movs	r3, #48	; 0x30
 800555e:	3130      	adds	r1, #48	; 0x30
 8005560:	7083      	strb	r3, [r0, #2]
 8005562:	70c1      	strb	r1, [r0, #3]
 8005564:	1d03      	adds	r3, r0, #4
 8005566:	e7f1      	b.n	800554c <__exponent+0x60>

08005568 <_printf_float>:
 8005568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556c:	ed2d 8b02 	vpush	{d8}
 8005570:	b08d      	sub	sp, #52	; 0x34
 8005572:	460c      	mov	r4, r1
 8005574:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005578:	4616      	mov	r6, r2
 800557a:	461f      	mov	r7, r3
 800557c:	4605      	mov	r5, r0
 800557e:	f001 fa59 	bl	8006a34 <_localeconv_r>
 8005582:	f8d0 a000 	ldr.w	sl, [r0]
 8005586:	4650      	mov	r0, sl
 8005588:	f7fa fe22 	bl	80001d0 <strlen>
 800558c:	2300      	movs	r3, #0
 800558e:	930a      	str	r3, [sp, #40]	; 0x28
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	9305      	str	r3, [sp, #20]
 8005594:	f8d8 3000 	ldr.w	r3, [r8]
 8005598:	f894 b018 	ldrb.w	fp, [r4, #24]
 800559c:	3307      	adds	r3, #7
 800559e:	f023 0307 	bic.w	r3, r3, #7
 80055a2:	f103 0208 	add.w	r2, r3, #8
 80055a6:	f8c8 2000 	str.w	r2, [r8]
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055ba:	9307      	str	r3, [sp, #28]
 80055bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80055c0:	ee08 0a10 	vmov	s16, r0
 80055c4:	4b9f      	ldr	r3, [pc, #636]	; (8005844 <_printf_float+0x2dc>)
 80055c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ca:	f04f 32ff 	mov.w	r2, #4294967295
 80055ce:	f7fb faad 	bl	8000b2c <__aeabi_dcmpun>
 80055d2:	bb88      	cbnz	r0, 8005638 <_printf_float+0xd0>
 80055d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055d8:	4b9a      	ldr	r3, [pc, #616]	; (8005844 <_printf_float+0x2dc>)
 80055da:	f04f 32ff 	mov.w	r2, #4294967295
 80055de:	f7fb fa87 	bl	8000af0 <__aeabi_dcmple>
 80055e2:	bb48      	cbnz	r0, 8005638 <_printf_float+0xd0>
 80055e4:	2200      	movs	r2, #0
 80055e6:	2300      	movs	r3, #0
 80055e8:	4640      	mov	r0, r8
 80055ea:	4649      	mov	r1, r9
 80055ec:	f7fb fa76 	bl	8000adc <__aeabi_dcmplt>
 80055f0:	b110      	cbz	r0, 80055f8 <_printf_float+0x90>
 80055f2:	232d      	movs	r3, #45	; 0x2d
 80055f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f8:	4b93      	ldr	r3, [pc, #588]	; (8005848 <_printf_float+0x2e0>)
 80055fa:	4894      	ldr	r0, [pc, #592]	; (800584c <_printf_float+0x2e4>)
 80055fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005600:	bf94      	ite	ls
 8005602:	4698      	movls	r8, r3
 8005604:	4680      	movhi	r8, r0
 8005606:	2303      	movs	r3, #3
 8005608:	6123      	str	r3, [r4, #16]
 800560a:	9b05      	ldr	r3, [sp, #20]
 800560c:	f023 0204 	bic.w	r2, r3, #4
 8005610:	6022      	str	r2, [r4, #0]
 8005612:	f04f 0900 	mov.w	r9, #0
 8005616:	9700      	str	r7, [sp, #0]
 8005618:	4633      	mov	r3, r6
 800561a:	aa0b      	add	r2, sp, #44	; 0x2c
 800561c:	4621      	mov	r1, r4
 800561e:	4628      	mov	r0, r5
 8005620:	f000 f9d8 	bl	80059d4 <_printf_common>
 8005624:	3001      	adds	r0, #1
 8005626:	f040 8090 	bne.w	800574a <_printf_float+0x1e2>
 800562a:	f04f 30ff 	mov.w	r0, #4294967295
 800562e:	b00d      	add	sp, #52	; 0x34
 8005630:	ecbd 8b02 	vpop	{d8}
 8005634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005638:	4642      	mov	r2, r8
 800563a:	464b      	mov	r3, r9
 800563c:	4640      	mov	r0, r8
 800563e:	4649      	mov	r1, r9
 8005640:	f7fb fa74 	bl	8000b2c <__aeabi_dcmpun>
 8005644:	b140      	cbz	r0, 8005658 <_printf_float+0xf0>
 8005646:	464b      	mov	r3, r9
 8005648:	2b00      	cmp	r3, #0
 800564a:	bfbc      	itt	lt
 800564c:	232d      	movlt	r3, #45	; 0x2d
 800564e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005652:	487f      	ldr	r0, [pc, #508]	; (8005850 <_printf_float+0x2e8>)
 8005654:	4b7f      	ldr	r3, [pc, #508]	; (8005854 <_printf_float+0x2ec>)
 8005656:	e7d1      	b.n	80055fc <_printf_float+0x94>
 8005658:	6863      	ldr	r3, [r4, #4]
 800565a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800565e:	9206      	str	r2, [sp, #24]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	d13f      	bne.n	80056e4 <_printf_float+0x17c>
 8005664:	2306      	movs	r3, #6
 8005666:	6063      	str	r3, [r4, #4]
 8005668:	9b05      	ldr	r3, [sp, #20]
 800566a:	6861      	ldr	r1, [r4, #4]
 800566c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005670:	2300      	movs	r3, #0
 8005672:	9303      	str	r3, [sp, #12]
 8005674:	ab0a      	add	r3, sp, #40	; 0x28
 8005676:	e9cd b301 	strd	fp, r3, [sp, #4]
 800567a:	ab09      	add	r3, sp, #36	; 0x24
 800567c:	ec49 8b10 	vmov	d0, r8, r9
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	6022      	str	r2, [r4, #0]
 8005684:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005688:	4628      	mov	r0, r5
 800568a:	f7ff fecd 	bl	8005428 <__cvt>
 800568e:	9b06      	ldr	r3, [sp, #24]
 8005690:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005692:	2b47      	cmp	r3, #71	; 0x47
 8005694:	4680      	mov	r8, r0
 8005696:	d108      	bne.n	80056aa <_printf_float+0x142>
 8005698:	1cc8      	adds	r0, r1, #3
 800569a:	db02      	blt.n	80056a2 <_printf_float+0x13a>
 800569c:	6863      	ldr	r3, [r4, #4]
 800569e:	4299      	cmp	r1, r3
 80056a0:	dd41      	ble.n	8005726 <_printf_float+0x1be>
 80056a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80056a6:	fa5f fb8b 	uxtb.w	fp, fp
 80056aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056ae:	d820      	bhi.n	80056f2 <_printf_float+0x18a>
 80056b0:	3901      	subs	r1, #1
 80056b2:	465a      	mov	r2, fp
 80056b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056b8:	9109      	str	r1, [sp, #36]	; 0x24
 80056ba:	f7ff ff17 	bl	80054ec <__exponent>
 80056be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056c0:	1813      	adds	r3, r2, r0
 80056c2:	2a01      	cmp	r2, #1
 80056c4:	4681      	mov	r9, r0
 80056c6:	6123      	str	r3, [r4, #16]
 80056c8:	dc02      	bgt.n	80056d0 <_printf_float+0x168>
 80056ca:	6822      	ldr	r2, [r4, #0]
 80056cc:	07d2      	lsls	r2, r2, #31
 80056ce:	d501      	bpl.n	80056d4 <_printf_float+0x16c>
 80056d0:	3301      	adds	r3, #1
 80056d2:	6123      	str	r3, [r4, #16]
 80056d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d09c      	beq.n	8005616 <_printf_float+0xae>
 80056dc:	232d      	movs	r3, #45	; 0x2d
 80056de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e2:	e798      	b.n	8005616 <_printf_float+0xae>
 80056e4:	9a06      	ldr	r2, [sp, #24]
 80056e6:	2a47      	cmp	r2, #71	; 0x47
 80056e8:	d1be      	bne.n	8005668 <_printf_float+0x100>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1bc      	bne.n	8005668 <_printf_float+0x100>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e7b9      	b.n	8005666 <_printf_float+0xfe>
 80056f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056f6:	d118      	bne.n	800572a <_printf_float+0x1c2>
 80056f8:	2900      	cmp	r1, #0
 80056fa:	6863      	ldr	r3, [r4, #4]
 80056fc:	dd0b      	ble.n	8005716 <_printf_float+0x1ae>
 80056fe:	6121      	str	r1, [r4, #16]
 8005700:	b913      	cbnz	r3, 8005708 <_printf_float+0x1a0>
 8005702:	6822      	ldr	r2, [r4, #0]
 8005704:	07d0      	lsls	r0, r2, #31
 8005706:	d502      	bpl.n	800570e <_printf_float+0x1a6>
 8005708:	3301      	adds	r3, #1
 800570a:	440b      	add	r3, r1
 800570c:	6123      	str	r3, [r4, #16]
 800570e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005710:	f04f 0900 	mov.w	r9, #0
 8005714:	e7de      	b.n	80056d4 <_printf_float+0x16c>
 8005716:	b913      	cbnz	r3, 800571e <_printf_float+0x1b6>
 8005718:	6822      	ldr	r2, [r4, #0]
 800571a:	07d2      	lsls	r2, r2, #31
 800571c:	d501      	bpl.n	8005722 <_printf_float+0x1ba>
 800571e:	3302      	adds	r3, #2
 8005720:	e7f4      	b.n	800570c <_printf_float+0x1a4>
 8005722:	2301      	movs	r3, #1
 8005724:	e7f2      	b.n	800570c <_printf_float+0x1a4>
 8005726:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800572a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800572c:	4299      	cmp	r1, r3
 800572e:	db05      	blt.n	800573c <_printf_float+0x1d4>
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	6121      	str	r1, [r4, #16]
 8005734:	07d8      	lsls	r0, r3, #31
 8005736:	d5ea      	bpl.n	800570e <_printf_float+0x1a6>
 8005738:	1c4b      	adds	r3, r1, #1
 800573a:	e7e7      	b.n	800570c <_printf_float+0x1a4>
 800573c:	2900      	cmp	r1, #0
 800573e:	bfd4      	ite	le
 8005740:	f1c1 0202 	rsble	r2, r1, #2
 8005744:	2201      	movgt	r2, #1
 8005746:	4413      	add	r3, r2
 8005748:	e7e0      	b.n	800570c <_printf_float+0x1a4>
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	055a      	lsls	r2, r3, #21
 800574e:	d407      	bmi.n	8005760 <_printf_float+0x1f8>
 8005750:	6923      	ldr	r3, [r4, #16]
 8005752:	4642      	mov	r2, r8
 8005754:	4631      	mov	r1, r6
 8005756:	4628      	mov	r0, r5
 8005758:	47b8      	blx	r7
 800575a:	3001      	adds	r0, #1
 800575c:	d12c      	bne.n	80057b8 <_printf_float+0x250>
 800575e:	e764      	b.n	800562a <_printf_float+0xc2>
 8005760:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005764:	f240 80e0 	bls.w	8005928 <_printf_float+0x3c0>
 8005768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800576c:	2200      	movs	r2, #0
 800576e:	2300      	movs	r3, #0
 8005770:	f7fb f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005774:	2800      	cmp	r0, #0
 8005776:	d034      	beq.n	80057e2 <_printf_float+0x27a>
 8005778:	4a37      	ldr	r2, [pc, #220]	; (8005858 <_printf_float+0x2f0>)
 800577a:	2301      	movs	r3, #1
 800577c:	4631      	mov	r1, r6
 800577e:	4628      	mov	r0, r5
 8005780:	47b8      	blx	r7
 8005782:	3001      	adds	r0, #1
 8005784:	f43f af51 	beq.w	800562a <_printf_float+0xc2>
 8005788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800578c:	429a      	cmp	r2, r3
 800578e:	db02      	blt.n	8005796 <_printf_float+0x22e>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	07d8      	lsls	r0, r3, #31
 8005794:	d510      	bpl.n	80057b8 <_printf_float+0x250>
 8005796:	ee18 3a10 	vmov	r3, s16
 800579a:	4652      	mov	r2, sl
 800579c:	4631      	mov	r1, r6
 800579e:	4628      	mov	r0, r5
 80057a0:	47b8      	blx	r7
 80057a2:	3001      	adds	r0, #1
 80057a4:	f43f af41 	beq.w	800562a <_printf_float+0xc2>
 80057a8:	f04f 0800 	mov.w	r8, #0
 80057ac:	f104 091a 	add.w	r9, r4, #26
 80057b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b2:	3b01      	subs	r3, #1
 80057b4:	4543      	cmp	r3, r8
 80057b6:	dc09      	bgt.n	80057cc <_printf_float+0x264>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	079b      	lsls	r3, r3, #30
 80057bc:	f100 8105 	bmi.w	80059ca <_printf_float+0x462>
 80057c0:	68e0      	ldr	r0, [r4, #12]
 80057c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057c4:	4298      	cmp	r0, r3
 80057c6:	bfb8      	it	lt
 80057c8:	4618      	movlt	r0, r3
 80057ca:	e730      	b.n	800562e <_printf_float+0xc6>
 80057cc:	2301      	movs	r3, #1
 80057ce:	464a      	mov	r2, r9
 80057d0:	4631      	mov	r1, r6
 80057d2:	4628      	mov	r0, r5
 80057d4:	47b8      	blx	r7
 80057d6:	3001      	adds	r0, #1
 80057d8:	f43f af27 	beq.w	800562a <_printf_float+0xc2>
 80057dc:	f108 0801 	add.w	r8, r8, #1
 80057e0:	e7e6      	b.n	80057b0 <_printf_float+0x248>
 80057e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	dc39      	bgt.n	800585c <_printf_float+0x2f4>
 80057e8:	4a1b      	ldr	r2, [pc, #108]	; (8005858 <_printf_float+0x2f0>)
 80057ea:	2301      	movs	r3, #1
 80057ec:	4631      	mov	r1, r6
 80057ee:	4628      	mov	r0, r5
 80057f0:	47b8      	blx	r7
 80057f2:	3001      	adds	r0, #1
 80057f4:	f43f af19 	beq.w	800562a <_printf_float+0xc2>
 80057f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057fc:	4313      	orrs	r3, r2
 80057fe:	d102      	bne.n	8005806 <_printf_float+0x29e>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	07d9      	lsls	r1, r3, #31
 8005804:	d5d8      	bpl.n	80057b8 <_printf_float+0x250>
 8005806:	ee18 3a10 	vmov	r3, s16
 800580a:	4652      	mov	r2, sl
 800580c:	4631      	mov	r1, r6
 800580e:	4628      	mov	r0, r5
 8005810:	47b8      	blx	r7
 8005812:	3001      	adds	r0, #1
 8005814:	f43f af09 	beq.w	800562a <_printf_float+0xc2>
 8005818:	f04f 0900 	mov.w	r9, #0
 800581c:	f104 0a1a 	add.w	sl, r4, #26
 8005820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005822:	425b      	negs	r3, r3
 8005824:	454b      	cmp	r3, r9
 8005826:	dc01      	bgt.n	800582c <_printf_float+0x2c4>
 8005828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800582a:	e792      	b.n	8005752 <_printf_float+0x1ea>
 800582c:	2301      	movs	r3, #1
 800582e:	4652      	mov	r2, sl
 8005830:	4631      	mov	r1, r6
 8005832:	4628      	mov	r0, r5
 8005834:	47b8      	blx	r7
 8005836:	3001      	adds	r0, #1
 8005838:	f43f aef7 	beq.w	800562a <_printf_float+0xc2>
 800583c:	f109 0901 	add.w	r9, r9, #1
 8005840:	e7ee      	b.n	8005820 <_printf_float+0x2b8>
 8005842:	bf00      	nop
 8005844:	7fefffff 	.word	0x7fefffff
 8005848:	08008290 	.word	0x08008290
 800584c:	08008294 	.word	0x08008294
 8005850:	0800829c 	.word	0x0800829c
 8005854:	08008298 	.word	0x08008298
 8005858:	080082a0 	.word	0x080082a0
 800585c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800585e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005860:	429a      	cmp	r2, r3
 8005862:	bfa8      	it	ge
 8005864:	461a      	movge	r2, r3
 8005866:	2a00      	cmp	r2, #0
 8005868:	4691      	mov	r9, r2
 800586a:	dc37      	bgt.n	80058dc <_printf_float+0x374>
 800586c:	f04f 0b00 	mov.w	fp, #0
 8005870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005874:	f104 021a 	add.w	r2, r4, #26
 8005878:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800587a:	9305      	str	r3, [sp, #20]
 800587c:	eba3 0309 	sub.w	r3, r3, r9
 8005880:	455b      	cmp	r3, fp
 8005882:	dc33      	bgt.n	80058ec <_printf_float+0x384>
 8005884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005888:	429a      	cmp	r2, r3
 800588a:	db3b      	blt.n	8005904 <_printf_float+0x39c>
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	07da      	lsls	r2, r3, #31
 8005890:	d438      	bmi.n	8005904 <_printf_float+0x39c>
 8005892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005894:	9a05      	ldr	r2, [sp, #20]
 8005896:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005898:	1a9a      	subs	r2, r3, r2
 800589a:	eba3 0901 	sub.w	r9, r3, r1
 800589e:	4591      	cmp	r9, r2
 80058a0:	bfa8      	it	ge
 80058a2:	4691      	movge	r9, r2
 80058a4:	f1b9 0f00 	cmp.w	r9, #0
 80058a8:	dc35      	bgt.n	8005916 <_printf_float+0x3ae>
 80058aa:	f04f 0800 	mov.w	r8, #0
 80058ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058b2:	f104 0a1a 	add.w	sl, r4, #26
 80058b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058ba:	1a9b      	subs	r3, r3, r2
 80058bc:	eba3 0309 	sub.w	r3, r3, r9
 80058c0:	4543      	cmp	r3, r8
 80058c2:	f77f af79 	ble.w	80057b8 <_printf_float+0x250>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4652      	mov	r2, sl
 80058ca:	4631      	mov	r1, r6
 80058cc:	4628      	mov	r0, r5
 80058ce:	47b8      	blx	r7
 80058d0:	3001      	adds	r0, #1
 80058d2:	f43f aeaa 	beq.w	800562a <_printf_float+0xc2>
 80058d6:	f108 0801 	add.w	r8, r8, #1
 80058da:	e7ec      	b.n	80058b6 <_printf_float+0x34e>
 80058dc:	4613      	mov	r3, r2
 80058de:	4631      	mov	r1, r6
 80058e0:	4642      	mov	r2, r8
 80058e2:	4628      	mov	r0, r5
 80058e4:	47b8      	blx	r7
 80058e6:	3001      	adds	r0, #1
 80058e8:	d1c0      	bne.n	800586c <_printf_float+0x304>
 80058ea:	e69e      	b.n	800562a <_printf_float+0xc2>
 80058ec:	2301      	movs	r3, #1
 80058ee:	4631      	mov	r1, r6
 80058f0:	4628      	mov	r0, r5
 80058f2:	9205      	str	r2, [sp, #20]
 80058f4:	47b8      	blx	r7
 80058f6:	3001      	adds	r0, #1
 80058f8:	f43f ae97 	beq.w	800562a <_printf_float+0xc2>
 80058fc:	9a05      	ldr	r2, [sp, #20]
 80058fe:	f10b 0b01 	add.w	fp, fp, #1
 8005902:	e7b9      	b.n	8005878 <_printf_float+0x310>
 8005904:	ee18 3a10 	vmov	r3, s16
 8005908:	4652      	mov	r2, sl
 800590a:	4631      	mov	r1, r6
 800590c:	4628      	mov	r0, r5
 800590e:	47b8      	blx	r7
 8005910:	3001      	adds	r0, #1
 8005912:	d1be      	bne.n	8005892 <_printf_float+0x32a>
 8005914:	e689      	b.n	800562a <_printf_float+0xc2>
 8005916:	9a05      	ldr	r2, [sp, #20]
 8005918:	464b      	mov	r3, r9
 800591a:	4442      	add	r2, r8
 800591c:	4631      	mov	r1, r6
 800591e:	4628      	mov	r0, r5
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	d1c1      	bne.n	80058aa <_printf_float+0x342>
 8005926:	e680      	b.n	800562a <_printf_float+0xc2>
 8005928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800592a:	2a01      	cmp	r2, #1
 800592c:	dc01      	bgt.n	8005932 <_printf_float+0x3ca>
 800592e:	07db      	lsls	r3, r3, #31
 8005930:	d538      	bpl.n	80059a4 <_printf_float+0x43c>
 8005932:	2301      	movs	r3, #1
 8005934:	4642      	mov	r2, r8
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	47b8      	blx	r7
 800593c:	3001      	adds	r0, #1
 800593e:	f43f ae74 	beq.w	800562a <_printf_float+0xc2>
 8005942:	ee18 3a10 	vmov	r3, s16
 8005946:	4652      	mov	r2, sl
 8005948:	4631      	mov	r1, r6
 800594a:	4628      	mov	r0, r5
 800594c:	47b8      	blx	r7
 800594e:	3001      	adds	r0, #1
 8005950:	f43f ae6b 	beq.w	800562a <_printf_float+0xc2>
 8005954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005958:	2200      	movs	r2, #0
 800595a:	2300      	movs	r3, #0
 800595c:	f7fb f8b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005960:	b9d8      	cbnz	r0, 800599a <_printf_float+0x432>
 8005962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005964:	f108 0201 	add.w	r2, r8, #1
 8005968:	3b01      	subs	r3, #1
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	d10e      	bne.n	8005992 <_printf_float+0x42a>
 8005974:	e659      	b.n	800562a <_printf_float+0xc2>
 8005976:	2301      	movs	r3, #1
 8005978:	4652      	mov	r2, sl
 800597a:	4631      	mov	r1, r6
 800597c:	4628      	mov	r0, r5
 800597e:	47b8      	blx	r7
 8005980:	3001      	adds	r0, #1
 8005982:	f43f ae52 	beq.w	800562a <_printf_float+0xc2>
 8005986:	f108 0801 	add.w	r8, r8, #1
 800598a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800598c:	3b01      	subs	r3, #1
 800598e:	4543      	cmp	r3, r8
 8005990:	dcf1      	bgt.n	8005976 <_printf_float+0x40e>
 8005992:	464b      	mov	r3, r9
 8005994:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005998:	e6dc      	b.n	8005754 <_printf_float+0x1ec>
 800599a:	f04f 0800 	mov.w	r8, #0
 800599e:	f104 0a1a 	add.w	sl, r4, #26
 80059a2:	e7f2      	b.n	800598a <_printf_float+0x422>
 80059a4:	2301      	movs	r3, #1
 80059a6:	4642      	mov	r2, r8
 80059a8:	e7df      	b.n	800596a <_printf_float+0x402>
 80059aa:	2301      	movs	r3, #1
 80059ac:	464a      	mov	r2, r9
 80059ae:	4631      	mov	r1, r6
 80059b0:	4628      	mov	r0, r5
 80059b2:	47b8      	blx	r7
 80059b4:	3001      	adds	r0, #1
 80059b6:	f43f ae38 	beq.w	800562a <_printf_float+0xc2>
 80059ba:	f108 0801 	add.w	r8, r8, #1
 80059be:	68e3      	ldr	r3, [r4, #12]
 80059c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059c2:	1a5b      	subs	r3, r3, r1
 80059c4:	4543      	cmp	r3, r8
 80059c6:	dcf0      	bgt.n	80059aa <_printf_float+0x442>
 80059c8:	e6fa      	b.n	80057c0 <_printf_float+0x258>
 80059ca:	f04f 0800 	mov.w	r8, #0
 80059ce:	f104 0919 	add.w	r9, r4, #25
 80059d2:	e7f4      	b.n	80059be <_printf_float+0x456>

080059d4 <_printf_common>:
 80059d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	4616      	mov	r6, r2
 80059da:	4699      	mov	r9, r3
 80059dc:	688a      	ldr	r2, [r1, #8]
 80059de:	690b      	ldr	r3, [r1, #16]
 80059e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059e4:	4293      	cmp	r3, r2
 80059e6:	bfb8      	it	lt
 80059e8:	4613      	movlt	r3, r2
 80059ea:	6033      	str	r3, [r6, #0]
 80059ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059f0:	4607      	mov	r7, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	b10a      	cbz	r2, 80059fa <_printf_common+0x26>
 80059f6:	3301      	adds	r3, #1
 80059f8:	6033      	str	r3, [r6, #0]
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	0699      	lsls	r1, r3, #26
 80059fe:	bf42      	ittt	mi
 8005a00:	6833      	ldrmi	r3, [r6, #0]
 8005a02:	3302      	addmi	r3, #2
 8005a04:	6033      	strmi	r3, [r6, #0]
 8005a06:	6825      	ldr	r5, [r4, #0]
 8005a08:	f015 0506 	ands.w	r5, r5, #6
 8005a0c:	d106      	bne.n	8005a1c <_printf_common+0x48>
 8005a0e:	f104 0a19 	add.w	sl, r4, #25
 8005a12:	68e3      	ldr	r3, [r4, #12]
 8005a14:	6832      	ldr	r2, [r6, #0]
 8005a16:	1a9b      	subs	r3, r3, r2
 8005a18:	42ab      	cmp	r3, r5
 8005a1a:	dc26      	bgt.n	8005a6a <_printf_common+0x96>
 8005a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a20:	1e13      	subs	r3, r2, #0
 8005a22:	6822      	ldr	r2, [r4, #0]
 8005a24:	bf18      	it	ne
 8005a26:	2301      	movne	r3, #1
 8005a28:	0692      	lsls	r2, r2, #26
 8005a2a:	d42b      	bmi.n	8005a84 <_printf_common+0xb0>
 8005a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a30:	4649      	mov	r1, r9
 8005a32:	4638      	mov	r0, r7
 8005a34:	47c0      	blx	r8
 8005a36:	3001      	adds	r0, #1
 8005a38:	d01e      	beq.n	8005a78 <_printf_common+0xa4>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	68e5      	ldr	r5, [r4, #12]
 8005a3e:	6832      	ldr	r2, [r6, #0]
 8005a40:	f003 0306 	and.w	r3, r3, #6
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	bf08      	it	eq
 8005a48:	1aad      	subeq	r5, r5, r2
 8005a4a:	68a3      	ldr	r3, [r4, #8]
 8005a4c:	6922      	ldr	r2, [r4, #16]
 8005a4e:	bf0c      	ite	eq
 8005a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a54:	2500      	movne	r5, #0
 8005a56:	4293      	cmp	r3, r2
 8005a58:	bfc4      	itt	gt
 8005a5a:	1a9b      	subgt	r3, r3, r2
 8005a5c:	18ed      	addgt	r5, r5, r3
 8005a5e:	2600      	movs	r6, #0
 8005a60:	341a      	adds	r4, #26
 8005a62:	42b5      	cmp	r5, r6
 8005a64:	d11a      	bne.n	8005a9c <_printf_common+0xc8>
 8005a66:	2000      	movs	r0, #0
 8005a68:	e008      	b.n	8005a7c <_printf_common+0xa8>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	4652      	mov	r2, sl
 8005a6e:	4649      	mov	r1, r9
 8005a70:	4638      	mov	r0, r7
 8005a72:	47c0      	blx	r8
 8005a74:	3001      	adds	r0, #1
 8005a76:	d103      	bne.n	8005a80 <_printf_common+0xac>
 8005a78:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a80:	3501      	adds	r5, #1
 8005a82:	e7c6      	b.n	8005a12 <_printf_common+0x3e>
 8005a84:	18e1      	adds	r1, r4, r3
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	2030      	movs	r0, #48	; 0x30
 8005a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a8e:	4422      	add	r2, r4
 8005a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a98:	3302      	adds	r3, #2
 8005a9a:	e7c7      	b.n	8005a2c <_printf_common+0x58>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	47c0      	blx	r8
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d0e6      	beq.n	8005a78 <_printf_common+0xa4>
 8005aaa:	3601      	adds	r6, #1
 8005aac:	e7d9      	b.n	8005a62 <_printf_common+0x8e>
	...

08005ab0 <_printf_i>:
 8005ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	7e0f      	ldrb	r7, [r1, #24]
 8005ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ab8:	2f78      	cmp	r7, #120	; 0x78
 8005aba:	4691      	mov	r9, r2
 8005abc:	4680      	mov	r8, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	469a      	mov	sl, r3
 8005ac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ac6:	d807      	bhi.n	8005ad8 <_printf_i+0x28>
 8005ac8:	2f62      	cmp	r7, #98	; 0x62
 8005aca:	d80a      	bhi.n	8005ae2 <_printf_i+0x32>
 8005acc:	2f00      	cmp	r7, #0
 8005ace:	f000 80d8 	beq.w	8005c82 <_printf_i+0x1d2>
 8005ad2:	2f58      	cmp	r7, #88	; 0x58
 8005ad4:	f000 80a3 	beq.w	8005c1e <_printf_i+0x16e>
 8005ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ae0:	e03a      	b.n	8005b58 <_printf_i+0xa8>
 8005ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ae6:	2b15      	cmp	r3, #21
 8005ae8:	d8f6      	bhi.n	8005ad8 <_printf_i+0x28>
 8005aea:	a101      	add	r1, pc, #4	; (adr r1, 8005af0 <_printf_i+0x40>)
 8005aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005af0:	08005b49 	.word	0x08005b49
 8005af4:	08005b5d 	.word	0x08005b5d
 8005af8:	08005ad9 	.word	0x08005ad9
 8005afc:	08005ad9 	.word	0x08005ad9
 8005b00:	08005ad9 	.word	0x08005ad9
 8005b04:	08005ad9 	.word	0x08005ad9
 8005b08:	08005b5d 	.word	0x08005b5d
 8005b0c:	08005ad9 	.word	0x08005ad9
 8005b10:	08005ad9 	.word	0x08005ad9
 8005b14:	08005ad9 	.word	0x08005ad9
 8005b18:	08005ad9 	.word	0x08005ad9
 8005b1c:	08005c69 	.word	0x08005c69
 8005b20:	08005b8d 	.word	0x08005b8d
 8005b24:	08005c4b 	.word	0x08005c4b
 8005b28:	08005ad9 	.word	0x08005ad9
 8005b2c:	08005ad9 	.word	0x08005ad9
 8005b30:	08005c8b 	.word	0x08005c8b
 8005b34:	08005ad9 	.word	0x08005ad9
 8005b38:	08005b8d 	.word	0x08005b8d
 8005b3c:	08005ad9 	.word	0x08005ad9
 8005b40:	08005ad9 	.word	0x08005ad9
 8005b44:	08005c53 	.word	0x08005c53
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	1d1a      	adds	r2, r3, #4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	602a      	str	r2, [r5, #0]
 8005b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0a3      	b.n	8005ca4 <_printf_i+0x1f4>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	6829      	ldr	r1, [r5, #0]
 8005b60:	0606      	lsls	r6, r0, #24
 8005b62:	f101 0304 	add.w	r3, r1, #4
 8005b66:	d50a      	bpl.n	8005b7e <_printf_i+0xce>
 8005b68:	680e      	ldr	r6, [r1, #0]
 8005b6a:	602b      	str	r3, [r5, #0]
 8005b6c:	2e00      	cmp	r6, #0
 8005b6e:	da03      	bge.n	8005b78 <_printf_i+0xc8>
 8005b70:	232d      	movs	r3, #45	; 0x2d
 8005b72:	4276      	negs	r6, r6
 8005b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b78:	485e      	ldr	r0, [pc, #376]	; (8005cf4 <_printf_i+0x244>)
 8005b7a:	230a      	movs	r3, #10
 8005b7c:	e019      	b.n	8005bb2 <_printf_i+0x102>
 8005b7e:	680e      	ldr	r6, [r1, #0]
 8005b80:	602b      	str	r3, [r5, #0]
 8005b82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b86:	bf18      	it	ne
 8005b88:	b236      	sxthne	r6, r6
 8005b8a:	e7ef      	b.n	8005b6c <_printf_i+0xbc>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	6820      	ldr	r0, [r4, #0]
 8005b90:	1d19      	adds	r1, r3, #4
 8005b92:	6029      	str	r1, [r5, #0]
 8005b94:	0601      	lsls	r1, r0, #24
 8005b96:	d501      	bpl.n	8005b9c <_printf_i+0xec>
 8005b98:	681e      	ldr	r6, [r3, #0]
 8005b9a:	e002      	b.n	8005ba2 <_printf_i+0xf2>
 8005b9c:	0646      	lsls	r6, r0, #25
 8005b9e:	d5fb      	bpl.n	8005b98 <_printf_i+0xe8>
 8005ba0:	881e      	ldrh	r6, [r3, #0]
 8005ba2:	4854      	ldr	r0, [pc, #336]	; (8005cf4 <_printf_i+0x244>)
 8005ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ba6:	bf0c      	ite	eq
 8005ba8:	2308      	moveq	r3, #8
 8005baa:	230a      	movne	r3, #10
 8005bac:	2100      	movs	r1, #0
 8005bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bb2:	6865      	ldr	r5, [r4, #4]
 8005bb4:	60a5      	str	r5, [r4, #8]
 8005bb6:	2d00      	cmp	r5, #0
 8005bb8:	bfa2      	ittt	ge
 8005bba:	6821      	ldrge	r1, [r4, #0]
 8005bbc:	f021 0104 	bicge.w	r1, r1, #4
 8005bc0:	6021      	strge	r1, [r4, #0]
 8005bc2:	b90e      	cbnz	r6, 8005bc8 <_printf_i+0x118>
 8005bc4:	2d00      	cmp	r5, #0
 8005bc6:	d04d      	beq.n	8005c64 <_printf_i+0x1b4>
 8005bc8:	4615      	mov	r5, r2
 8005bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bce:	fb03 6711 	mls	r7, r3, r1, r6
 8005bd2:	5dc7      	ldrb	r7, [r0, r7]
 8005bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bd8:	4637      	mov	r7, r6
 8005bda:	42bb      	cmp	r3, r7
 8005bdc:	460e      	mov	r6, r1
 8005bde:	d9f4      	bls.n	8005bca <_printf_i+0x11a>
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d10b      	bne.n	8005bfc <_printf_i+0x14c>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	07de      	lsls	r6, r3, #31
 8005be8:	d508      	bpl.n	8005bfc <_printf_i+0x14c>
 8005bea:	6923      	ldr	r3, [r4, #16]
 8005bec:	6861      	ldr	r1, [r4, #4]
 8005bee:	4299      	cmp	r1, r3
 8005bf0:	bfde      	ittt	le
 8005bf2:	2330      	movle	r3, #48	; 0x30
 8005bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bfc:	1b52      	subs	r2, r2, r5
 8005bfe:	6122      	str	r2, [r4, #16]
 8005c00:	f8cd a000 	str.w	sl, [sp]
 8005c04:	464b      	mov	r3, r9
 8005c06:	aa03      	add	r2, sp, #12
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	f7ff fee2 	bl	80059d4 <_printf_common>
 8005c10:	3001      	adds	r0, #1
 8005c12:	d14c      	bne.n	8005cae <_printf_i+0x1fe>
 8005c14:	f04f 30ff 	mov.w	r0, #4294967295
 8005c18:	b004      	add	sp, #16
 8005c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c1e:	4835      	ldr	r0, [pc, #212]	; (8005cf4 <_printf_i+0x244>)
 8005c20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c24:	6829      	ldr	r1, [r5, #0]
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c2c:	6029      	str	r1, [r5, #0]
 8005c2e:	061d      	lsls	r5, r3, #24
 8005c30:	d514      	bpl.n	8005c5c <_printf_i+0x1ac>
 8005c32:	07df      	lsls	r7, r3, #31
 8005c34:	bf44      	itt	mi
 8005c36:	f043 0320 	orrmi.w	r3, r3, #32
 8005c3a:	6023      	strmi	r3, [r4, #0]
 8005c3c:	b91e      	cbnz	r6, 8005c46 <_printf_i+0x196>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	f023 0320 	bic.w	r3, r3, #32
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	2310      	movs	r3, #16
 8005c48:	e7b0      	b.n	8005bac <_printf_i+0xfc>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	f043 0320 	orr.w	r3, r3, #32
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	2378      	movs	r3, #120	; 0x78
 8005c54:	4828      	ldr	r0, [pc, #160]	; (8005cf8 <_printf_i+0x248>)
 8005c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c5a:	e7e3      	b.n	8005c24 <_printf_i+0x174>
 8005c5c:	0659      	lsls	r1, r3, #25
 8005c5e:	bf48      	it	mi
 8005c60:	b2b6      	uxthmi	r6, r6
 8005c62:	e7e6      	b.n	8005c32 <_printf_i+0x182>
 8005c64:	4615      	mov	r5, r2
 8005c66:	e7bb      	b.n	8005be0 <_printf_i+0x130>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	6826      	ldr	r6, [r4, #0]
 8005c6c:	6961      	ldr	r1, [r4, #20]
 8005c6e:	1d18      	adds	r0, r3, #4
 8005c70:	6028      	str	r0, [r5, #0]
 8005c72:	0635      	lsls	r5, r6, #24
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	d501      	bpl.n	8005c7c <_printf_i+0x1cc>
 8005c78:	6019      	str	r1, [r3, #0]
 8005c7a:	e002      	b.n	8005c82 <_printf_i+0x1d2>
 8005c7c:	0670      	lsls	r0, r6, #25
 8005c7e:	d5fb      	bpl.n	8005c78 <_printf_i+0x1c8>
 8005c80:	8019      	strh	r1, [r3, #0]
 8005c82:	2300      	movs	r3, #0
 8005c84:	6123      	str	r3, [r4, #16]
 8005c86:	4615      	mov	r5, r2
 8005c88:	e7ba      	b.n	8005c00 <_printf_i+0x150>
 8005c8a:	682b      	ldr	r3, [r5, #0]
 8005c8c:	1d1a      	adds	r2, r3, #4
 8005c8e:	602a      	str	r2, [r5, #0]
 8005c90:	681d      	ldr	r5, [r3, #0]
 8005c92:	6862      	ldr	r2, [r4, #4]
 8005c94:	2100      	movs	r1, #0
 8005c96:	4628      	mov	r0, r5
 8005c98:	f7fa faa2 	bl	80001e0 <memchr>
 8005c9c:	b108      	cbz	r0, 8005ca2 <_printf_i+0x1f2>
 8005c9e:	1b40      	subs	r0, r0, r5
 8005ca0:	6060      	str	r0, [r4, #4]
 8005ca2:	6863      	ldr	r3, [r4, #4]
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cac:	e7a8      	b.n	8005c00 <_printf_i+0x150>
 8005cae:	6923      	ldr	r3, [r4, #16]
 8005cb0:	462a      	mov	r2, r5
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	4640      	mov	r0, r8
 8005cb6:	47d0      	blx	sl
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d0ab      	beq.n	8005c14 <_printf_i+0x164>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	079b      	lsls	r3, r3, #30
 8005cc0:	d413      	bmi.n	8005cea <_printf_i+0x23a>
 8005cc2:	68e0      	ldr	r0, [r4, #12]
 8005cc4:	9b03      	ldr	r3, [sp, #12]
 8005cc6:	4298      	cmp	r0, r3
 8005cc8:	bfb8      	it	lt
 8005cca:	4618      	movlt	r0, r3
 8005ccc:	e7a4      	b.n	8005c18 <_printf_i+0x168>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	47d0      	blx	sl
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d09b      	beq.n	8005c14 <_printf_i+0x164>
 8005cdc:	3501      	adds	r5, #1
 8005cde:	68e3      	ldr	r3, [r4, #12]
 8005ce0:	9903      	ldr	r1, [sp, #12]
 8005ce2:	1a5b      	subs	r3, r3, r1
 8005ce4:	42ab      	cmp	r3, r5
 8005ce6:	dcf2      	bgt.n	8005cce <_printf_i+0x21e>
 8005ce8:	e7eb      	b.n	8005cc2 <_printf_i+0x212>
 8005cea:	2500      	movs	r5, #0
 8005cec:	f104 0619 	add.w	r6, r4, #25
 8005cf0:	e7f5      	b.n	8005cde <_printf_i+0x22e>
 8005cf2:	bf00      	nop
 8005cf4:	080082a2 	.word	0x080082a2
 8005cf8:	080082b3 	.word	0x080082b3

08005cfc <siprintf>:
 8005cfc:	b40e      	push	{r1, r2, r3}
 8005cfe:	b500      	push	{lr}
 8005d00:	b09c      	sub	sp, #112	; 0x70
 8005d02:	ab1d      	add	r3, sp, #116	; 0x74
 8005d04:	9002      	str	r0, [sp, #8]
 8005d06:	9006      	str	r0, [sp, #24]
 8005d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d0c:	4809      	ldr	r0, [pc, #36]	; (8005d34 <siprintf+0x38>)
 8005d0e:	9107      	str	r1, [sp, #28]
 8005d10:	9104      	str	r1, [sp, #16]
 8005d12:	4909      	ldr	r1, [pc, #36]	; (8005d38 <siprintf+0x3c>)
 8005d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d18:	9105      	str	r1, [sp, #20]
 8005d1a:	6800      	ldr	r0, [r0, #0]
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	a902      	add	r1, sp, #8
 8005d20:	f001 fb78 	bl	8007414 <_svfiprintf_r>
 8005d24:	9b02      	ldr	r3, [sp, #8]
 8005d26:	2200      	movs	r2, #0
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	b01c      	add	sp, #112	; 0x70
 8005d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d30:	b003      	add	sp, #12
 8005d32:	4770      	bx	lr
 8005d34:	2000000c 	.word	0x2000000c
 8005d38:	ffff0208 	.word	0xffff0208

08005d3c <quorem>:
 8005d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d40:	6903      	ldr	r3, [r0, #16]
 8005d42:	690c      	ldr	r4, [r1, #16]
 8005d44:	42a3      	cmp	r3, r4
 8005d46:	4607      	mov	r7, r0
 8005d48:	f2c0 8081 	blt.w	8005e4e <quorem+0x112>
 8005d4c:	3c01      	subs	r4, #1
 8005d4e:	f101 0814 	add.w	r8, r1, #20
 8005d52:	f100 0514 	add.w	r5, r0, #20
 8005d56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d64:	3301      	adds	r3, #1
 8005d66:	429a      	cmp	r2, r3
 8005d68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d70:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d74:	d331      	bcc.n	8005dda <quorem+0x9e>
 8005d76:	f04f 0e00 	mov.w	lr, #0
 8005d7a:	4640      	mov	r0, r8
 8005d7c:	46ac      	mov	ip, r5
 8005d7e:	46f2      	mov	sl, lr
 8005d80:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d84:	b293      	uxth	r3, r2
 8005d86:	fb06 e303 	mla	r3, r6, r3, lr
 8005d8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	ebaa 0303 	sub.w	r3, sl, r3
 8005d94:	f8dc a000 	ldr.w	sl, [ip]
 8005d98:	0c12      	lsrs	r2, r2, #16
 8005d9a:	fa13 f38a 	uxtah	r3, r3, sl
 8005d9e:	fb06 e202 	mla	r2, r6, r2, lr
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	9b00      	ldr	r3, [sp, #0]
 8005da6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005daa:	b292      	uxth	r2, r2
 8005dac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005db0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005db4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005db8:	4581      	cmp	r9, r0
 8005dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dbe:	f84c 3b04 	str.w	r3, [ip], #4
 8005dc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005dc6:	d2db      	bcs.n	8005d80 <quorem+0x44>
 8005dc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005dcc:	b92b      	cbnz	r3, 8005dda <quorem+0x9e>
 8005dce:	9b01      	ldr	r3, [sp, #4]
 8005dd0:	3b04      	subs	r3, #4
 8005dd2:	429d      	cmp	r5, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	d32e      	bcc.n	8005e36 <quorem+0xfa>
 8005dd8:	613c      	str	r4, [r7, #16]
 8005dda:	4638      	mov	r0, r7
 8005ddc:	f001 f8c6 	bl	8006f6c <__mcmp>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	db24      	blt.n	8005e2e <quorem+0xf2>
 8005de4:	3601      	adds	r6, #1
 8005de6:	4628      	mov	r0, r5
 8005de8:	f04f 0c00 	mov.w	ip, #0
 8005dec:	f858 2b04 	ldr.w	r2, [r8], #4
 8005df0:	f8d0 e000 	ldr.w	lr, [r0]
 8005df4:	b293      	uxth	r3, r2
 8005df6:	ebac 0303 	sub.w	r3, ip, r3
 8005dfa:	0c12      	lsrs	r2, r2, #16
 8005dfc:	fa13 f38e 	uxtah	r3, r3, lr
 8005e00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e0e:	45c1      	cmp	r9, r8
 8005e10:	f840 3b04 	str.w	r3, [r0], #4
 8005e14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e18:	d2e8      	bcs.n	8005dec <quorem+0xb0>
 8005e1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e22:	b922      	cbnz	r2, 8005e2e <quorem+0xf2>
 8005e24:	3b04      	subs	r3, #4
 8005e26:	429d      	cmp	r5, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	d30a      	bcc.n	8005e42 <quorem+0x106>
 8005e2c:	613c      	str	r4, [r7, #16]
 8005e2e:	4630      	mov	r0, r6
 8005e30:	b003      	add	sp, #12
 8005e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e36:	6812      	ldr	r2, [r2, #0]
 8005e38:	3b04      	subs	r3, #4
 8005e3a:	2a00      	cmp	r2, #0
 8005e3c:	d1cc      	bne.n	8005dd8 <quorem+0x9c>
 8005e3e:	3c01      	subs	r4, #1
 8005e40:	e7c7      	b.n	8005dd2 <quorem+0x96>
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	3b04      	subs	r3, #4
 8005e46:	2a00      	cmp	r2, #0
 8005e48:	d1f0      	bne.n	8005e2c <quorem+0xf0>
 8005e4a:	3c01      	subs	r4, #1
 8005e4c:	e7eb      	b.n	8005e26 <quorem+0xea>
 8005e4e:	2000      	movs	r0, #0
 8005e50:	e7ee      	b.n	8005e30 <quorem+0xf4>
 8005e52:	0000      	movs	r0, r0
 8005e54:	0000      	movs	r0, r0
	...

08005e58 <_dtoa_r>:
 8005e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5c:	ed2d 8b04 	vpush	{d8-d9}
 8005e60:	ec57 6b10 	vmov	r6, r7, d0
 8005e64:	b093      	sub	sp, #76	; 0x4c
 8005e66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e6c:	9106      	str	r1, [sp, #24]
 8005e6e:	ee10 aa10 	vmov	sl, s0
 8005e72:	4604      	mov	r4, r0
 8005e74:	9209      	str	r2, [sp, #36]	; 0x24
 8005e76:	930c      	str	r3, [sp, #48]	; 0x30
 8005e78:	46bb      	mov	fp, r7
 8005e7a:	b975      	cbnz	r5, 8005e9a <_dtoa_r+0x42>
 8005e7c:	2010      	movs	r0, #16
 8005e7e:	f000 fddd 	bl	8006a3c <malloc>
 8005e82:	4602      	mov	r2, r0
 8005e84:	6260      	str	r0, [r4, #36]	; 0x24
 8005e86:	b920      	cbnz	r0, 8005e92 <_dtoa_r+0x3a>
 8005e88:	4ba7      	ldr	r3, [pc, #668]	; (8006128 <_dtoa_r+0x2d0>)
 8005e8a:	21ea      	movs	r1, #234	; 0xea
 8005e8c:	48a7      	ldr	r0, [pc, #668]	; (800612c <_dtoa_r+0x2d4>)
 8005e8e:	f001 fbd1 	bl	8007634 <__assert_func>
 8005e92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e96:	6005      	str	r5, [r0, #0]
 8005e98:	60c5      	str	r5, [r0, #12]
 8005e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e9c:	6819      	ldr	r1, [r3, #0]
 8005e9e:	b151      	cbz	r1, 8005eb6 <_dtoa_r+0x5e>
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	604a      	str	r2, [r1, #4]
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	4093      	lsls	r3, r2
 8005ea8:	608b      	str	r3, [r1, #8]
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f000 fe1c 	bl	8006ae8 <_Bfree>
 8005eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	1e3b      	subs	r3, r7, #0
 8005eb8:	bfaa      	itet	ge
 8005eba:	2300      	movge	r3, #0
 8005ebc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005ec0:	f8c8 3000 	strge.w	r3, [r8]
 8005ec4:	4b9a      	ldr	r3, [pc, #616]	; (8006130 <_dtoa_r+0x2d8>)
 8005ec6:	bfbc      	itt	lt
 8005ec8:	2201      	movlt	r2, #1
 8005eca:	f8c8 2000 	strlt.w	r2, [r8]
 8005ece:	ea33 030b 	bics.w	r3, r3, fp
 8005ed2:	d11b      	bne.n	8005f0c <_dtoa_r+0xb4>
 8005ed4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ed6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ee0:	4333      	orrs	r3, r6
 8005ee2:	f000 8592 	beq.w	8006a0a <_dtoa_r+0xbb2>
 8005ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ee8:	b963      	cbnz	r3, 8005f04 <_dtoa_r+0xac>
 8005eea:	4b92      	ldr	r3, [pc, #584]	; (8006134 <_dtoa_r+0x2dc>)
 8005eec:	e022      	b.n	8005f34 <_dtoa_r+0xdc>
 8005eee:	4b92      	ldr	r3, [pc, #584]	; (8006138 <_dtoa_r+0x2e0>)
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	9801      	ldr	r0, [sp, #4]
 8005efa:	b013      	add	sp, #76	; 0x4c
 8005efc:	ecbd 8b04 	vpop	{d8-d9}
 8005f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f04:	4b8b      	ldr	r3, [pc, #556]	; (8006134 <_dtoa_r+0x2dc>)
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	3303      	adds	r3, #3
 8005f0a:	e7f3      	b.n	8005ef4 <_dtoa_r+0x9c>
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2300      	movs	r3, #0
 8005f10:	4650      	mov	r0, sl
 8005f12:	4659      	mov	r1, fp
 8005f14:	f7fa fdd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f18:	ec4b ab19 	vmov	d9, sl, fp
 8005f1c:	4680      	mov	r8, r0
 8005f1e:	b158      	cbz	r0, 8005f38 <_dtoa_r+0xe0>
 8005f20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f22:	2301      	movs	r3, #1
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 856b 	beq.w	8006a04 <_dtoa_r+0xbac>
 8005f2e:	4883      	ldr	r0, [pc, #524]	; (800613c <_dtoa_r+0x2e4>)
 8005f30:	6018      	str	r0, [r3, #0]
 8005f32:	1e43      	subs	r3, r0, #1
 8005f34:	9301      	str	r3, [sp, #4]
 8005f36:	e7df      	b.n	8005ef8 <_dtoa_r+0xa0>
 8005f38:	ec4b ab10 	vmov	d0, sl, fp
 8005f3c:	aa10      	add	r2, sp, #64	; 0x40
 8005f3e:	a911      	add	r1, sp, #68	; 0x44
 8005f40:	4620      	mov	r0, r4
 8005f42:	f001 f8b9 	bl	80070b8 <__d2b>
 8005f46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005f4a:	ee08 0a10 	vmov	s16, r0
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	f000 8084 	beq.w	800605c <_dtoa_r+0x204>
 8005f54:	ee19 3a90 	vmov	r3, s19
 8005f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005f60:	4656      	mov	r6, sl
 8005f62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005f66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005f6e:	4b74      	ldr	r3, [pc, #464]	; (8006140 <_dtoa_r+0x2e8>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	4630      	mov	r0, r6
 8005f74:	4639      	mov	r1, r7
 8005f76:	f7fa f987 	bl	8000288 <__aeabi_dsub>
 8005f7a:	a365      	add	r3, pc, #404	; (adr r3, 8006110 <_dtoa_r+0x2b8>)
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	f7fa fb3a 	bl	80005f8 <__aeabi_dmul>
 8005f84:	a364      	add	r3, pc, #400	; (adr r3, 8006118 <_dtoa_r+0x2c0>)
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f7fa f97f 	bl	800028c <__adddf3>
 8005f8e:	4606      	mov	r6, r0
 8005f90:	4628      	mov	r0, r5
 8005f92:	460f      	mov	r7, r1
 8005f94:	f7fa fac6 	bl	8000524 <__aeabi_i2d>
 8005f98:	a361      	add	r3, pc, #388	; (adr r3, 8006120 <_dtoa_r+0x2c8>)
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f7fa fb2b 	bl	80005f8 <__aeabi_dmul>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	4639      	mov	r1, r7
 8005faa:	f7fa f96f 	bl	800028c <__adddf3>
 8005fae:	4606      	mov	r6, r0
 8005fb0:	460f      	mov	r7, r1
 8005fb2:	f7fa fdd1 	bl	8000b58 <__aeabi_d2iz>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	9000      	str	r0, [sp, #0]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	f7fa fd8c 	bl	8000adc <__aeabi_dcmplt>
 8005fc4:	b150      	cbz	r0, 8005fdc <_dtoa_r+0x184>
 8005fc6:	9800      	ldr	r0, [sp, #0]
 8005fc8:	f7fa faac 	bl	8000524 <__aeabi_i2d>
 8005fcc:	4632      	mov	r2, r6
 8005fce:	463b      	mov	r3, r7
 8005fd0:	f7fa fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fd4:	b910      	cbnz	r0, 8005fdc <_dtoa_r+0x184>
 8005fd6:	9b00      	ldr	r3, [sp, #0]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	9b00      	ldr	r3, [sp, #0]
 8005fde:	2b16      	cmp	r3, #22
 8005fe0:	d85a      	bhi.n	8006098 <_dtoa_r+0x240>
 8005fe2:	9a00      	ldr	r2, [sp, #0]
 8005fe4:	4b57      	ldr	r3, [pc, #348]	; (8006144 <_dtoa_r+0x2ec>)
 8005fe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	ec51 0b19 	vmov	r0, r1, d9
 8005ff2:	f7fa fd73 	bl	8000adc <__aeabi_dcmplt>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d050      	beq.n	800609c <_dtoa_r+0x244>
 8005ffa:	9b00      	ldr	r3, [sp, #0]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	2300      	movs	r3, #0
 8006002:	930b      	str	r3, [sp, #44]	; 0x2c
 8006004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006006:	1b5d      	subs	r5, r3, r5
 8006008:	1e6b      	subs	r3, r5, #1
 800600a:	9305      	str	r3, [sp, #20]
 800600c:	bf45      	ittet	mi
 800600e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006012:	9304      	strmi	r3, [sp, #16]
 8006014:	2300      	movpl	r3, #0
 8006016:	2300      	movmi	r3, #0
 8006018:	bf4c      	ite	mi
 800601a:	9305      	strmi	r3, [sp, #20]
 800601c:	9304      	strpl	r3, [sp, #16]
 800601e:	9b00      	ldr	r3, [sp, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	db3d      	blt.n	80060a0 <_dtoa_r+0x248>
 8006024:	9b05      	ldr	r3, [sp, #20]
 8006026:	9a00      	ldr	r2, [sp, #0]
 8006028:	920a      	str	r2, [sp, #40]	; 0x28
 800602a:	4413      	add	r3, r2
 800602c:	9305      	str	r3, [sp, #20]
 800602e:	2300      	movs	r3, #0
 8006030:	9307      	str	r3, [sp, #28]
 8006032:	9b06      	ldr	r3, [sp, #24]
 8006034:	2b09      	cmp	r3, #9
 8006036:	f200 8089 	bhi.w	800614c <_dtoa_r+0x2f4>
 800603a:	2b05      	cmp	r3, #5
 800603c:	bfc4      	itt	gt
 800603e:	3b04      	subgt	r3, #4
 8006040:	9306      	strgt	r3, [sp, #24]
 8006042:	9b06      	ldr	r3, [sp, #24]
 8006044:	f1a3 0302 	sub.w	r3, r3, #2
 8006048:	bfcc      	ite	gt
 800604a:	2500      	movgt	r5, #0
 800604c:	2501      	movle	r5, #1
 800604e:	2b03      	cmp	r3, #3
 8006050:	f200 8087 	bhi.w	8006162 <_dtoa_r+0x30a>
 8006054:	e8df f003 	tbb	[pc, r3]
 8006058:	59383a2d 	.word	0x59383a2d
 800605c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006060:	441d      	add	r5, r3
 8006062:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006066:	2b20      	cmp	r3, #32
 8006068:	bfc1      	itttt	gt
 800606a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800606e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006072:	fa0b f303 	lslgt.w	r3, fp, r3
 8006076:	fa26 f000 	lsrgt.w	r0, r6, r0
 800607a:	bfda      	itte	le
 800607c:	f1c3 0320 	rsble	r3, r3, #32
 8006080:	fa06 f003 	lslle.w	r0, r6, r3
 8006084:	4318      	orrgt	r0, r3
 8006086:	f7fa fa3d 	bl	8000504 <__aeabi_ui2d>
 800608a:	2301      	movs	r3, #1
 800608c:	4606      	mov	r6, r0
 800608e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006092:	3d01      	subs	r5, #1
 8006094:	930e      	str	r3, [sp, #56]	; 0x38
 8006096:	e76a      	b.n	8005f6e <_dtoa_r+0x116>
 8006098:	2301      	movs	r3, #1
 800609a:	e7b2      	b.n	8006002 <_dtoa_r+0x1aa>
 800609c:	900b      	str	r0, [sp, #44]	; 0x2c
 800609e:	e7b1      	b.n	8006004 <_dtoa_r+0x1ac>
 80060a0:	9b04      	ldr	r3, [sp, #16]
 80060a2:	9a00      	ldr	r2, [sp, #0]
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	9304      	str	r3, [sp, #16]
 80060a8:	4253      	negs	r3, r2
 80060aa:	9307      	str	r3, [sp, #28]
 80060ac:	2300      	movs	r3, #0
 80060ae:	930a      	str	r3, [sp, #40]	; 0x28
 80060b0:	e7bf      	b.n	8006032 <_dtoa_r+0x1da>
 80060b2:	2300      	movs	r3, #0
 80060b4:	9308      	str	r3, [sp, #32]
 80060b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	dc55      	bgt.n	8006168 <_dtoa_r+0x310>
 80060bc:	2301      	movs	r3, #1
 80060be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060c2:	461a      	mov	r2, r3
 80060c4:	9209      	str	r2, [sp, #36]	; 0x24
 80060c6:	e00c      	b.n	80060e2 <_dtoa_r+0x28a>
 80060c8:	2301      	movs	r3, #1
 80060ca:	e7f3      	b.n	80060b4 <_dtoa_r+0x25c>
 80060cc:	2300      	movs	r3, #0
 80060ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060d0:	9308      	str	r3, [sp, #32]
 80060d2:	9b00      	ldr	r3, [sp, #0]
 80060d4:	4413      	add	r3, r2
 80060d6:	9302      	str	r3, [sp, #8]
 80060d8:	3301      	adds	r3, #1
 80060da:	2b01      	cmp	r3, #1
 80060dc:	9303      	str	r3, [sp, #12]
 80060de:	bfb8      	it	lt
 80060e0:	2301      	movlt	r3, #1
 80060e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80060e4:	2200      	movs	r2, #0
 80060e6:	6042      	str	r2, [r0, #4]
 80060e8:	2204      	movs	r2, #4
 80060ea:	f102 0614 	add.w	r6, r2, #20
 80060ee:	429e      	cmp	r6, r3
 80060f0:	6841      	ldr	r1, [r0, #4]
 80060f2:	d93d      	bls.n	8006170 <_dtoa_r+0x318>
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 fcb7 	bl	8006a68 <_Balloc>
 80060fa:	9001      	str	r0, [sp, #4]
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d13b      	bne.n	8006178 <_dtoa_r+0x320>
 8006100:	4b11      	ldr	r3, [pc, #68]	; (8006148 <_dtoa_r+0x2f0>)
 8006102:	4602      	mov	r2, r0
 8006104:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006108:	e6c0      	b.n	8005e8c <_dtoa_r+0x34>
 800610a:	2301      	movs	r3, #1
 800610c:	e7df      	b.n	80060ce <_dtoa_r+0x276>
 800610e:	bf00      	nop
 8006110:	636f4361 	.word	0x636f4361
 8006114:	3fd287a7 	.word	0x3fd287a7
 8006118:	8b60c8b3 	.word	0x8b60c8b3
 800611c:	3fc68a28 	.word	0x3fc68a28
 8006120:	509f79fb 	.word	0x509f79fb
 8006124:	3fd34413 	.word	0x3fd34413
 8006128:	080082d1 	.word	0x080082d1
 800612c:	080082e8 	.word	0x080082e8
 8006130:	7ff00000 	.word	0x7ff00000
 8006134:	080082cd 	.word	0x080082cd
 8006138:	080082c4 	.word	0x080082c4
 800613c:	080082a1 	.word	0x080082a1
 8006140:	3ff80000 	.word	0x3ff80000
 8006144:	080083d8 	.word	0x080083d8
 8006148:	08008343 	.word	0x08008343
 800614c:	2501      	movs	r5, #1
 800614e:	2300      	movs	r3, #0
 8006150:	9306      	str	r3, [sp, #24]
 8006152:	9508      	str	r5, [sp, #32]
 8006154:	f04f 33ff 	mov.w	r3, #4294967295
 8006158:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800615c:	2200      	movs	r2, #0
 800615e:	2312      	movs	r3, #18
 8006160:	e7b0      	b.n	80060c4 <_dtoa_r+0x26c>
 8006162:	2301      	movs	r3, #1
 8006164:	9308      	str	r3, [sp, #32]
 8006166:	e7f5      	b.n	8006154 <_dtoa_r+0x2fc>
 8006168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800616e:	e7b8      	b.n	80060e2 <_dtoa_r+0x28a>
 8006170:	3101      	adds	r1, #1
 8006172:	6041      	str	r1, [r0, #4]
 8006174:	0052      	lsls	r2, r2, #1
 8006176:	e7b8      	b.n	80060ea <_dtoa_r+0x292>
 8006178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800617a:	9a01      	ldr	r2, [sp, #4]
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	9b03      	ldr	r3, [sp, #12]
 8006180:	2b0e      	cmp	r3, #14
 8006182:	f200 809d 	bhi.w	80062c0 <_dtoa_r+0x468>
 8006186:	2d00      	cmp	r5, #0
 8006188:	f000 809a 	beq.w	80062c0 <_dtoa_r+0x468>
 800618c:	9b00      	ldr	r3, [sp, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	dd32      	ble.n	80061f8 <_dtoa_r+0x3a0>
 8006192:	4ab7      	ldr	r2, [pc, #732]	; (8006470 <_dtoa_r+0x618>)
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800619c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061a0:	9b00      	ldr	r3, [sp, #0]
 80061a2:	05d8      	lsls	r0, r3, #23
 80061a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80061a8:	d516      	bpl.n	80061d8 <_dtoa_r+0x380>
 80061aa:	4bb2      	ldr	r3, [pc, #712]	; (8006474 <_dtoa_r+0x61c>)
 80061ac:	ec51 0b19 	vmov	r0, r1, d9
 80061b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061b4:	f7fa fb4a 	bl	800084c <__aeabi_ddiv>
 80061b8:	f007 070f 	and.w	r7, r7, #15
 80061bc:	4682      	mov	sl, r0
 80061be:	468b      	mov	fp, r1
 80061c0:	2503      	movs	r5, #3
 80061c2:	4eac      	ldr	r6, [pc, #688]	; (8006474 <_dtoa_r+0x61c>)
 80061c4:	b957      	cbnz	r7, 80061dc <_dtoa_r+0x384>
 80061c6:	4642      	mov	r2, r8
 80061c8:	464b      	mov	r3, r9
 80061ca:	4650      	mov	r0, sl
 80061cc:	4659      	mov	r1, fp
 80061ce:	f7fa fb3d 	bl	800084c <__aeabi_ddiv>
 80061d2:	4682      	mov	sl, r0
 80061d4:	468b      	mov	fp, r1
 80061d6:	e028      	b.n	800622a <_dtoa_r+0x3d2>
 80061d8:	2502      	movs	r5, #2
 80061da:	e7f2      	b.n	80061c2 <_dtoa_r+0x36a>
 80061dc:	07f9      	lsls	r1, r7, #31
 80061de:	d508      	bpl.n	80061f2 <_dtoa_r+0x39a>
 80061e0:	4640      	mov	r0, r8
 80061e2:	4649      	mov	r1, r9
 80061e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061e8:	f7fa fa06 	bl	80005f8 <__aeabi_dmul>
 80061ec:	3501      	adds	r5, #1
 80061ee:	4680      	mov	r8, r0
 80061f0:	4689      	mov	r9, r1
 80061f2:	107f      	asrs	r7, r7, #1
 80061f4:	3608      	adds	r6, #8
 80061f6:	e7e5      	b.n	80061c4 <_dtoa_r+0x36c>
 80061f8:	f000 809b 	beq.w	8006332 <_dtoa_r+0x4da>
 80061fc:	9b00      	ldr	r3, [sp, #0]
 80061fe:	4f9d      	ldr	r7, [pc, #628]	; (8006474 <_dtoa_r+0x61c>)
 8006200:	425e      	negs	r6, r3
 8006202:	4b9b      	ldr	r3, [pc, #620]	; (8006470 <_dtoa_r+0x618>)
 8006204:	f006 020f 	and.w	r2, r6, #15
 8006208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	ec51 0b19 	vmov	r0, r1, d9
 8006214:	f7fa f9f0 	bl	80005f8 <__aeabi_dmul>
 8006218:	1136      	asrs	r6, r6, #4
 800621a:	4682      	mov	sl, r0
 800621c:	468b      	mov	fp, r1
 800621e:	2300      	movs	r3, #0
 8006220:	2502      	movs	r5, #2
 8006222:	2e00      	cmp	r6, #0
 8006224:	d17a      	bne.n	800631c <_dtoa_r+0x4c4>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1d3      	bne.n	80061d2 <_dtoa_r+0x37a>
 800622a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8082 	beq.w	8006336 <_dtoa_r+0x4de>
 8006232:	4b91      	ldr	r3, [pc, #580]	; (8006478 <_dtoa_r+0x620>)
 8006234:	2200      	movs	r2, #0
 8006236:	4650      	mov	r0, sl
 8006238:	4659      	mov	r1, fp
 800623a:	f7fa fc4f 	bl	8000adc <__aeabi_dcmplt>
 800623e:	2800      	cmp	r0, #0
 8006240:	d079      	beq.n	8006336 <_dtoa_r+0x4de>
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d076      	beq.n	8006336 <_dtoa_r+0x4de>
 8006248:	9b02      	ldr	r3, [sp, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	dd36      	ble.n	80062bc <_dtoa_r+0x464>
 800624e:	9b00      	ldr	r3, [sp, #0]
 8006250:	4650      	mov	r0, sl
 8006252:	4659      	mov	r1, fp
 8006254:	1e5f      	subs	r7, r3, #1
 8006256:	2200      	movs	r2, #0
 8006258:	4b88      	ldr	r3, [pc, #544]	; (800647c <_dtoa_r+0x624>)
 800625a:	f7fa f9cd 	bl	80005f8 <__aeabi_dmul>
 800625e:	9e02      	ldr	r6, [sp, #8]
 8006260:	4682      	mov	sl, r0
 8006262:	468b      	mov	fp, r1
 8006264:	3501      	adds	r5, #1
 8006266:	4628      	mov	r0, r5
 8006268:	f7fa f95c 	bl	8000524 <__aeabi_i2d>
 800626c:	4652      	mov	r2, sl
 800626e:	465b      	mov	r3, fp
 8006270:	f7fa f9c2 	bl	80005f8 <__aeabi_dmul>
 8006274:	4b82      	ldr	r3, [pc, #520]	; (8006480 <_dtoa_r+0x628>)
 8006276:	2200      	movs	r2, #0
 8006278:	f7fa f808 	bl	800028c <__adddf3>
 800627c:	46d0      	mov	r8, sl
 800627e:	46d9      	mov	r9, fp
 8006280:	4682      	mov	sl, r0
 8006282:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006286:	2e00      	cmp	r6, #0
 8006288:	d158      	bne.n	800633c <_dtoa_r+0x4e4>
 800628a:	4b7e      	ldr	r3, [pc, #504]	; (8006484 <_dtoa_r+0x62c>)
 800628c:	2200      	movs	r2, #0
 800628e:	4640      	mov	r0, r8
 8006290:	4649      	mov	r1, r9
 8006292:	f7f9 fff9 	bl	8000288 <__aeabi_dsub>
 8006296:	4652      	mov	r2, sl
 8006298:	465b      	mov	r3, fp
 800629a:	4680      	mov	r8, r0
 800629c:	4689      	mov	r9, r1
 800629e:	f7fa fc3b 	bl	8000b18 <__aeabi_dcmpgt>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	f040 8295 	bne.w	80067d2 <_dtoa_r+0x97a>
 80062a8:	4652      	mov	r2, sl
 80062aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062ae:	4640      	mov	r0, r8
 80062b0:	4649      	mov	r1, r9
 80062b2:	f7fa fc13 	bl	8000adc <__aeabi_dcmplt>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	f040 8289 	bne.w	80067ce <_dtoa_r+0x976>
 80062bc:	ec5b ab19 	vmov	sl, fp, d9
 80062c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f2c0 8148 	blt.w	8006558 <_dtoa_r+0x700>
 80062c8:	9a00      	ldr	r2, [sp, #0]
 80062ca:	2a0e      	cmp	r2, #14
 80062cc:	f300 8144 	bgt.w	8006558 <_dtoa_r+0x700>
 80062d0:	4b67      	ldr	r3, [pc, #412]	; (8006470 <_dtoa_r+0x618>)
 80062d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f280 80d5 	bge.w	800648c <_dtoa_r+0x634>
 80062e2:	9b03      	ldr	r3, [sp, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f300 80d1 	bgt.w	800648c <_dtoa_r+0x634>
 80062ea:	f040 826f 	bne.w	80067cc <_dtoa_r+0x974>
 80062ee:	4b65      	ldr	r3, [pc, #404]	; (8006484 <_dtoa_r+0x62c>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	4640      	mov	r0, r8
 80062f4:	4649      	mov	r1, r9
 80062f6:	f7fa f97f 	bl	80005f8 <__aeabi_dmul>
 80062fa:	4652      	mov	r2, sl
 80062fc:	465b      	mov	r3, fp
 80062fe:	f7fa fc01 	bl	8000b04 <__aeabi_dcmpge>
 8006302:	9e03      	ldr	r6, [sp, #12]
 8006304:	4637      	mov	r7, r6
 8006306:	2800      	cmp	r0, #0
 8006308:	f040 8245 	bne.w	8006796 <_dtoa_r+0x93e>
 800630c:	9d01      	ldr	r5, [sp, #4]
 800630e:	2331      	movs	r3, #49	; 0x31
 8006310:	f805 3b01 	strb.w	r3, [r5], #1
 8006314:	9b00      	ldr	r3, [sp, #0]
 8006316:	3301      	adds	r3, #1
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	e240      	b.n	800679e <_dtoa_r+0x946>
 800631c:	07f2      	lsls	r2, r6, #31
 800631e:	d505      	bpl.n	800632c <_dtoa_r+0x4d4>
 8006320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006324:	f7fa f968 	bl	80005f8 <__aeabi_dmul>
 8006328:	3501      	adds	r5, #1
 800632a:	2301      	movs	r3, #1
 800632c:	1076      	asrs	r6, r6, #1
 800632e:	3708      	adds	r7, #8
 8006330:	e777      	b.n	8006222 <_dtoa_r+0x3ca>
 8006332:	2502      	movs	r5, #2
 8006334:	e779      	b.n	800622a <_dtoa_r+0x3d2>
 8006336:	9f00      	ldr	r7, [sp, #0]
 8006338:	9e03      	ldr	r6, [sp, #12]
 800633a:	e794      	b.n	8006266 <_dtoa_r+0x40e>
 800633c:	9901      	ldr	r1, [sp, #4]
 800633e:	4b4c      	ldr	r3, [pc, #304]	; (8006470 <_dtoa_r+0x618>)
 8006340:	4431      	add	r1, r6
 8006342:	910d      	str	r1, [sp, #52]	; 0x34
 8006344:	9908      	ldr	r1, [sp, #32]
 8006346:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800634a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800634e:	2900      	cmp	r1, #0
 8006350:	d043      	beq.n	80063da <_dtoa_r+0x582>
 8006352:	494d      	ldr	r1, [pc, #308]	; (8006488 <_dtoa_r+0x630>)
 8006354:	2000      	movs	r0, #0
 8006356:	f7fa fa79 	bl	800084c <__aeabi_ddiv>
 800635a:	4652      	mov	r2, sl
 800635c:	465b      	mov	r3, fp
 800635e:	f7f9 ff93 	bl	8000288 <__aeabi_dsub>
 8006362:	9d01      	ldr	r5, [sp, #4]
 8006364:	4682      	mov	sl, r0
 8006366:	468b      	mov	fp, r1
 8006368:	4649      	mov	r1, r9
 800636a:	4640      	mov	r0, r8
 800636c:	f7fa fbf4 	bl	8000b58 <__aeabi_d2iz>
 8006370:	4606      	mov	r6, r0
 8006372:	f7fa f8d7 	bl	8000524 <__aeabi_i2d>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4640      	mov	r0, r8
 800637c:	4649      	mov	r1, r9
 800637e:	f7f9 ff83 	bl	8000288 <__aeabi_dsub>
 8006382:	3630      	adds	r6, #48	; 0x30
 8006384:	f805 6b01 	strb.w	r6, [r5], #1
 8006388:	4652      	mov	r2, sl
 800638a:	465b      	mov	r3, fp
 800638c:	4680      	mov	r8, r0
 800638e:	4689      	mov	r9, r1
 8006390:	f7fa fba4 	bl	8000adc <__aeabi_dcmplt>
 8006394:	2800      	cmp	r0, #0
 8006396:	d163      	bne.n	8006460 <_dtoa_r+0x608>
 8006398:	4642      	mov	r2, r8
 800639a:	464b      	mov	r3, r9
 800639c:	4936      	ldr	r1, [pc, #216]	; (8006478 <_dtoa_r+0x620>)
 800639e:	2000      	movs	r0, #0
 80063a0:	f7f9 ff72 	bl	8000288 <__aeabi_dsub>
 80063a4:	4652      	mov	r2, sl
 80063a6:	465b      	mov	r3, fp
 80063a8:	f7fa fb98 	bl	8000adc <__aeabi_dcmplt>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	f040 80b5 	bne.w	800651c <_dtoa_r+0x6c4>
 80063b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063b4:	429d      	cmp	r5, r3
 80063b6:	d081      	beq.n	80062bc <_dtoa_r+0x464>
 80063b8:	4b30      	ldr	r3, [pc, #192]	; (800647c <_dtoa_r+0x624>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	4650      	mov	r0, sl
 80063be:	4659      	mov	r1, fp
 80063c0:	f7fa f91a 	bl	80005f8 <__aeabi_dmul>
 80063c4:	4b2d      	ldr	r3, [pc, #180]	; (800647c <_dtoa_r+0x624>)
 80063c6:	4682      	mov	sl, r0
 80063c8:	468b      	mov	fp, r1
 80063ca:	4640      	mov	r0, r8
 80063cc:	4649      	mov	r1, r9
 80063ce:	2200      	movs	r2, #0
 80063d0:	f7fa f912 	bl	80005f8 <__aeabi_dmul>
 80063d4:	4680      	mov	r8, r0
 80063d6:	4689      	mov	r9, r1
 80063d8:	e7c6      	b.n	8006368 <_dtoa_r+0x510>
 80063da:	4650      	mov	r0, sl
 80063dc:	4659      	mov	r1, fp
 80063de:	f7fa f90b 	bl	80005f8 <__aeabi_dmul>
 80063e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063e4:	9d01      	ldr	r5, [sp, #4]
 80063e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80063e8:	4682      	mov	sl, r0
 80063ea:	468b      	mov	fp, r1
 80063ec:	4649      	mov	r1, r9
 80063ee:	4640      	mov	r0, r8
 80063f0:	f7fa fbb2 	bl	8000b58 <__aeabi_d2iz>
 80063f4:	4606      	mov	r6, r0
 80063f6:	f7fa f895 	bl	8000524 <__aeabi_i2d>
 80063fa:	3630      	adds	r6, #48	; 0x30
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4640      	mov	r0, r8
 8006402:	4649      	mov	r1, r9
 8006404:	f7f9 ff40 	bl	8000288 <__aeabi_dsub>
 8006408:	f805 6b01 	strb.w	r6, [r5], #1
 800640c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800640e:	429d      	cmp	r5, r3
 8006410:	4680      	mov	r8, r0
 8006412:	4689      	mov	r9, r1
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	d124      	bne.n	8006464 <_dtoa_r+0x60c>
 800641a:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <_dtoa_r+0x630>)
 800641c:	4650      	mov	r0, sl
 800641e:	4659      	mov	r1, fp
 8006420:	f7f9 ff34 	bl	800028c <__adddf3>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4640      	mov	r0, r8
 800642a:	4649      	mov	r1, r9
 800642c:	f7fa fb74 	bl	8000b18 <__aeabi_dcmpgt>
 8006430:	2800      	cmp	r0, #0
 8006432:	d173      	bne.n	800651c <_dtoa_r+0x6c4>
 8006434:	4652      	mov	r2, sl
 8006436:	465b      	mov	r3, fp
 8006438:	4913      	ldr	r1, [pc, #76]	; (8006488 <_dtoa_r+0x630>)
 800643a:	2000      	movs	r0, #0
 800643c:	f7f9 ff24 	bl	8000288 <__aeabi_dsub>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4640      	mov	r0, r8
 8006446:	4649      	mov	r1, r9
 8006448:	f7fa fb48 	bl	8000adc <__aeabi_dcmplt>
 800644c:	2800      	cmp	r0, #0
 800644e:	f43f af35 	beq.w	80062bc <_dtoa_r+0x464>
 8006452:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006454:	1e6b      	subs	r3, r5, #1
 8006456:	930f      	str	r3, [sp, #60]	; 0x3c
 8006458:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800645c:	2b30      	cmp	r3, #48	; 0x30
 800645e:	d0f8      	beq.n	8006452 <_dtoa_r+0x5fa>
 8006460:	9700      	str	r7, [sp, #0]
 8006462:	e049      	b.n	80064f8 <_dtoa_r+0x6a0>
 8006464:	4b05      	ldr	r3, [pc, #20]	; (800647c <_dtoa_r+0x624>)
 8006466:	f7fa f8c7 	bl	80005f8 <__aeabi_dmul>
 800646a:	4680      	mov	r8, r0
 800646c:	4689      	mov	r9, r1
 800646e:	e7bd      	b.n	80063ec <_dtoa_r+0x594>
 8006470:	080083d8 	.word	0x080083d8
 8006474:	080083b0 	.word	0x080083b0
 8006478:	3ff00000 	.word	0x3ff00000
 800647c:	40240000 	.word	0x40240000
 8006480:	401c0000 	.word	0x401c0000
 8006484:	40140000 	.word	0x40140000
 8006488:	3fe00000 	.word	0x3fe00000
 800648c:	9d01      	ldr	r5, [sp, #4]
 800648e:	4656      	mov	r6, sl
 8006490:	465f      	mov	r7, fp
 8006492:	4642      	mov	r2, r8
 8006494:	464b      	mov	r3, r9
 8006496:	4630      	mov	r0, r6
 8006498:	4639      	mov	r1, r7
 800649a:	f7fa f9d7 	bl	800084c <__aeabi_ddiv>
 800649e:	f7fa fb5b 	bl	8000b58 <__aeabi_d2iz>
 80064a2:	4682      	mov	sl, r0
 80064a4:	f7fa f83e 	bl	8000524 <__aeabi_i2d>
 80064a8:	4642      	mov	r2, r8
 80064aa:	464b      	mov	r3, r9
 80064ac:	f7fa f8a4 	bl	80005f8 <__aeabi_dmul>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4630      	mov	r0, r6
 80064b6:	4639      	mov	r1, r7
 80064b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80064bc:	f7f9 fee4 	bl	8000288 <__aeabi_dsub>
 80064c0:	f805 6b01 	strb.w	r6, [r5], #1
 80064c4:	9e01      	ldr	r6, [sp, #4]
 80064c6:	9f03      	ldr	r7, [sp, #12]
 80064c8:	1bae      	subs	r6, r5, r6
 80064ca:	42b7      	cmp	r7, r6
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	d135      	bne.n	800653e <_dtoa_r+0x6e6>
 80064d2:	f7f9 fedb 	bl	800028c <__adddf3>
 80064d6:	4642      	mov	r2, r8
 80064d8:	464b      	mov	r3, r9
 80064da:	4606      	mov	r6, r0
 80064dc:	460f      	mov	r7, r1
 80064de:	f7fa fb1b 	bl	8000b18 <__aeabi_dcmpgt>
 80064e2:	b9d0      	cbnz	r0, 800651a <_dtoa_r+0x6c2>
 80064e4:	4642      	mov	r2, r8
 80064e6:	464b      	mov	r3, r9
 80064e8:	4630      	mov	r0, r6
 80064ea:	4639      	mov	r1, r7
 80064ec:	f7fa faec 	bl	8000ac8 <__aeabi_dcmpeq>
 80064f0:	b110      	cbz	r0, 80064f8 <_dtoa_r+0x6a0>
 80064f2:	f01a 0f01 	tst.w	sl, #1
 80064f6:	d110      	bne.n	800651a <_dtoa_r+0x6c2>
 80064f8:	4620      	mov	r0, r4
 80064fa:	ee18 1a10 	vmov	r1, s16
 80064fe:	f000 faf3 	bl	8006ae8 <_Bfree>
 8006502:	2300      	movs	r3, #0
 8006504:	9800      	ldr	r0, [sp, #0]
 8006506:	702b      	strb	r3, [r5, #0]
 8006508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800650a:	3001      	adds	r0, #1
 800650c:	6018      	str	r0, [r3, #0]
 800650e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006510:	2b00      	cmp	r3, #0
 8006512:	f43f acf1 	beq.w	8005ef8 <_dtoa_r+0xa0>
 8006516:	601d      	str	r5, [r3, #0]
 8006518:	e4ee      	b.n	8005ef8 <_dtoa_r+0xa0>
 800651a:	9f00      	ldr	r7, [sp, #0]
 800651c:	462b      	mov	r3, r5
 800651e:	461d      	mov	r5, r3
 8006520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006524:	2a39      	cmp	r2, #57	; 0x39
 8006526:	d106      	bne.n	8006536 <_dtoa_r+0x6de>
 8006528:	9a01      	ldr	r2, [sp, #4]
 800652a:	429a      	cmp	r2, r3
 800652c:	d1f7      	bne.n	800651e <_dtoa_r+0x6c6>
 800652e:	9901      	ldr	r1, [sp, #4]
 8006530:	2230      	movs	r2, #48	; 0x30
 8006532:	3701      	adds	r7, #1
 8006534:	700a      	strb	r2, [r1, #0]
 8006536:	781a      	ldrb	r2, [r3, #0]
 8006538:	3201      	adds	r2, #1
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	e790      	b.n	8006460 <_dtoa_r+0x608>
 800653e:	4ba6      	ldr	r3, [pc, #664]	; (80067d8 <_dtoa_r+0x980>)
 8006540:	2200      	movs	r2, #0
 8006542:	f7fa f859 	bl	80005f8 <__aeabi_dmul>
 8006546:	2200      	movs	r2, #0
 8006548:	2300      	movs	r3, #0
 800654a:	4606      	mov	r6, r0
 800654c:	460f      	mov	r7, r1
 800654e:	f7fa fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006552:	2800      	cmp	r0, #0
 8006554:	d09d      	beq.n	8006492 <_dtoa_r+0x63a>
 8006556:	e7cf      	b.n	80064f8 <_dtoa_r+0x6a0>
 8006558:	9a08      	ldr	r2, [sp, #32]
 800655a:	2a00      	cmp	r2, #0
 800655c:	f000 80d7 	beq.w	800670e <_dtoa_r+0x8b6>
 8006560:	9a06      	ldr	r2, [sp, #24]
 8006562:	2a01      	cmp	r2, #1
 8006564:	f300 80ba 	bgt.w	80066dc <_dtoa_r+0x884>
 8006568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800656a:	2a00      	cmp	r2, #0
 800656c:	f000 80b2 	beq.w	80066d4 <_dtoa_r+0x87c>
 8006570:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006574:	9e07      	ldr	r6, [sp, #28]
 8006576:	9d04      	ldr	r5, [sp, #16]
 8006578:	9a04      	ldr	r2, [sp, #16]
 800657a:	441a      	add	r2, r3
 800657c:	9204      	str	r2, [sp, #16]
 800657e:	9a05      	ldr	r2, [sp, #20]
 8006580:	2101      	movs	r1, #1
 8006582:	441a      	add	r2, r3
 8006584:	4620      	mov	r0, r4
 8006586:	9205      	str	r2, [sp, #20]
 8006588:	f000 fb66 	bl	8006c58 <__i2b>
 800658c:	4607      	mov	r7, r0
 800658e:	2d00      	cmp	r5, #0
 8006590:	dd0c      	ble.n	80065ac <_dtoa_r+0x754>
 8006592:	9b05      	ldr	r3, [sp, #20]
 8006594:	2b00      	cmp	r3, #0
 8006596:	dd09      	ble.n	80065ac <_dtoa_r+0x754>
 8006598:	42ab      	cmp	r3, r5
 800659a:	9a04      	ldr	r2, [sp, #16]
 800659c:	bfa8      	it	ge
 800659e:	462b      	movge	r3, r5
 80065a0:	1ad2      	subs	r2, r2, r3
 80065a2:	9204      	str	r2, [sp, #16]
 80065a4:	9a05      	ldr	r2, [sp, #20]
 80065a6:	1aed      	subs	r5, r5, r3
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	9305      	str	r3, [sp, #20]
 80065ac:	9b07      	ldr	r3, [sp, #28]
 80065ae:	b31b      	cbz	r3, 80065f8 <_dtoa_r+0x7a0>
 80065b0:	9b08      	ldr	r3, [sp, #32]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 80af 	beq.w	8006716 <_dtoa_r+0x8be>
 80065b8:	2e00      	cmp	r6, #0
 80065ba:	dd13      	ble.n	80065e4 <_dtoa_r+0x78c>
 80065bc:	4639      	mov	r1, r7
 80065be:	4632      	mov	r2, r6
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 fc09 	bl	8006dd8 <__pow5mult>
 80065c6:	ee18 2a10 	vmov	r2, s16
 80065ca:	4601      	mov	r1, r0
 80065cc:	4607      	mov	r7, r0
 80065ce:	4620      	mov	r0, r4
 80065d0:	f000 fb58 	bl	8006c84 <__multiply>
 80065d4:	ee18 1a10 	vmov	r1, s16
 80065d8:	4680      	mov	r8, r0
 80065da:	4620      	mov	r0, r4
 80065dc:	f000 fa84 	bl	8006ae8 <_Bfree>
 80065e0:	ee08 8a10 	vmov	s16, r8
 80065e4:	9b07      	ldr	r3, [sp, #28]
 80065e6:	1b9a      	subs	r2, r3, r6
 80065e8:	d006      	beq.n	80065f8 <_dtoa_r+0x7a0>
 80065ea:	ee18 1a10 	vmov	r1, s16
 80065ee:	4620      	mov	r0, r4
 80065f0:	f000 fbf2 	bl	8006dd8 <__pow5mult>
 80065f4:	ee08 0a10 	vmov	s16, r0
 80065f8:	2101      	movs	r1, #1
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 fb2c 	bl	8006c58 <__i2b>
 8006600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006602:	2b00      	cmp	r3, #0
 8006604:	4606      	mov	r6, r0
 8006606:	f340 8088 	ble.w	800671a <_dtoa_r+0x8c2>
 800660a:	461a      	mov	r2, r3
 800660c:	4601      	mov	r1, r0
 800660e:	4620      	mov	r0, r4
 8006610:	f000 fbe2 	bl	8006dd8 <__pow5mult>
 8006614:	9b06      	ldr	r3, [sp, #24]
 8006616:	2b01      	cmp	r3, #1
 8006618:	4606      	mov	r6, r0
 800661a:	f340 8081 	ble.w	8006720 <_dtoa_r+0x8c8>
 800661e:	f04f 0800 	mov.w	r8, #0
 8006622:	6933      	ldr	r3, [r6, #16]
 8006624:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006628:	6918      	ldr	r0, [r3, #16]
 800662a:	f000 fac5 	bl	8006bb8 <__hi0bits>
 800662e:	f1c0 0020 	rsb	r0, r0, #32
 8006632:	9b05      	ldr	r3, [sp, #20]
 8006634:	4418      	add	r0, r3
 8006636:	f010 001f 	ands.w	r0, r0, #31
 800663a:	f000 8092 	beq.w	8006762 <_dtoa_r+0x90a>
 800663e:	f1c0 0320 	rsb	r3, r0, #32
 8006642:	2b04      	cmp	r3, #4
 8006644:	f340 808a 	ble.w	800675c <_dtoa_r+0x904>
 8006648:	f1c0 001c 	rsb	r0, r0, #28
 800664c:	9b04      	ldr	r3, [sp, #16]
 800664e:	4403      	add	r3, r0
 8006650:	9304      	str	r3, [sp, #16]
 8006652:	9b05      	ldr	r3, [sp, #20]
 8006654:	4403      	add	r3, r0
 8006656:	4405      	add	r5, r0
 8006658:	9305      	str	r3, [sp, #20]
 800665a:	9b04      	ldr	r3, [sp, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	dd07      	ble.n	8006670 <_dtoa_r+0x818>
 8006660:	ee18 1a10 	vmov	r1, s16
 8006664:	461a      	mov	r2, r3
 8006666:	4620      	mov	r0, r4
 8006668:	f000 fc10 	bl	8006e8c <__lshift>
 800666c:	ee08 0a10 	vmov	s16, r0
 8006670:	9b05      	ldr	r3, [sp, #20]
 8006672:	2b00      	cmp	r3, #0
 8006674:	dd05      	ble.n	8006682 <_dtoa_r+0x82a>
 8006676:	4631      	mov	r1, r6
 8006678:	461a      	mov	r2, r3
 800667a:	4620      	mov	r0, r4
 800667c:	f000 fc06 	bl	8006e8c <__lshift>
 8006680:	4606      	mov	r6, r0
 8006682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d06e      	beq.n	8006766 <_dtoa_r+0x90e>
 8006688:	ee18 0a10 	vmov	r0, s16
 800668c:	4631      	mov	r1, r6
 800668e:	f000 fc6d 	bl	8006f6c <__mcmp>
 8006692:	2800      	cmp	r0, #0
 8006694:	da67      	bge.n	8006766 <_dtoa_r+0x90e>
 8006696:	9b00      	ldr	r3, [sp, #0]
 8006698:	3b01      	subs	r3, #1
 800669a:	ee18 1a10 	vmov	r1, s16
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	220a      	movs	r2, #10
 80066a2:	2300      	movs	r3, #0
 80066a4:	4620      	mov	r0, r4
 80066a6:	f000 fa41 	bl	8006b2c <__multadd>
 80066aa:	9b08      	ldr	r3, [sp, #32]
 80066ac:	ee08 0a10 	vmov	s16, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 81b1 	beq.w	8006a18 <_dtoa_r+0xbc0>
 80066b6:	2300      	movs	r3, #0
 80066b8:	4639      	mov	r1, r7
 80066ba:	220a      	movs	r2, #10
 80066bc:	4620      	mov	r0, r4
 80066be:	f000 fa35 	bl	8006b2c <__multadd>
 80066c2:	9b02      	ldr	r3, [sp, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	4607      	mov	r7, r0
 80066c8:	f300 808e 	bgt.w	80067e8 <_dtoa_r+0x990>
 80066cc:	9b06      	ldr	r3, [sp, #24]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	dc51      	bgt.n	8006776 <_dtoa_r+0x91e>
 80066d2:	e089      	b.n	80067e8 <_dtoa_r+0x990>
 80066d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80066da:	e74b      	b.n	8006574 <_dtoa_r+0x71c>
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	1e5e      	subs	r6, r3, #1
 80066e0:	9b07      	ldr	r3, [sp, #28]
 80066e2:	42b3      	cmp	r3, r6
 80066e4:	bfbf      	itttt	lt
 80066e6:	9b07      	ldrlt	r3, [sp, #28]
 80066e8:	9607      	strlt	r6, [sp, #28]
 80066ea:	1af2      	sublt	r2, r6, r3
 80066ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80066ee:	bfb6      	itet	lt
 80066f0:	189b      	addlt	r3, r3, r2
 80066f2:	1b9e      	subge	r6, r3, r6
 80066f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80066f6:	9b03      	ldr	r3, [sp, #12]
 80066f8:	bfb8      	it	lt
 80066fa:	2600      	movlt	r6, #0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bfb7      	itett	lt
 8006700:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006704:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006708:	1a9d      	sublt	r5, r3, r2
 800670a:	2300      	movlt	r3, #0
 800670c:	e734      	b.n	8006578 <_dtoa_r+0x720>
 800670e:	9e07      	ldr	r6, [sp, #28]
 8006710:	9d04      	ldr	r5, [sp, #16]
 8006712:	9f08      	ldr	r7, [sp, #32]
 8006714:	e73b      	b.n	800658e <_dtoa_r+0x736>
 8006716:	9a07      	ldr	r2, [sp, #28]
 8006718:	e767      	b.n	80065ea <_dtoa_r+0x792>
 800671a:	9b06      	ldr	r3, [sp, #24]
 800671c:	2b01      	cmp	r3, #1
 800671e:	dc18      	bgt.n	8006752 <_dtoa_r+0x8fa>
 8006720:	f1ba 0f00 	cmp.w	sl, #0
 8006724:	d115      	bne.n	8006752 <_dtoa_r+0x8fa>
 8006726:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800672a:	b993      	cbnz	r3, 8006752 <_dtoa_r+0x8fa>
 800672c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006730:	0d1b      	lsrs	r3, r3, #20
 8006732:	051b      	lsls	r3, r3, #20
 8006734:	b183      	cbz	r3, 8006758 <_dtoa_r+0x900>
 8006736:	9b04      	ldr	r3, [sp, #16]
 8006738:	3301      	adds	r3, #1
 800673a:	9304      	str	r3, [sp, #16]
 800673c:	9b05      	ldr	r3, [sp, #20]
 800673e:	3301      	adds	r3, #1
 8006740:	9305      	str	r3, [sp, #20]
 8006742:	f04f 0801 	mov.w	r8, #1
 8006746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006748:	2b00      	cmp	r3, #0
 800674a:	f47f af6a 	bne.w	8006622 <_dtoa_r+0x7ca>
 800674e:	2001      	movs	r0, #1
 8006750:	e76f      	b.n	8006632 <_dtoa_r+0x7da>
 8006752:	f04f 0800 	mov.w	r8, #0
 8006756:	e7f6      	b.n	8006746 <_dtoa_r+0x8ee>
 8006758:	4698      	mov	r8, r3
 800675a:	e7f4      	b.n	8006746 <_dtoa_r+0x8ee>
 800675c:	f43f af7d 	beq.w	800665a <_dtoa_r+0x802>
 8006760:	4618      	mov	r0, r3
 8006762:	301c      	adds	r0, #28
 8006764:	e772      	b.n	800664c <_dtoa_r+0x7f4>
 8006766:	9b03      	ldr	r3, [sp, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	dc37      	bgt.n	80067dc <_dtoa_r+0x984>
 800676c:	9b06      	ldr	r3, [sp, #24]
 800676e:	2b02      	cmp	r3, #2
 8006770:	dd34      	ble.n	80067dc <_dtoa_r+0x984>
 8006772:	9b03      	ldr	r3, [sp, #12]
 8006774:	9302      	str	r3, [sp, #8]
 8006776:	9b02      	ldr	r3, [sp, #8]
 8006778:	b96b      	cbnz	r3, 8006796 <_dtoa_r+0x93e>
 800677a:	4631      	mov	r1, r6
 800677c:	2205      	movs	r2, #5
 800677e:	4620      	mov	r0, r4
 8006780:	f000 f9d4 	bl	8006b2c <__multadd>
 8006784:	4601      	mov	r1, r0
 8006786:	4606      	mov	r6, r0
 8006788:	ee18 0a10 	vmov	r0, s16
 800678c:	f000 fbee 	bl	8006f6c <__mcmp>
 8006790:	2800      	cmp	r0, #0
 8006792:	f73f adbb 	bgt.w	800630c <_dtoa_r+0x4b4>
 8006796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006798:	9d01      	ldr	r5, [sp, #4]
 800679a:	43db      	mvns	r3, r3
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	f04f 0800 	mov.w	r8, #0
 80067a2:	4631      	mov	r1, r6
 80067a4:	4620      	mov	r0, r4
 80067a6:	f000 f99f 	bl	8006ae8 <_Bfree>
 80067aa:	2f00      	cmp	r7, #0
 80067ac:	f43f aea4 	beq.w	80064f8 <_dtoa_r+0x6a0>
 80067b0:	f1b8 0f00 	cmp.w	r8, #0
 80067b4:	d005      	beq.n	80067c2 <_dtoa_r+0x96a>
 80067b6:	45b8      	cmp	r8, r7
 80067b8:	d003      	beq.n	80067c2 <_dtoa_r+0x96a>
 80067ba:	4641      	mov	r1, r8
 80067bc:	4620      	mov	r0, r4
 80067be:	f000 f993 	bl	8006ae8 <_Bfree>
 80067c2:	4639      	mov	r1, r7
 80067c4:	4620      	mov	r0, r4
 80067c6:	f000 f98f 	bl	8006ae8 <_Bfree>
 80067ca:	e695      	b.n	80064f8 <_dtoa_r+0x6a0>
 80067cc:	2600      	movs	r6, #0
 80067ce:	4637      	mov	r7, r6
 80067d0:	e7e1      	b.n	8006796 <_dtoa_r+0x93e>
 80067d2:	9700      	str	r7, [sp, #0]
 80067d4:	4637      	mov	r7, r6
 80067d6:	e599      	b.n	800630c <_dtoa_r+0x4b4>
 80067d8:	40240000 	.word	0x40240000
 80067dc:	9b08      	ldr	r3, [sp, #32]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80ca 	beq.w	8006978 <_dtoa_r+0xb20>
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	9302      	str	r3, [sp, #8]
 80067e8:	2d00      	cmp	r5, #0
 80067ea:	dd05      	ble.n	80067f8 <_dtoa_r+0x9a0>
 80067ec:	4639      	mov	r1, r7
 80067ee:	462a      	mov	r2, r5
 80067f0:	4620      	mov	r0, r4
 80067f2:	f000 fb4b 	bl	8006e8c <__lshift>
 80067f6:	4607      	mov	r7, r0
 80067f8:	f1b8 0f00 	cmp.w	r8, #0
 80067fc:	d05b      	beq.n	80068b6 <_dtoa_r+0xa5e>
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4620      	mov	r0, r4
 8006802:	f000 f931 	bl	8006a68 <_Balloc>
 8006806:	4605      	mov	r5, r0
 8006808:	b928      	cbnz	r0, 8006816 <_dtoa_r+0x9be>
 800680a:	4b87      	ldr	r3, [pc, #540]	; (8006a28 <_dtoa_r+0xbd0>)
 800680c:	4602      	mov	r2, r0
 800680e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006812:	f7ff bb3b 	b.w	8005e8c <_dtoa_r+0x34>
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	3202      	adds	r2, #2
 800681a:	0092      	lsls	r2, r2, #2
 800681c:	f107 010c 	add.w	r1, r7, #12
 8006820:	300c      	adds	r0, #12
 8006822:	f000 f913 	bl	8006a4c <memcpy>
 8006826:	2201      	movs	r2, #1
 8006828:	4629      	mov	r1, r5
 800682a:	4620      	mov	r0, r4
 800682c:	f000 fb2e 	bl	8006e8c <__lshift>
 8006830:	9b01      	ldr	r3, [sp, #4]
 8006832:	f103 0901 	add.w	r9, r3, #1
 8006836:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800683a:	4413      	add	r3, r2
 800683c:	9305      	str	r3, [sp, #20]
 800683e:	f00a 0301 	and.w	r3, sl, #1
 8006842:	46b8      	mov	r8, r7
 8006844:	9304      	str	r3, [sp, #16]
 8006846:	4607      	mov	r7, r0
 8006848:	4631      	mov	r1, r6
 800684a:	ee18 0a10 	vmov	r0, s16
 800684e:	f7ff fa75 	bl	8005d3c <quorem>
 8006852:	4641      	mov	r1, r8
 8006854:	9002      	str	r0, [sp, #8]
 8006856:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800685a:	ee18 0a10 	vmov	r0, s16
 800685e:	f000 fb85 	bl	8006f6c <__mcmp>
 8006862:	463a      	mov	r2, r7
 8006864:	9003      	str	r0, [sp, #12]
 8006866:	4631      	mov	r1, r6
 8006868:	4620      	mov	r0, r4
 800686a:	f000 fb9b 	bl	8006fa4 <__mdiff>
 800686e:	68c2      	ldr	r2, [r0, #12]
 8006870:	f109 3bff 	add.w	fp, r9, #4294967295
 8006874:	4605      	mov	r5, r0
 8006876:	bb02      	cbnz	r2, 80068ba <_dtoa_r+0xa62>
 8006878:	4601      	mov	r1, r0
 800687a:	ee18 0a10 	vmov	r0, s16
 800687e:	f000 fb75 	bl	8006f6c <__mcmp>
 8006882:	4602      	mov	r2, r0
 8006884:	4629      	mov	r1, r5
 8006886:	4620      	mov	r0, r4
 8006888:	9207      	str	r2, [sp, #28]
 800688a:	f000 f92d 	bl	8006ae8 <_Bfree>
 800688e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006892:	ea43 0102 	orr.w	r1, r3, r2
 8006896:	9b04      	ldr	r3, [sp, #16]
 8006898:	430b      	orrs	r3, r1
 800689a:	464d      	mov	r5, r9
 800689c:	d10f      	bne.n	80068be <_dtoa_r+0xa66>
 800689e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068a2:	d02a      	beq.n	80068fa <_dtoa_r+0xaa2>
 80068a4:	9b03      	ldr	r3, [sp, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	dd02      	ble.n	80068b0 <_dtoa_r+0xa58>
 80068aa:	9b02      	ldr	r3, [sp, #8]
 80068ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80068b0:	f88b a000 	strb.w	sl, [fp]
 80068b4:	e775      	b.n	80067a2 <_dtoa_r+0x94a>
 80068b6:	4638      	mov	r0, r7
 80068b8:	e7ba      	b.n	8006830 <_dtoa_r+0x9d8>
 80068ba:	2201      	movs	r2, #1
 80068bc:	e7e2      	b.n	8006884 <_dtoa_r+0xa2c>
 80068be:	9b03      	ldr	r3, [sp, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	db04      	blt.n	80068ce <_dtoa_r+0xa76>
 80068c4:	9906      	ldr	r1, [sp, #24]
 80068c6:	430b      	orrs	r3, r1
 80068c8:	9904      	ldr	r1, [sp, #16]
 80068ca:	430b      	orrs	r3, r1
 80068cc:	d122      	bne.n	8006914 <_dtoa_r+0xabc>
 80068ce:	2a00      	cmp	r2, #0
 80068d0:	ddee      	ble.n	80068b0 <_dtoa_r+0xa58>
 80068d2:	ee18 1a10 	vmov	r1, s16
 80068d6:	2201      	movs	r2, #1
 80068d8:	4620      	mov	r0, r4
 80068da:	f000 fad7 	bl	8006e8c <__lshift>
 80068de:	4631      	mov	r1, r6
 80068e0:	ee08 0a10 	vmov	s16, r0
 80068e4:	f000 fb42 	bl	8006f6c <__mcmp>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	dc03      	bgt.n	80068f4 <_dtoa_r+0xa9c>
 80068ec:	d1e0      	bne.n	80068b0 <_dtoa_r+0xa58>
 80068ee:	f01a 0f01 	tst.w	sl, #1
 80068f2:	d0dd      	beq.n	80068b0 <_dtoa_r+0xa58>
 80068f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068f8:	d1d7      	bne.n	80068aa <_dtoa_r+0xa52>
 80068fa:	2339      	movs	r3, #57	; 0x39
 80068fc:	f88b 3000 	strb.w	r3, [fp]
 8006900:	462b      	mov	r3, r5
 8006902:	461d      	mov	r5, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800690a:	2a39      	cmp	r2, #57	; 0x39
 800690c:	d071      	beq.n	80069f2 <_dtoa_r+0xb9a>
 800690e:	3201      	adds	r2, #1
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	e746      	b.n	80067a2 <_dtoa_r+0x94a>
 8006914:	2a00      	cmp	r2, #0
 8006916:	dd07      	ble.n	8006928 <_dtoa_r+0xad0>
 8006918:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800691c:	d0ed      	beq.n	80068fa <_dtoa_r+0xaa2>
 800691e:	f10a 0301 	add.w	r3, sl, #1
 8006922:	f88b 3000 	strb.w	r3, [fp]
 8006926:	e73c      	b.n	80067a2 <_dtoa_r+0x94a>
 8006928:	9b05      	ldr	r3, [sp, #20]
 800692a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800692e:	4599      	cmp	r9, r3
 8006930:	d047      	beq.n	80069c2 <_dtoa_r+0xb6a>
 8006932:	ee18 1a10 	vmov	r1, s16
 8006936:	2300      	movs	r3, #0
 8006938:	220a      	movs	r2, #10
 800693a:	4620      	mov	r0, r4
 800693c:	f000 f8f6 	bl	8006b2c <__multadd>
 8006940:	45b8      	cmp	r8, r7
 8006942:	ee08 0a10 	vmov	s16, r0
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	f04f 020a 	mov.w	r2, #10
 800694e:	4641      	mov	r1, r8
 8006950:	4620      	mov	r0, r4
 8006952:	d106      	bne.n	8006962 <_dtoa_r+0xb0a>
 8006954:	f000 f8ea 	bl	8006b2c <__multadd>
 8006958:	4680      	mov	r8, r0
 800695a:	4607      	mov	r7, r0
 800695c:	f109 0901 	add.w	r9, r9, #1
 8006960:	e772      	b.n	8006848 <_dtoa_r+0x9f0>
 8006962:	f000 f8e3 	bl	8006b2c <__multadd>
 8006966:	4639      	mov	r1, r7
 8006968:	4680      	mov	r8, r0
 800696a:	2300      	movs	r3, #0
 800696c:	220a      	movs	r2, #10
 800696e:	4620      	mov	r0, r4
 8006970:	f000 f8dc 	bl	8006b2c <__multadd>
 8006974:	4607      	mov	r7, r0
 8006976:	e7f1      	b.n	800695c <_dtoa_r+0xb04>
 8006978:	9b03      	ldr	r3, [sp, #12]
 800697a:	9302      	str	r3, [sp, #8]
 800697c:	9d01      	ldr	r5, [sp, #4]
 800697e:	ee18 0a10 	vmov	r0, s16
 8006982:	4631      	mov	r1, r6
 8006984:	f7ff f9da 	bl	8005d3c <quorem>
 8006988:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800698c:	9b01      	ldr	r3, [sp, #4]
 800698e:	f805 ab01 	strb.w	sl, [r5], #1
 8006992:	1aea      	subs	r2, r5, r3
 8006994:	9b02      	ldr	r3, [sp, #8]
 8006996:	4293      	cmp	r3, r2
 8006998:	dd09      	ble.n	80069ae <_dtoa_r+0xb56>
 800699a:	ee18 1a10 	vmov	r1, s16
 800699e:	2300      	movs	r3, #0
 80069a0:	220a      	movs	r2, #10
 80069a2:	4620      	mov	r0, r4
 80069a4:	f000 f8c2 	bl	8006b2c <__multadd>
 80069a8:	ee08 0a10 	vmov	s16, r0
 80069ac:	e7e7      	b.n	800697e <_dtoa_r+0xb26>
 80069ae:	9b02      	ldr	r3, [sp, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bfc8      	it	gt
 80069b4:	461d      	movgt	r5, r3
 80069b6:	9b01      	ldr	r3, [sp, #4]
 80069b8:	bfd8      	it	le
 80069ba:	2501      	movle	r5, #1
 80069bc:	441d      	add	r5, r3
 80069be:	f04f 0800 	mov.w	r8, #0
 80069c2:	ee18 1a10 	vmov	r1, s16
 80069c6:	2201      	movs	r2, #1
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fa5f 	bl	8006e8c <__lshift>
 80069ce:	4631      	mov	r1, r6
 80069d0:	ee08 0a10 	vmov	s16, r0
 80069d4:	f000 faca 	bl	8006f6c <__mcmp>
 80069d8:	2800      	cmp	r0, #0
 80069da:	dc91      	bgt.n	8006900 <_dtoa_r+0xaa8>
 80069dc:	d102      	bne.n	80069e4 <_dtoa_r+0xb8c>
 80069de:	f01a 0f01 	tst.w	sl, #1
 80069e2:	d18d      	bne.n	8006900 <_dtoa_r+0xaa8>
 80069e4:	462b      	mov	r3, r5
 80069e6:	461d      	mov	r5, r3
 80069e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069ec:	2a30      	cmp	r2, #48	; 0x30
 80069ee:	d0fa      	beq.n	80069e6 <_dtoa_r+0xb8e>
 80069f0:	e6d7      	b.n	80067a2 <_dtoa_r+0x94a>
 80069f2:	9a01      	ldr	r2, [sp, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d184      	bne.n	8006902 <_dtoa_r+0xaaa>
 80069f8:	9b00      	ldr	r3, [sp, #0]
 80069fa:	3301      	adds	r3, #1
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	2331      	movs	r3, #49	; 0x31
 8006a00:	7013      	strb	r3, [r2, #0]
 8006a02:	e6ce      	b.n	80067a2 <_dtoa_r+0x94a>
 8006a04:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <_dtoa_r+0xbd4>)
 8006a06:	f7ff ba95 	b.w	8005f34 <_dtoa_r+0xdc>
 8006a0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f47f aa6e 	bne.w	8005eee <_dtoa_r+0x96>
 8006a12:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <_dtoa_r+0xbd8>)
 8006a14:	f7ff ba8e 	b.w	8005f34 <_dtoa_r+0xdc>
 8006a18:	9b02      	ldr	r3, [sp, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dcae      	bgt.n	800697c <_dtoa_r+0xb24>
 8006a1e:	9b06      	ldr	r3, [sp, #24]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	f73f aea8 	bgt.w	8006776 <_dtoa_r+0x91e>
 8006a26:	e7a9      	b.n	800697c <_dtoa_r+0xb24>
 8006a28:	08008343 	.word	0x08008343
 8006a2c:	080082a0 	.word	0x080082a0
 8006a30:	080082c4 	.word	0x080082c4

08006a34 <_localeconv_r>:
 8006a34:	4800      	ldr	r0, [pc, #0]	; (8006a38 <_localeconv_r+0x4>)
 8006a36:	4770      	bx	lr
 8006a38:	20000160 	.word	0x20000160

08006a3c <malloc>:
 8006a3c:	4b02      	ldr	r3, [pc, #8]	; (8006a48 <malloc+0xc>)
 8006a3e:	4601      	mov	r1, r0
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	f000 bc17 	b.w	8007274 <_malloc_r>
 8006a46:	bf00      	nop
 8006a48:	2000000c 	.word	0x2000000c

08006a4c <memcpy>:
 8006a4c:	440a      	add	r2, r1
 8006a4e:	4291      	cmp	r1, r2
 8006a50:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a54:	d100      	bne.n	8006a58 <memcpy+0xc>
 8006a56:	4770      	bx	lr
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a62:	4291      	cmp	r1, r2
 8006a64:	d1f9      	bne.n	8006a5a <memcpy+0xe>
 8006a66:	bd10      	pop	{r4, pc}

08006a68 <_Balloc>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	460d      	mov	r5, r1
 8006a70:	b976      	cbnz	r6, 8006a90 <_Balloc+0x28>
 8006a72:	2010      	movs	r0, #16
 8006a74:	f7ff ffe2 	bl	8006a3c <malloc>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	6260      	str	r0, [r4, #36]	; 0x24
 8006a7c:	b920      	cbnz	r0, 8006a88 <_Balloc+0x20>
 8006a7e:	4b18      	ldr	r3, [pc, #96]	; (8006ae0 <_Balloc+0x78>)
 8006a80:	4818      	ldr	r0, [pc, #96]	; (8006ae4 <_Balloc+0x7c>)
 8006a82:	2166      	movs	r1, #102	; 0x66
 8006a84:	f000 fdd6 	bl	8007634 <__assert_func>
 8006a88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a8c:	6006      	str	r6, [r0, #0]
 8006a8e:	60c6      	str	r6, [r0, #12]
 8006a90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a92:	68f3      	ldr	r3, [r6, #12]
 8006a94:	b183      	cbz	r3, 8006ab8 <_Balloc+0x50>
 8006a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a9e:	b9b8      	cbnz	r0, 8006ad0 <_Balloc+0x68>
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	fa01 f605 	lsl.w	r6, r1, r5
 8006aa6:	1d72      	adds	r2, r6, #5
 8006aa8:	0092      	lsls	r2, r2, #2
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f000 fb60 	bl	8007170 <_calloc_r>
 8006ab0:	b160      	cbz	r0, 8006acc <_Balloc+0x64>
 8006ab2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ab6:	e00e      	b.n	8006ad6 <_Balloc+0x6e>
 8006ab8:	2221      	movs	r2, #33	; 0x21
 8006aba:	2104      	movs	r1, #4
 8006abc:	4620      	mov	r0, r4
 8006abe:	f000 fb57 	bl	8007170 <_calloc_r>
 8006ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ac4:	60f0      	str	r0, [r6, #12]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e4      	bne.n	8006a96 <_Balloc+0x2e>
 8006acc:	2000      	movs	r0, #0
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	6802      	ldr	r2, [r0, #0]
 8006ad2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006adc:	e7f7      	b.n	8006ace <_Balloc+0x66>
 8006ade:	bf00      	nop
 8006ae0:	080082d1 	.word	0x080082d1
 8006ae4:	08008354 	.word	0x08008354

08006ae8 <_Bfree>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006aec:	4605      	mov	r5, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	b976      	cbnz	r6, 8006b10 <_Bfree+0x28>
 8006af2:	2010      	movs	r0, #16
 8006af4:	f7ff ffa2 	bl	8006a3c <malloc>
 8006af8:	4602      	mov	r2, r0
 8006afa:	6268      	str	r0, [r5, #36]	; 0x24
 8006afc:	b920      	cbnz	r0, 8006b08 <_Bfree+0x20>
 8006afe:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <_Bfree+0x3c>)
 8006b00:	4809      	ldr	r0, [pc, #36]	; (8006b28 <_Bfree+0x40>)
 8006b02:	218a      	movs	r1, #138	; 0x8a
 8006b04:	f000 fd96 	bl	8007634 <__assert_func>
 8006b08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b0c:	6006      	str	r6, [r0, #0]
 8006b0e:	60c6      	str	r6, [r0, #12]
 8006b10:	b13c      	cbz	r4, 8006b22 <_Bfree+0x3a>
 8006b12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b14:	6862      	ldr	r2, [r4, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b1c:	6021      	str	r1, [r4, #0]
 8006b1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	080082d1 	.word	0x080082d1
 8006b28:	08008354 	.word	0x08008354

08006b2c <__multadd>:
 8006b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b30:	690d      	ldr	r5, [r1, #16]
 8006b32:	4607      	mov	r7, r0
 8006b34:	460c      	mov	r4, r1
 8006b36:	461e      	mov	r6, r3
 8006b38:	f101 0c14 	add.w	ip, r1, #20
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	f8dc 3000 	ldr.w	r3, [ip]
 8006b42:	b299      	uxth	r1, r3
 8006b44:	fb02 6101 	mla	r1, r2, r1, r6
 8006b48:	0c1e      	lsrs	r6, r3, #16
 8006b4a:	0c0b      	lsrs	r3, r1, #16
 8006b4c:	fb02 3306 	mla	r3, r2, r6, r3
 8006b50:	b289      	uxth	r1, r1
 8006b52:	3001      	adds	r0, #1
 8006b54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b58:	4285      	cmp	r5, r0
 8006b5a:	f84c 1b04 	str.w	r1, [ip], #4
 8006b5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b62:	dcec      	bgt.n	8006b3e <__multadd+0x12>
 8006b64:	b30e      	cbz	r6, 8006baa <__multadd+0x7e>
 8006b66:	68a3      	ldr	r3, [r4, #8]
 8006b68:	42ab      	cmp	r3, r5
 8006b6a:	dc19      	bgt.n	8006ba0 <__multadd+0x74>
 8006b6c:	6861      	ldr	r1, [r4, #4]
 8006b6e:	4638      	mov	r0, r7
 8006b70:	3101      	adds	r1, #1
 8006b72:	f7ff ff79 	bl	8006a68 <_Balloc>
 8006b76:	4680      	mov	r8, r0
 8006b78:	b928      	cbnz	r0, 8006b86 <__multadd+0x5a>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <__multadd+0x84>)
 8006b7e:	480d      	ldr	r0, [pc, #52]	; (8006bb4 <__multadd+0x88>)
 8006b80:	21b5      	movs	r1, #181	; 0xb5
 8006b82:	f000 fd57 	bl	8007634 <__assert_func>
 8006b86:	6922      	ldr	r2, [r4, #16]
 8006b88:	3202      	adds	r2, #2
 8006b8a:	f104 010c 	add.w	r1, r4, #12
 8006b8e:	0092      	lsls	r2, r2, #2
 8006b90:	300c      	adds	r0, #12
 8006b92:	f7ff ff5b 	bl	8006a4c <memcpy>
 8006b96:	4621      	mov	r1, r4
 8006b98:	4638      	mov	r0, r7
 8006b9a:	f7ff ffa5 	bl	8006ae8 <_Bfree>
 8006b9e:	4644      	mov	r4, r8
 8006ba0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ba4:	3501      	adds	r5, #1
 8006ba6:	615e      	str	r6, [r3, #20]
 8006ba8:	6125      	str	r5, [r4, #16]
 8006baa:	4620      	mov	r0, r4
 8006bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bb0:	08008343 	.word	0x08008343
 8006bb4:	08008354 	.word	0x08008354

08006bb8 <__hi0bits>:
 8006bb8:	0c03      	lsrs	r3, r0, #16
 8006bba:	041b      	lsls	r3, r3, #16
 8006bbc:	b9d3      	cbnz	r3, 8006bf4 <__hi0bits+0x3c>
 8006bbe:	0400      	lsls	r0, r0, #16
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006bc6:	bf04      	itt	eq
 8006bc8:	0200      	lsleq	r0, r0, #8
 8006bca:	3308      	addeq	r3, #8
 8006bcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006bd0:	bf04      	itt	eq
 8006bd2:	0100      	lsleq	r0, r0, #4
 8006bd4:	3304      	addeq	r3, #4
 8006bd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006bda:	bf04      	itt	eq
 8006bdc:	0080      	lsleq	r0, r0, #2
 8006bde:	3302      	addeq	r3, #2
 8006be0:	2800      	cmp	r0, #0
 8006be2:	db05      	blt.n	8006bf0 <__hi0bits+0x38>
 8006be4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006be8:	f103 0301 	add.w	r3, r3, #1
 8006bec:	bf08      	it	eq
 8006bee:	2320      	moveq	r3, #32
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	4770      	bx	lr
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	e7e4      	b.n	8006bc2 <__hi0bits+0xa>

08006bf8 <__lo0bits>:
 8006bf8:	6803      	ldr	r3, [r0, #0]
 8006bfa:	f013 0207 	ands.w	r2, r3, #7
 8006bfe:	4601      	mov	r1, r0
 8006c00:	d00b      	beq.n	8006c1a <__lo0bits+0x22>
 8006c02:	07da      	lsls	r2, r3, #31
 8006c04:	d423      	bmi.n	8006c4e <__lo0bits+0x56>
 8006c06:	0798      	lsls	r0, r3, #30
 8006c08:	bf49      	itett	mi
 8006c0a:	085b      	lsrmi	r3, r3, #1
 8006c0c:	089b      	lsrpl	r3, r3, #2
 8006c0e:	2001      	movmi	r0, #1
 8006c10:	600b      	strmi	r3, [r1, #0]
 8006c12:	bf5c      	itt	pl
 8006c14:	600b      	strpl	r3, [r1, #0]
 8006c16:	2002      	movpl	r0, #2
 8006c18:	4770      	bx	lr
 8006c1a:	b298      	uxth	r0, r3
 8006c1c:	b9a8      	cbnz	r0, 8006c4a <__lo0bits+0x52>
 8006c1e:	0c1b      	lsrs	r3, r3, #16
 8006c20:	2010      	movs	r0, #16
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	b90a      	cbnz	r2, 8006c2a <__lo0bits+0x32>
 8006c26:	3008      	adds	r0, #8
 8006c28:	0a1b      	lsrs	r3, r3, #8
 8006c2a:	071a      	lsls	r2, r3, #28
 8006c2c:	bf04      	itt	eq
 8006c2e:	091b      	lsreq	r3, r3, #4
 8006c30:	3004      	addeq	r0, #4
 8006c32:	079a      	lsls	r2, r3, #30
 8006c34:	bf04      	itt	eq
 8006c36:	089b      	lsreq	r3, r3, #2
 8006c38:	3002      	addeq	r0, #2
 8006c3a:	07da      	lsls	r2, r3, #31
 8006c3c:	d403      	bmi.n	8006c46 <__lo0bits+0x4e>
 8006c3e:	085b      	lsrs	r3, r3, #1
 8006c40:	f100 0001 	add.w	r0, r0, #1
 8006c44:	d005      	beq.n	8006c52 <__lo0bits+0x5a>
 8006c46:	600b      	str	r3, [r1, #0]
 8006c48:	4770      	bx	lr
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	e7e9      	b.n	8006c22 <__lo0bits+0x2a>
 8006c4e:	2000      	movs	r0, #0
 8006c50:	4770      	bx	lr
 8006c52:	2020      	movs	r0, #32
 8006c54:	4770      	bx	lr
	...

08006c58 <__i2b>:
 8006c58:	b510      	push	{r4, lr}
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	f7ff ff03 	bl	8006a68 <_Balloc>
 8006c62:	4602      	mov	r2, r0
 8006c64:	b928      	cbnz	r0, 8006c72 <__i2b+0x1a>
 8006c66:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <__i2b+0x24>)
 8006c68:	4805      	ldr	r0, [pc, #20]	; (8006c80 <__i2b+0x28>)
 8006c6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006c6e:	f000 fce1 	bl	8007634 <__assert_func>
 8006c72:	2301      	movs	r3, #1
 8006c74:	6144      	str	r4, [r0, #20]
 8006c76:	6103      	str	r3, [r0, #16]
 8006c78:	bd10      	pop	{r4, pc}
 8006c7a:	bf00      	nop
 8006c7c:	08008343 	.word	0x08008343
 8006c80:	08008354 	.word	0x08008354

08006c84 <__multiply>:
 8006c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c88:	4691      	mov	r9, r2
 8006c8a:	690a      	ldr	r2, [r1, #16]
 8006c8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	bfb8      	it	lt
 8006c94:	460b      	movlt	r3, r1
 8006c96:	460c      	mov	r4, r1
 8006c98:	bfbc      	itt	lt
 8006c9a:	464c      	movlt	r4, r9
 8006c9c:	4699      	movlt	r9, r3
 8006c9e:	6927      	ldr	r7, [r4, #16]
 8006ca0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ca4:	68a3      	ldr	r3, [r4, #8]
 8006ca6:	6861      	ldr	r1, [r4, #4]
 8006ca8:	eb07 060a 	add.w	r6, r7, sl
 8006cac:	42b3      	cmp	r3, r6
 8006cae:	b085      	sub	sp, #20
 8006cb0:	bfb8      	it	lt
 8006cb2:	3101      	addlt	r1, #1
 8006cb4:	f7ff fed8 	bl	8006a68 <_Balloc>
 8006cb8:	b930      	cbnz	r0, 8006cc8 <__multiply+0x44>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	4b44      	ldr	r3, [pc, #272]	; (8006dd0 <__multiply+0x14c>)
 8006cbe:	4845      	ldr	r0, [pc, #276]	; (8006dd4 <__multiply+0x150>)
 8006cc0:	f240 115d 	movw	r1, #349	; 0x15d
 8006cc4:	f000 fcb6 	bl	8007634 <__assert_func>
 8006cc8:	f100 0514 	add.w	r5, r0, #20
 8006ccc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4543      	cmp	r3, r8
 8006cd6:	d321      	bcc.n	8006d1c <__multiply+0x98>
 8006cd8:	f104 0314 	add.w	r3, r4, #20
 8006cdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ce0:	f109 0314 	add.w	r3, r9, #20
 8006ce4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ce8:	9202      	str	r2, [sp, #8]
 8006cea:	1b3a      	subs	r2, r7, r4
 8006cec:	3a15      	subs	r2, #21
 8006cee:	f022 0203 	bic.w	r2, r2, #3
 8006cf2:	3204      	adds	r2, #4
 8006cf4:	f104 0115 	add.w	r1, r4, #21
 8006cf8:	428f      	cmp	r7, r1
 8006cfa:	bf38      	it	cc
 8006cfc:	2204      	movcc	r2, #4
 8006cfe:	9201      	str	r2, [sp, #4]
 8006d00:	9a02      	ldr	r2, [sp, #8]
 8006d02:	9303      	str	r3, [sp, #12]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d80c      	bhi.n	8006d22 <__multiply+0x9e>
 8006d08:	2e00      	cmp	r6, #0
 8006d0a:	dd03      	ble.n	8006d14 <__multiply+0x90>
 8006d0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d05a      	beq.n	8006dca <__multiply+0x146>
 8006d14:	6106      	str	r6, [r0, #16]
 8006d16:	b005      	add	sp, #20
 8006d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1c:	f843 2b04 	str.w	r2, [r3], #4
 8006d20:	e7d8      	b.n	8006cd4 <__multiply+0x50>
 8006d22:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d26:	f1ba 0f00 	cmp.w	sl, #0
 8006d2a:	d024      	beq.n	8006d76 <__multiply+0xf2>
 8006d2c:	f104 0e14 	add.w	lr, r4, #20
 8006d30:	46a9      	mov	r9, r5
 8006d32:	f04f 0c00 	mov.w	ip, #0
 8006d36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d3a:	f8d9 1000 	ldr.w	r1, [r9]
 8006d3e:	fa1f fb82 	uxth.w	fp, r2
 8006d42:	b289      	uxth	r1, r1
 8006d44:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d4c:	f8d9 2000 	ldr.w	r2, [r9]
 8006d50:	4461      	add	r1, ip
 8006d52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d56:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d5e:	b289      	uxth	r1, r1
 8006d60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d64:	4577      	cmp	r7, lr
 8006d66:	f849 1b04 	str.w	r1, [r9], #4
 8006d6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d6e:	d8e2      	bhi.n	8006d36 <__multiply+0xb2>
 8006d70:	9a01      	ldr	r2, [sp, #4]
 8006d72:	f845 c002 	str.w	ip, [r5, r2]
 8006d76:	9a03      	ldr	r2, [sp, #12]
 8006d78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	f1b9 0f00 	cmp.w	r9, #0
 8006d82:	d020      	beq.n	8006dc6 <__multiply+0x142>
 8006d84:	6829      	ldr	r1, [r5, #0]
 8006d86:	f104 0c14 	add.w	ip, r4, #20
 8006d8a:	46ae      	mov	lr, r5
 8006d8c:	f04f 0a00 	mov.w	sl, #0
 8006d90:	f8bc b000 	ldrh.w	fp, [ip]
 8006d94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d98:	fb09 220b 	mla	r2, r9, fp, r2
 8006d9c:	4492      	add	sl, r2
 8006d9e:	b289      	uxth	r1, r1
 8006da0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006da4:	f84e 1b04 	str.w	r1, [lr], #4
 8006da8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006dac:	f8be 1000 	ldrh.w	r1, [lr]
 8006db0:	0c12      	lsrs	r2, r2, #16
 8006db2:	fb09 1102 	mla	r1, r9, r2, r1
 8006db6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006dba:	4567      	cmp	r7, ip
 8006dbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006dc0:	d8e6      	bhi.n	8006d90 <__multiply+0x10c>
 8006dc2:	9a01      	ldr	r2, [sp, #4]
 8006dc4:	50a9      	str	r1, [r5, r2]
 8006dc6:	3504      	adds	r5, #4
 8006dc8:	e79a      	b.n	8006d00 <__multiply+0x7c>
 8006dca:	3e01      	subs	r6, #1
 8006dcc:	e79c      	b.n	8006d08 <__multiply+0x84>
 8006dce:	bf00      	nop
 8006dd0:	08008343 	.word	0x08008343
 8006dd4:	08008354 	.word	0x08008354

08006dd8 <__pow5mult>:
 8006dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ddc:	4615      	mov	r5, r2
 8006dde:	f012 0203 	ands.w	r2, r2, #3
 8006de2:	4606      	mov	r6, r0
 8006de4:	460f      	mov	r7, r1
 8006de6:	d007      	beq.n	8006df8 <__pow5mult+0x20>
 8006de8:	4c25      	ldr	r4, [pc, #148]	; (8006e80 <__pow5mult+0xa8>)
 8006dea:	3a01      	subs	r2, #1
 8006dec:	2300      	movs	r3, #0
 8006dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006df2:	f7ff fe9b 	bl	8006b2c <__multadd>
 8006df6:	4607      	mov	r7, r0
 8006df8:	10ad      	asrs	r5, r5, #2
 8006dfa:	d03d      	beq.n	8006e78 <__pow5mult+0xa0>
 8006dfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006dfe:	b97c      	cbnz	r4, 8006e20 <__pow5mult+0x48>
 8006e00:	2010      	movs	r0, #16
 8006e02:	f7ff fe1b 	bl	8006a3c <malloc>
 8006e06:	4602      	mov	r2, r0
 8006e08:	6270      	str	r0, [r6, #36]	; 0x24
 8006e0a:	b928      	cbnz	r0, 8006e18 <__pow5mult+0x40>
 8006e0c:	4b1d      	ldr	r3, [pc, #116]	; (8006e84 <__pow5mult+0xac>)
 8006e0e:	481e      	ldr	r0, [pc, #120]	; (8006e88 <__pow5mult+0xb0>)
 8006e10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006e14:	f000 fc0e 	bl	8007634 <__assert_func>
 8006e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e1c:	6004      	str	r4, [r0, #0]
 8006e1e:	60c4      	str	r4, [r0, #12]
 8006e20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e28:	b94c      	cbnz	r4, 8006e3e <__pow5mult+0x66>
 8006e2a:	f240 2171 	movw	r1, #625	; 0x271
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f7ff ff12 	bl	8006c58 <__i2b>
 8006e34:	2300      	movs	r3, #0
 8006e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	6003      	str	r3, [r0, #0]
 8006e3e:	f04f 0900 	mov.w	r9, #0
 8006e42:	07eb      	lsls	r3, r5, #31
 8006e44:	d50a      	bpl.n	8006e5c <__pow5mult+0x84>
 8006e46:	4639      	mov	r1, r7
 8006e48:	4622      	mov	r2, r4
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	f7ff ff1a 	bl	8006c84 <__multiply>
 8006e50:	4639      	mov	r1, r7
 8006e52:	4680      	mov	r8, r0
 8006e54:	4630      	mov	r0, r6
 8006e56:	f7ff fe47 	bl	8006ae8 <_Bfree>
 8006e5a:	4647      	mov	r7, r8
 8006e5c:	106d      	asrs	r5, r5, #1
 8006e5e:	d00b      	beq.n	8006e78 <__pow5mult+0xa0>
 8006e60:	6820      	ldr	r0, [r4, #0]
 8006e62:	b938      	cbnz	r0, 8006e74 <__pow5mult+0x9c>
 8006e64:	4622      	mov	r2, r4
 8006e66:	4621      	mov	r1, r4
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7ff ff0b 	bl	8006c84 <__multiply>
 8006e6e:	6020      	str	r0, [r4, #0]
 8006e70:	f8c0 9000 	str.w	r9, [r0]
 8006e74:	4604      	mov	r4, r0
 8006e76:	e7e4      	b.n	8006e42 <__pow5mult+0x6a>
 8006e78:	4638      	mov	r0, r7
 8006e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7e:	bf00      	nop
 8006e80:	080084a0 	.word	0x080084a0
 8006e84:	080082d1 	.word	0x080082d1
 8006e88:	08008354 	.word	0x08008354

08006e8c <__lshift>:
 8006e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e90:	460c      	mov	r4, r1
 8006e92:	6849      	ldr	r1, [r1, #4]
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e9a:	68a3      	ldr	r3, [r4, #8]
 8006e9c:	4607      	mov	r7, r0
 8006e9e:	4691      	mov	r9, r2
 8006ea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ea4:	f108 0601 	add.w	r6, r8, #1
 8006ea8:	42b3      	cmp	r3, r6
 8006eaa:	db0b      	blt.n	8006ec4 <__lshift+0x38>
 8006eac:	4638      	mov	r0, r7
 8006eae:	f7ff fddb 	bl	8006a68 <_Balloc>
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	b948      	cbnz	r0, 8006eca <__lshift+0x3e>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	4b2a      	ldr	r3, [pc, #168]	; (8006f64 <__lshift+0xd8>)
 8006eba:	482b      	ldr	r0, [pc, #172]	; (8006f68 <__lshift+0xdc>)
 8006ebc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ec0:	f000 fbb8 	bl	8007634 <__assert_func>
 8006ec4:	3101      	adds	r1, #1
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	e7ee      	b.n	8006ea8 <__lshift+0x1c>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f100 0114 	add.w	r1, r0, #20
 8006ed0:	f100 0210 	add.w	r2, r0, #16
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	4553      	cmp	r3, sl
 8006ed8:	db37      	blt.n	8006f4a <__lshift+0xbe>
 8006eda:	6920      	ldr	r0, [r4, #16]
 8006edc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ee0:	f104 0314 	add.w	r3, r4, #20
 8006ee4:	f019 091f 	ands.w	r9, r9, #31
 8006ee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006eec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ef0:	d02f      	beq.n	8006f52 <__lshift+0xc6>
 8006ef2:	f1c9 0e20 	rsb	lr, r9, #32
 8006ef6:	468a      	mov	sl, r1
 8006ef8:	f04f 0c00 	mov.w	ip, #0
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	fa02 f209 	lsl.w	r2, r2, r9
 8006f02:	ea42 020c 	orr.w	r2, r2, ip
 8006f06:	f84a 2b04 	str.w	r2, [sl], #4
 8006f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f0e:	4298      	cmp	r0, r3
 8006f10:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006f14:	d8f2      	bhi.n	8006efc <__lshift+0x70>
 8006f16:	1b03      	subs	r3, r0, r4
 8006f18:	3b15      	subs	r3, #21
 8006f1a:	f023 0303 	bic.w	r3, r3, #3
 8006f1e:	3304      	adds	r3, #4
 8006f20:	f104 0215 	add.w	r2, r4, #21
 8006f24:	4290      	cmp	r0, r2
 8006f26:	bf38      	it	cc
 8006f28:	2304      	movcc	r3, #4
 8006f2a:	f841 c003 	str.w	ip, [r1, r3]
 8006f2e:	f1bc 0f00 	cmp.w	ip, #0
 8006f32:	d001      	beq.n	8006f38 <__lshift+0xac>
 8006f34:	f108 0602 	add.w	r6, r8, #2
 8006f38:	3e01      	subs	r6, #1
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	612e      	str	r6, [r5, #16]
 8006f3e:	4621      	mov	r1, r4
 8006f40:	f7ff fdd2 	bl	8006ae8 <_Bfree>
 8006f44:	4628      	mov	r0, r5
 8006f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f4e:	3301      	adds	r3, #1
 8006f50:	e7c1      	b.n	8006ed6 <__lshift+0x4a>
 8006f52:	3904      	subs	r1, #4
 8006f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f58:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f5c:	4298      	cmp	r0, r3
 8006f5e:	d8f9      	bhi.n	8006f54 <__lshift+0xc8>
 8006f60:	e7ea      	b.n	8006f38 <__lshift+0xac>
 8006f62:	bf00      	nop
 8006f64:	08008343 	.word	0x08008343
 8006f68:	08008354 	.word	0x08008354

08006f6c <__mcmp>:
 8006f6c:	b530      	push	{r4, r5, lr}
 8006f6e:	6902      	ldr	r2, [r0, #16]
 8006f70:	690c      	ldr	r4, [r1, #16]
 8006f72:	1b12      	subs	r2, r2, r4
 8006f74:	d10e      	bne.n	8006f94 <__mcmp+0x28>
 8006f76:	f100 0314 	add.w	r3, r0, #20
 8006f7a:	3114      	adds	r1, #20
 8006f7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f8c:	42a5      	cmp	r5, r4
 8006f8e:	d003      	beq.n	8006f98 <__mcmp+0x2c>
 8006f90:	d305      	bcc.n	8006f9e <__mcmp+0x32>
 8006f92:	2201      	movs	r2, #1
 8006f94:	4610      	mov	r0, r2
 8006f96:	bd30      	pop	{r4, r5, pc}
 8006f98:	4283      	cmp	r3, r0
 8006f9a:	d3f3      	bcc.n	8006f84 <__mcmp+0x18>
 8006f9c:	e7fa      	b.n	8006f94 <__mcmp+0x28>
 8006f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa2:	e7f7      	b.n	8006f94 <__mcmp+0x28>

08006fa4 <__mdiff>:
 8006fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa8:	460c      	mov	r4, r1
 8006faa:	4606      	mov	r6, r0
 8006fac:	4611      	mov	r1, r2
 8006fae:	4620      	mov	r0, r4
 8006fb0:	4690      	mov	r8, r2
 8006fb2:	f7ff ffdb 	bl	8006f6c <__mcmp>
 8006fb6:	1e05      	subs	r5, r0, #0
 8006fb8:	d110      	bne.n	8006fdc <__mdiff+0x38>
 8006fba:	4629      	mov	r1, r5
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7ff fd53 	bl	8006a68 <_Balloc>
 8006fc2:	b930      	cbnz	r0, 8006fd2 <__mdiff+0x2e>
 8006fc4:	4b3a      	ldr	r3, [pc, #232]	; (80070b0 <__mdiff+0x10c>)
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	f240 2132 	movw	r1, #562	; 0x232
 8006fcc:	4839      	ldr	r0, [pc, #228]	; (80070b4 <__mdiff+0x110>)
 8006fce:	f000 fb31 	bl	8007634 <__assert_func>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fdc:	bfa4      	itt	ge
 8006fde:	4643      	movge	r3, r8
 8006fe0:	46a0      	movge	r8, r4
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006fe8:	bfa6      	itte	ge
 8006fea:	461c      	movge	r4, r3
 8006fec:	2500      	movge	r5, #0
 8006fee:	2501      	movlt	r5, #1
 8006ff0:	f7ff fd3a 	bl	8006a68 <_Balloc>
 8006ff4:	b920      	cbnz	r0, 8007000 <__mdiff+0x5c>
 8006ff6:	4b2e      	ldr	r3, [pc, #184]	; (80070b0 <__mdiff+0x10c>)
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ffe:	e7e5      	b.n	8006fcc <__mdiff+0x28>
 8007000:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007004:	6926      	ldr	r6, [r4, #16]
 8007006:	60c5      	str	r5, [r0, #12]
 8007008:	f104 0914 	add.w	r9, r4, #20
 800700c:	f108 0514 	add.w	r5, r8, #20
 8007010:	f100 0e14 	add.w	lr, r0, #20
 8007014:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007018:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800701c:	f108 0210 	add.w	r2, r8, #16
 8007020:	46f2      	mov	sl, lr
 8007022:	2100      	movs	r1, #0
 8007024:	f859 3b04 	ldr.w	r3, [r9], #4
 8007028:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800702c:	fa1f f883 	uxth.w	r8, r3
 8007030:	fa11 f18b 	uxtah	r1, r1, fp
 8007034:	0c1b      	lsrs	r3, r3, #16
 8007036:	eba1 0808 	sub.w	r8, r1, r8
 800703a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800703e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007042:	fa1f f888 	uxth.w	r8, r8
 8007046:	1419      	asrs	r1, r3, #16
 8007048:	454e      	cmp	r6, r9
 800704a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800704e:	f84a 3b04 	str.w	r3, [sl], #4
 8007052:	d8e7      	bhi.n	8007024 <__mdiff+0x80>
 8007054:	1b33      	subs	r3, r6, r4
 8007056:	3b15      	subs	r3, #21
 8007058:	f023 0303 	bic.w	r3, r3, #3
 800705c:	3304      	adds	r3, #4
 800705e:	3415      	adds	r4, #21
 8007060:	42a6      	cmp	r6, r4
 8007062:	bf38      	it	cc
 8007064:	2304      	movcc	r3, #4
 8007066:	441d      	add	r5, r3
 8007068:	4473      	add	r3, lr
 800706a:	469e      	mov	lr, r3
 800706c:	462e      	mov	r6, r5
 800706e:	4566      	cmp	r6, ip
 8007070:	d30e      	bcc.n	8007090 <__mdiff+0xec>
 8007072:	f10c 0203 	add.w	r2, ip, #3
 8007076:	1b52      	subs	r2, r2, r5
 8007078:	f022 0203 	bic.w	r2, r2, #3
 800707c:	3d03      	subs	r5, #3
 800707e:	45ac      	cmp	ip, r5
 8007080:	bf38      	it	cc
 8007082:	2200      	movcc	r2, #0
 8007084:	441a      	add	r2, r3
 8007086:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800708a:	b17b      	cbz	r3, 80070ac <__mdiff+0x108>
 800708c:	6107      	str	r7, [r0, #16]
 800708e:	e7a3      	b.n	8006fd8 <__mdiff+0x34>
 8007090:	f856 8b04 	ldr.w	r8, [r6], #4
 8007094:	fa11 f288 	uxtah	r2, r1, r8
 8007098:	1414      	asrs	r4, r2, #16
 800709a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800709e:	b292      	uxth	r2, r2
 80070a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80070a4:	f84e 2b04 	str.w	r2, [lr], #4
 80070a8:	1421      	asrs	r1, r4, #16
 80070aa:	e7e0      	b.n	800706e <__mdiff+0xca>
 80070ac:	3f01      	subs	r7, #1
 80070ae:	e7ea      	b.n	8007086 <__mdiff+0xe2>
 80070b0:	08008343 	.word	0x08008343
 80070b4:	08008354 	.word	0x08008354

080070b8 <__d2b>:
 80070b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070bc:	4689      	mov	r9, r1
 80070be:	2101      	movs	r1, #1
 80070c0:	ec57 6b10 	vmov	r6, r7, d0
 80070c4:	4690      	mov	r8, r2
 80070c6:	f7ff fccf 	bl	8006a68 <_Balloc>
 80070ca:	4604      	mov	r4, r0
 80070cc:	b930      	cbnz	r0, 80070dc <__d2b+0x24>
 80070ce:	4602      	mov	r2, r0
 80070d0:	4b25      	ldr	r3, [pc, #148]	; (8007168 <__d2b+0xb0>)
 80070d2:	4826      	ldr	r0, [pc, #152]	; (800716c <__d2b+0xb4>)
 80070d4:	f240 310a 	movw	r1, #778	; 0x30a
 80070d8:	f000 faac 	bl	8007634 <__assert_func>
 80070dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80070e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80070e4:	bb35      	cbnz	r5, 8007134 <__d2b+0x7c>
 80070e6:	2e00      	cmp	r6, #0
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	d028      	beq.n	800713e <__d2b+0x86>
 80070ec:	4668      	mov	r0, sp
 80070ee:	9600      	str	r6, [sp, #0]
 80070f0:	f7ff fd82 	bl	8006bf8 <__lo0bits>
 80070f4:	9900      	ldr	r1, [sp, #0]
 80070f6:	b300      	cbz	r0, 800713a <__d2b+0x82>
 80070f8:	9a01      	ldr	r2, [sp, #4]
 80070fa:	f1c0 0320 	rsb	r3, r0, #32
 80070fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007102:	430b      	orrs	r3, r1
 8007104:	40c2      	lsrs	r2, r0
 8007106:	6163      	str	r3, [r4, #20]
 8007108:	9201      	str	r2, [sp, #4]
 800710a:	9b01      	ldr	r3, [sp, #4]
 800710c:	61a3      	str	r3, [r4, #24]
 800710e:	2b00      	cmp	r3, #0
 8007110:	bf14      	ite	ne
 8007112:	2202      	movne	r2, #2
 8007114:	2201      	moveq	r2, #1
 8007116:	6122      	str	r2, [r4, #16]
 8007118:	b1d5      	cbz	r5, 8007150 <__d2b+0x98>
 800711a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800711e:	4405      	add	r5, r0
 8007120:	f8c9 5000 	str.w	r5, [r9]
 8007124:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007128:	f8c8 0000 	str.w	r0, [r8]
 800712c:	4620      	mov	r0, r4
 800712e:	b003      	add	sp, #12
 8007130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007138:	e7d5      	b.n	80070e6 <__d2b+0x2e>
 800713a:	6161      	str	r1, [r4, #20]
 800713c:	e7e5      	b.n	800710a <__d2b+0x52>
 800713e:	a801      	add	r0, sp, #4
 8007140:	f7ff fd5a 	bl	8006bf8 <__lo0bits>
 8007144:	9b01      	ldr	r3, [sp, #4]
 8007146:	6163      	str	r3, [r4, #20]
 8007148:	2201      	movs	r2, #1
 800714a:	6122      	str	r2, [r4, #16]
 800714c:	3020      	adds	r0, #32
 800714e:	e7e3      	b.n	8007118 <__d2b+0x60>
 8007150:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007154:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007158:	f8c9 0000 	str.w	r0, [r9]
 800715c:	6918      	ldr	r0, [r3, #16]
 800715e:	f7ff fd2b 	bl	8006bb8 <__hi0bits>
 8007162:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007166:	e7df      	b.n	8007128 <__d2b+0x70>
 8007168:	08008343 	.word	0x08008343
 800716c:	08008354 	.word	0x08008354

08007170 <_calloc_r>:
 8007170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007172:	fba1 2402 	umull	r2, r4, r1, r2
 8007176:	b94c      	cbnz	r4, 800718c <_calloc_r+0x1c>
 8007178:	4611      	mov	r1, r2
 800717a:	9201      	str	r2, [sp, #4]
 800717c:	f000 f87a 	bl	8007274 <_malloc_r>
 8007180:	9a01      	ldr	r2, [sp, #4]
 8007182:	4605      	mov	r5, r0
 8007184:	b930      	cbnz	r0, 8007194 <_calloc_r+0x24>
 8007186:	4628      	mov	r0, r5
 8007188:	b003      	add	sp, #12
 800718a:	bd30      	pop	{r4, r5, pc}
 800718c:	220c      	movs	r2, #12
 800718e:	6002      	str	r2, [r0, #0]
 8007190:	2500      	movs	r5, #0
 8007192:	e7f8      	b.n	8007186 <_calloc_r+0x16>
 8007194:	4621      	mov	r1, r4
 8007196:	f7fe f93f 	bl	8005418 <memset>
 800719a:	e7f4      	b.n	8007186 <_calloc_r+0x16>

0800719c <_free_r>:
 800719c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800719e:	2900      	cmp	r1, #0
 80071a0:	d044      	beq.n	800722c <_free_r+0x90>
 80071a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071a6:	9001      	str	r0, [sp, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f1a1 0404 	sub.w	r4, r1, #4
 80071ae:	bfb8      	it	lt
 80071b0:	18e4      	addlt	r4, r4, r3
 80071b2:	f000 fa9b 	bl	80076ec <__malloc_lock>
 80071b6:	4a1e      	ldr	r2, [pc, #120]	; (8007230 <_free_r+0x94>)
 80071b8:	9801      	ldr	r0, [sp, #4]
 80071ba:	6813      	ldr	r3, [r2, #0]
 80071bc:	b933      	cbnz	r3, 80071cc <_free_r+0x30>
 80071be:	6063      	str	r3, [r4, #4]
 80071c0:	6014      	str	r4, [r2, #0]
 80071c2:	b003      	add	sp, #12
 80071c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071c8:	f000 ba96 	b.w	80076f8 <__malloc_unlock>
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	d908      	bls.n	80071e2 <_free_r+0x46>
 80071d0:	6825      	ldr	r5, [r4, #0]
 80071d2:	1961      	adds	r1, r4, r5
 80071d4:	428b      	cmp	r3, r1
 80071d6:	bf01      	itttt	eq
 80071d8:	6819      	ldreq	r1, [r3, #0]
 80071da:	685b      	ldreq	r3, [r3, #4]
 80071dc:	1949      	addeq	r1, r1, r5
 80071de:	6021      	streq	r1, [r4, #0]
 80071e0:	e7ed      	b.n	80071be <_free_r+0x22>
 80071e2:	461a      	mov	r2, r3
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	b10b      	cbz	r3, 80071ec <_free_r+0x50>
 80071e8:	42a3      	cmp	r3, r4
 80071ea:	d9fa      	bls.n	80071e2 <_free_r+0x46>
 80071ec:	6811      	ldr	r1, [r2, #0]
 80071ee:	1855      	adds	r5, r2, r1
 80071f0:	42a5      	cmp	r5, r4
 80071f2:	d10b      	bne.n	800720c <_free_r+0x70>
 80071f4:	6824      	ldr	r4, [r4, #0]
 80071f6:	4421      	add	r1, r4
 80071f8:	1854      	adds	r4, r2, r1
 80071fa:	42a3      	cmp	r3, r4
 80071fc:	6011      	str	r1, [r2, #0]
 80071fe:	d1e0      	bne.n	80071c2 <_free_r+0x26>
 8007200:	681c      	ldr	r4, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	6053      	str	r3, [r2, #4]
 8007206:	4421      	add	r1, r4
 8007208:	6011      	str	r1, [r2, #0]
 800720a:	e7da      	b.n	80071c2 <_free_r+0x26>
 800720c:	d902      	bls.n	8007214 <_free_r+0x78>
 800720e:	230c      	movs	r3, #12
 8007210:	6003      	str	r3, [r0, #0]
 8007212:	e7d6      	b.n	80071c2 <_free_r+0x26>
 8007214:	6825      	ldr	r5, [r4, #0]
 8007216:	1961      	adds	r1, r4, r5
 8007218:	428b      	cmp	r3, r1
 800721a:	bf04      	itt	eq
 800721c:	6819      	ldreq	r1, [r3, #0]
 800721e:	685b      	ldreq	r3, [r3, #4]
 8007220:	6063      	str	r3, [r4, #4]
 8007222:	bf04      	itt	eq
 8007224:	1949      	addeq	r1, r1, r5
 8007226:	6021      	streq	r1, [r4, #0]
 8007228:	6054      	str	r4, [r2, #4]
 800722a:	e7ca      	b.n	80071c2 <_free_r+0x26>
 800722c:	b003      	add	sp, #12
 800722e:	bd30      	pop	{r4, r5, pc}
 8007230:	20000338 	.word	0x20000338

08007234 <sbrk_aligned>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	4e0e      	ldr	r6, [pc, #56]	; (8007270 <sbrk_aligned+0x3c>)
 8007238:	460c      	mov	r4, r1
 800723a:	6831      	ldr	r1, [r6, #0]
 800723c:	4605      	mov	r5, r0
 800723e:	b911      	cbnz	r1, 8007246 <sbrk_aligned+0x12>
 8007240:	f000 f9e8 	bl	8007614 <_sbrk_r>
 8007244:	6030      	str	r0, [r6, #0]
 8007246:	4621      	mov	r1, r4
 8007248:	4628      	mov	r0, r5
 800724a:	f000 f9e3 	bl	8007614 <_sbrk_r>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	d00a      	beq.n	8007268 <sbrk_aligned+0x34>
 8007252:	1cc4      	adds	r4, r0, #3
 8007254:	f024 0403 	bic.w	r4, r4, #3
 8007258:	42a0      	cmp	r0, r4
 800725a:	d007      	beq.n	800726c <sbrk_aligned+0x38>
 800725c:	1a21      	subs	r1, r4, r0
 800725e:	4628      	mov	r0, r5
 8007260:	f000 f9d8 	bl	8007614 <_sbrk_r>
 8007264:	3001      	adds	r0, #1
 8007266:	d101      	bne.n	800726c <sbrk_aligned+0x38>
 8007268:	f04f 34ff 	mov.w	r4, #4294967295
 800726c:	4620      	mov	r0, r4
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	2000033c 	.word	0x2000033c

08007274 <_malloc_r>:
 8007274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007278:	1ccd      	adds	r5, r1, #3
 800727a:	f025 0503 	bic.w	r5, r5, #3
 800727e:	3508      	adds	r5, #8
 8007280:	2d0c      	cmp	r5, #12
 8007282:	bf38      	it	cc
 8007284:	250c      	movcc	r5, #12
 8007286:	2d00      	cmp	r5, #0
 8007288:	4607      	mov	r7, r0
 800728a:	db01      	blt.n	8007290 <_malloc_r+0x1c>
 800728c:	42a9      	cmp	r1, r5
 800728e:	d905      	bls.n	800729c <_malloc_r+0x28>
 8007290:	230c      	movs	r3, #12
 8007292:	603b      	str	r3, [r7, #0]
 8007294:	2600      	movs	r6, #0
 8007296:	4630      	mov	r0, r6
 8007298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800729c:	4e2e      	ldr	r6, [pc, #184]	; (8007358 <_malloc_r+0xe4>)
 800729e:	f000 fa25 	bl	80076ec <__malloc_lock>
 80072a2:	6833      	ldr	r3, [r6, #0]
 80072a4:	461c      	mov	r4, r3
 80072a6:	bb34      	cbnz	r4, 80072f6 <_malloc_r+0x82>
 80072a8:	4629      	mov	r1, r5
 80072aa:	4638      	mov	r0, r7
 80072ac:	f7ff ffc2 	bl	8007234 <sbrk_aligned>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	4604      	mov	r4, r0
 80072b4:	d14d      	bne.n	8007352 <_malloc_r+0xde>
 80072b6:	6834      	ldr	r4, [r6, #0]
 80072b8:	4626      	mov	r6, r4
 80072ba:	2e00      	cmp	r6, #0
 80072bc:	d140      	bne.n	8007340 <_malloc_r+0xcc>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	4631      	mov	r1, r6
 80072c2:	4638      	mov	r0, r7
 80072c4:	eb04 0803 	add.w	r8, r4, r3
 80072c8:	f000 f9a4 	bl	8007614 <_sbrk_r>
 80072cc:	4580      	cmp	r8, r0
 80072ce:	d13a      	bne.n	8007346 <_malloc_r+0xd2>
 80072d0:	6821      	ldr	r1, [r4, #0]
 80072d2:	3503      	adds	r5, #3
 80072d4:	1a6d      	subs	r5, r5, r1
 80072d6:	f025 0503 	bic.w	r5, r5, #3
 80072da:	3508      	adds	r5, #8
 80072dc:	2d0c      	cmp	r5, #12
 80072de:	bf38      	it	cc
 80072e0:	250c      	movcc	r5, #12
 80072e2:	4629      	mov	r1, r5
 80072e4:	4638      	mov	r0, r7
 80072e6:	f7ff ffa5 	bl	8007234 <sbrk_aligned>
 80072ea:	3001      	adds	r0, #1
 80072ec:	d02b      	beq.n	8007346 <_malloc_r+0xd2>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	442b      	add	r3, r5
 80072f2:	6023      	str	r3, [r4, #0]
 80072f4:	e00e      	b.n	8007314 <_malloc_r+0xa0>
 80072f6:	6822      	ldr	r2, [r4, #0]
 80072f8:	1b52      	subs	r2, r2, r5
 80072fa:	d41e      	bmi.n	800733a <_malloc_r+0xc6>
 80072fc:	2a0b      	cmp	r2, #11
 80072fe:	d916      	bls.n	800732e <_malloc_r+0xba>
 8007300:	1961      	adds	r1, r4, r5
 8007302:	42a3      	cmp	r3, r4
 8007304:	6025      	str	r5, [r4, #0]
 8007306:	bf18      	it	ne
 8007308:	6059      	strne	r1, [r3, #4]
 800730a:	6863      	ldr	r3, [r4, #4]
 800730c:	bf08      	it	eq
 800730e:	6031      	streq	r1, [r6, #0]
 8007310:	5162      	str	r2, [r4, r5]
 8007312:	604b      	str	r3, [r1, #4]
 8007314:	4638      	mov	r0, r7
 8007316:	f104 060b 	add.w	r6, r4, #11
 800731a:	f000 f9ed 	bl	80076f8 <__malloc_unlock>
 800731e:	f026 0607 	bic.w	r6, r6, #7
 8007322:	1d23      	adds	r3, r4, #4
 8007324:	1af2      	subs	r2, r6, r3
 8007326:	d0b6      	beq.n	8007296 <_malloc_r+0x22>
 8007328:	1b9b      	subs	r3, r3, r6
 800732a:	50a3      	str	r3, [r4, r2]
 800732c:	e7b3      	b.n	8007296 <_malloc_r+0x22>
 800732e:	6862      	ldr	r2, [r4, #4]
 8007330:	42a3      	cmp	r3, r4
 8007332:	bf0c      	ite	eq
 8007334:	6032      	streq	r2, [r6, #0]
 8007336:	605a      	strne	r2, [r3, #4]
 8007338:	e7ec      	b.n	8007314 <_malloc_r+0xa0>
 800733a:	4623      	mov	r3, r4
 800733c:	6864      	ldr	r4, [r4, #4]
 800733e:	e7b2      	b.n	80072a6 <_malloc_r+0x32>
 8007340:	4634      	mov	r4, r6
 8007342:	6876      	ldr	r6, [r6, #4]
 8007344:	e7b9      	b.n	80072ba <_malloc_r+0x46>
 8007346:	230c      	movs	r3, #12
 8007348:	603b      	str	r3, [r7, #0]
 800734a:	4638      	mov	r0, r7
 800734c:	f000 f9d4 	bl	80076f8 <__malloc_unlock>
 8007350:	e7a1      	b.n	8007296 <_malloc_r+0x22>
 8007352:	6025      	str	r5, [r4, #0]
 8007354:	e7de      	b.n	8007314 <_malloc_r+0xa0>
 8007356:	bf00      	nop
 8007358:	20000338 	.word	0x20000338

0800735c <__ssputs_r>:
 800735c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007360:	688e      	ldr	r6, [r1, #8]
 8007362:	429e      	cmp	r6, r3
 8007364:	4682      	mov	sl, r0
 8007366:	460c      	mov	r4, r1
 8007368:	4690      	mov	r8, r2
 800736a:	461f      	mov	r7, r3
 800736c:	d838      	bhi.n	80073e0 <__ssputs_r+0x84>
 800736e:	898a      	ldrh	r2, [r1, #12]
 8007370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007374:	d032      	beq.n	80073dc <__ssputs_r+0x80>
 8007376:	6825      	ldr	r5, [r4, #0]
 8007378:	6909      	ldr	r1, [r1, #16]
 800737a:	eba5 0901 	sub.w	r9, r5, r1
 800737e:	6965      	ldr	r5, [r4, #20]
 8007380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007388:	3301      	adds	r3, #1
 800738a:	444b      	add	r3, r9
 800738c:	106d      	asrs	r5, r5, #1
 800738e:	429d      	cmp	r5, r3
 8007390:	bf38      	it	cc
 8007392:	461d      	movcc	r5, r3
 8007394:	0553      	lsls	r3, r2, #21
 8007396:	d531      	bpl.n	80073fc <__ssputs_r+0xa0>
 8007398:	4629      	mov	r1, r5
 800739a:	f7ff ff6b 	bl	8007274 <_malloc_r>
 800739e:	4606      	mov	r6, r0
 80073a0:	b950      	cbnz	r0, 80073b8 <__ssputs_r+0x5c>
 80073a2:	230c      	movs	r3, #12
 80073a4:	f8ca 3000 	str.w	r3, [sl]
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ae:	81a3      	strh	r3, [r4, #12]
 80073b0:	f04f 30ff 	mov.w	r0, #4294967295
 80073b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b8:	6921      	ldr	r1, [r4, #16]
 80073ba:	464a      	mov	r2, r9
 80073bc:	f7ff fb46 	bl	8006a4c <memcpy>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ca:	81a3      	strh	r3, [r4, #12]
 80073cc:	6126      	str	r6, [r4, #16]
 80073ce:	6165      	str	r5, [r4, #20]
 80073d0:	444e      	add	r6, r9
 80073d2:	eba5 0509 	sub.w	r5, r5, r9
 80073d6:	6026      	str	r6, [r4, #0]
 80073d8:	60a5      	str	r5, [r4, #8]
 80073da:	463e      	mov	r6, r7
 80073dc:	42be      	cmp	r6, r7
 80073de:	d900      	bls.n	80073e2 <__ssputs_r+0x86>
 80073e0:	463e      	mov	r6, r7
 80073e2:	6820      	ldr	r0, [r4, #0]
 80073e4:	4632      	mov	r2, r6
 80073e6:	4641      	mov	r1, r8
 80073e8:	f000 f966 	bl	80076b8 <memmove>
 80073ec:	68a3      	ldr	r3, [r4, #8]
 80073ee:	1b9b      	subs	r3, r3, r6
 80073f0:	60a3      	str	r3, [r4, #8]
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	4433      	add	r3, r6
 80073f6:	6023      	str	r3, [r4, #0]
 80073f8:	2000      	movs	r0, #0
 80073fa:	e7db      	b.n	80073b4 <__ssputs_r+0x58>
 80073fc:	462a      	mov	r2, r5
 80073fe:	f000 f981 	bl	8007704 <_realloc_r>
 8007402:	4606      	mov	r6, r0
 8007404:	2800      	cmp	r0, #0
 8007406:	d1e1      	bne.n	80073cc <__ssputs_r+0x70>
 8007408:	6921      	ldr	r1, [r4, #16]
 800740a:	4650      	mov	r0, sl
 800740c:	f7ff fec6 	bl	800719c <_free_r>
 8007410:	e7c7      	b.n	80073a2 <__ssputs_r+0x46>
	...

08007414 <_svfiprintf_r>:
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	4698      	mov	r8, r3
 800741a:	898b      	ldrh	r3, [r1, #12]
 800741c:	061b      	lsls	r3, r3, #24
 800741e:	b09d      	sub	sp, #116	; 0x74
 8007420:	4607      	mov	r7, r0
 8007422:	460d      	mov	r5, r1
 8007424:	4614      	mov	r4, r2
 8007426:	d50e      	bpl.n	8007446 <_svfiprintf_r+0x32>
 8007428:	690b      	ldr	r3, [r1, #16]
 800742a:	b963      	cbnz	r3, 8007446 <_svfiprintf_r+0x32>
 800742c:	2140      	movs	r1, #64	; 0x40
 800742e:	f7ff ff21 	bl	8007274 <_malloc_r>
 8007432:	6028      	str	r0, [r5, #0]
 8007434:	6128      	str	r0, [r5, #16]
 8007436:	b920      	cbnz	r0, 8007442 <_svfiprintf_r+0x2e>
 8007438:	230c      	movs	r3, #12
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	f04f 30ff 	mov.w	r0, #4294967295
 8007440:	e0d1      	b.n	80075e6 <_svfiprintf_r+0x1d2>
 8007442:	2340      	movs	r3, #64	; 0x40
 8007444:	616b      	str	r3, [r5, #20]
 8007446:	2300      	movs	r3, #0
 8007448:	9309      	str	r3, [sp, #36]	; 0x24
 800744a:	2320      	movs	r3, #32
 800744c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007450:	f8cd 800c 	str.w	r8, [sp, #12]
 8007454:	2330      	movs	r3, #48	; 0x30
 8007456:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007600 <_svfiprintf_r+0x1ec>
 800745a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800745e:	f04f 0901 	mov.w	r9, #1
 8007462:	4623      	mov	r3, r4
 8007464:	469a      	mov	sl, r3
 8007466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800746a:	b10a      	cbz	r2, 8007470 <_svfiprintf_r+0x5c>
 800746c:	2a25      	cmp	r2, #37	; 0x25
 800746e:	d1f9      	bne.n	8007464 <_svfiprintf_r+0x50>
 8007470:	ebba 0b04 	subs.w	fp, sl, r4
 8007474:	d00b      	beq.n	800748e <_svfiprintf_r+0x7a>
 8007476:	465b      	mov	r3, fp
 8007478:	4622      	mov	r2, r4
 800747a:	4629      	mov	r1, r5
 800747c:	4638      	mov	r0, r7
 800747e:	f7ff ff6d 	bl	800735c <__ssputs_r>
 8007482:	3001      	adds	r0, #1
 8007484:	f000 80aa 	beq.w	80075dc <_svfiprintf_r+0x1c8>
 8007488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800748a:	445a      	add	r2, fp
 800748c:	9209      	str	r2, [sp, #36]	; 0x24
 800748e:	f89a 3000 	ldrb.w	r3, [sl]
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 80a2 	beq.w	80075dc <_svfiprintf_r+0x1c8>
 8007498:	2300      	movs	r3, #0
 800749a:	f04f 32ff 	mov.w	r2, #4294967295
 800749e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074a2:	f10a 0a01 	add.w	sl, sl, #1
 80074a6:	9304      	str	r3, [sp, #16]
 80074a8:	9307      	str	r3, [sp, #28]
 80074aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074ae:	931a      	str	r3, [sp, #104]	; 0x68
 80074b0:	4654      	mov	r4, sl
 80074b2:	2205      	movs	r2, #5
 80074b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b8:	4851      	ldr	r0, [pc, #324]	; (8007600 <_svfiprintf_r+0x1ec>)
 80074ba:	f7f8 fe91 	bl	80001e0 <memchr>
 80074be:	9a04      	ldr	r2, [sp, #16]
 80074c0:	b9d8      	cbnz	r0, 80074fa <_svfiprintf_r+0xe6>
 80074c2:	06d0      	lsls	r0, r2, #27
 80074c4:	bf44      	itt	mi
 80074c6:	2320      	movmi	r3, #32
 80074c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074cc:	0711      	lsls	r1, r2, #28
 80074ce:	bf44      	itt	mi
 80074d0:	232b      	movmi	r3, #43	; 0x2b
 80074d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074d6:	f89a 3000 	ldrb.w	r3, [sl]
 80074da:	2b2a      	cmp	r3, #42	; 0x2a
 80074dc:	d015      	beq.n	800750a <_svfiprintf_r+0xf6>
 80074de:	9a07      	ldr	r2, [sp, #28]
 80074e0:	4654      	mov	r4, sl
 80074e2:	2000      	movs	r0, #0
 80074e4:	f04f 0c0a 	mov.w	ip, #10
 80074e8:	4621      	mov	r1, r4
 80074ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074ee:	3b30      	subs	r3, #48	; 0x30
 80074f0:	2b09      	cmp	r3, #9
 80074f2:	d94e      	bls.n	8007592 <_svfiprintf_r+0x17e>
 80074f4:	b1b0      	cbz	r0, 8007524 <_svfiprintf_r+0x110>
 80074f6:	9207      	str	r2, [sp, #28]
 80074f8:	e014      	b.n	8007524 <_svfiprintf_r+0x110>
 80074fa:	eba0 0308 	sub.w	r3, r0, r8
 80074fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007502:	4313      	orrs	r3, r2
 8007504:	9304      	str	r3, [sp, #16]
 8007506:	46a2      	mov	sl, r4
 8007508:	e7d2      	b.n	80074b0 <_svfiprintf_r+0x9c>
 800750a:	9b03      	ldr	r3, [sp, #12]
 800750c:	1d19      	adds	r1, r3, #4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	9103      	str	r1, [sp, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	bfbb      	ittet	lt
 8007516:	425b      	neglt	r3, r3
 8007518:	f042 0202 	orrlt.w	r2, r2, #2
 800751c:	9307      	strge	r3, [sp, #28]
 800751e:	9307      	strlt	r3, [sp, #28]
 8007520:	bfb8      	it	lt
 8007522:	9204      	strlt	r2, [sp, #16]
 8007524:	7823      	ldrb	r3, [r4, #0]
 8007526:	2b2e      	cmp	r3, #46	; 0x2e
 8007528:	d10c      	bne.n	8007544 <_svfiprintf_r+0x130>
 800752a:	7863      	ldrb	r3, [r4, #1]
 800752c:	2b2a      	cmp	r3, #42	; 0x2a
 800752e:	d135      	bne.n	800759c <_svfiprintf_r+0x188>
 8007530:	9b03      	ldr	r3, [sp, #12]
 8007532:	1d1a      	adds	r2, r3, #4
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	9203      	str	r2, [sp, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	bfb8      	it	lt
 800753c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007540:	3402      	adds	r4, #2
 8007542:	9305      	str	r3, [sp, #20]
 8007544:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007610 <_svfiprintf_r+0x1fc>
 8007548:	7821      	ldrb	r1, [r4, #0]
 800754a:	2203      	movs	r2, #3
 800754c:	4650      	mov	r0, sl
 800754e:	f7f8 fe47 	bl	80001e0 <memchr>
 8007552:	b140      	cbz	r0, 8007566 <_svfiprintf_r+0x152>
 8007554:	2340      	movs	r3, #64	; 0x40
 8007556:	eba0 000a 	sub.w	r0, r0, sl
 800755a:	fa03 f000 	lsl.w	r0, r3, r0
 800755e:	9b04      	ldr	r3, [sp, #16]
 8007560:	4303      	orrs	r3, r0
 8007562:	3401      	adds	r4, #1
 8007564:	9304      	str	r3, [sp, #16]
 8007566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800756a:	4826      	ldr	r0, [pc, #152]	; (8007604 <_svfiprintf_r+0x1f0>)
 800756c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007570:	2206      	movs	r2, #6
 8007572:	f7f8 fe35 	bl	80001e0 <memchr>
 8007576:	2800      	cmp	r0, #0
 8007578:	d038      	beq.n	80075ec <_svfiprintf_r+0x1d8>
 800757a:	4b23      	ldr	r3, [pc, #140]	; (8007608 <_svfiprintf_r+0x1f4>)
 800757c:	bb1b      	cbnz	r3, 80075c6 <_svfiprintf_r+0x1b2>
 800757e:	9b03      	ldr	r3, [sp, #12]
 8007580:	3307      	adds	r3, #7
 8007582:	f023 0307 	bic.w	r3, r3, #7
 8007586:	3308      	adds	r3, #8
 8007588:	9303      	str	r3, [sp, #12]
 800758a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758c:	4433      	add	r3, r6
 800758e:	9309      	str	r3, [sp, #36]	; 0x24
 8007590:	e767      	b.n	8007462 <_svfiprintf_r+0x4e>
 8007592:	fb0c 3202 	mla	r2, ip, r2, r3
 8007596:	460c      	mov	r4, r1
 8007598:	2001      	movs	r0, #1
 800759a:	e7a5      	b.n	80074e8 <_svfiprintf_r+0xd4>
 800759c:	2300      	movs	r3, #0
 800759e:	3401      	adds	r4, #1
 80075a0:	9305      	str	r3, [sp, #20]
 80075a2:	4619      	mov	r1, r3
 80075a4:	f04f 0c0a 	mov.w	ip, #10
 80075a8:	4620      	mov	r0, r4
 80075aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ae:	3a30      	subs	r2, #48	; 0x30
 80075b0:	2a09      	cmp	r2, #9
 80075b2:	d903      	bls.n	80075bc <_svfiprintf_r+0x1a8>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0c5      	beq.n	8007544 <_svfiprintf_r+0x130>
 80075b8:	9105      	str	r1, [sp, #20]
 80075ba:	e7c3      	b.n	8007544 <_svfiprintf_r+0x130>
 80075bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80075c0:	4604      	mov	r4, r0
 80075c2:	2301      	movs	r3, #1
 80075c4:	e7f0      	b.n	80075a8 <_svfiprintf_r+0x194>
 80075c6:	ab03      	add	r3, sp, #12
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	462a      	mov	r2, r5
 80075cc:	4b0f      	ldr	r3, [pc, #60]	; (800760c <_svfiprintf_r+0x1f8>)
 80075ce:	a904      	add	r1, sp, #16
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7fd ffc9 	bl	8005568 <_printf_float>
 80075d6:	1c42      	adds	r2, r0, #1
 80075d8:	4606      	mov	r6, r0
 80075da:	d1d6      	bne.n	800758a <_svfiprintf_r+0x176>
 80075dc:	89ab      	ldrh	r3, [r5, #12]
 80075de:	065b      	lsls	r3, r3, #25
 80075e0:	f53f af2c 	bmi.w	800743c <_svfiprintf_r+0x28>
 80075e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075e6:	b01d      	add	sp, #116	; 0x74
 80075e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ec:	ab03      	add	r3, sp, #12
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	462a      	mov	r2, r5
 80075f2:	4b06      	ldr	r3, [pc, #24]	; (800760c <_svfiprintf_r+0x1f8>)
 80075f4:	a904      	add	r1, sp, #16
 80075f6:	4638      	mov	r0, r7
 80075f8:	f7fe fa5a 	bl	8005ab0 <_printf_i>
 80075fc:	e7eb      	b.n	80075d6 <_svfiprintf_r+0x1c2>
 80075fe:	bf00      	nop
 8007600:	080084ac 	.word	0x080084ac
 8007604:	080084b6 	.word	0x080084b6
 8007608:	08005569 	.word	0x08005569
 800760c:	0800735d 	.word	0x0800735d
 8007610:	080084b2 	.word	0x080084b2

08007614 <_sbrk_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d06      	ldr	r5, [pc, #24]	; (8007630 <_sbrk_r+0x1c>)
 8007618:	2300      	movs	r3, #0
 800761a:	4604      	mov	r4, r0
 800761c:	4608      	mov	r0, r1
 800761e:	602b      	str	r3, [r5, #0]
 8007620:	f7fa fb24 	bl	8001c6c <_sbrk>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d102      	bne.n	800762e <_sbrk_r+0x1a>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	b103      	cbz	r3, 800762e <_sbrk_r+0x1a>
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	bd38      	pop	{r3, r4, r5, pc}
 8007630:	20000340 	.word	0x20000340

08007634 <__assert_func>:
 8007634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007636:	4614      	mov	r4, r2
 8007638:	461a      	mov	r2, r3
 800763a:	4b09      	ldr	r3, [pc, #36]	; (8007660 <__assert_func+0x2c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4605      	mov	r5, r0
 8007640:	68d8      	ldr	r0, [r3, #12]
 8007642:	b14c      	cbz	r4, 8007658 <__assert_func+0x24>
 8007644:	4b07      	ldr	r3, [pc, #28]	; (8007664 <__assert_func+0x30>)
 8007646:	9100      	str	r1, [sp, #0]
 8007648:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800764c:	4906      	ldr	r1, [pc, #24]	; (8007668 <__assert_func+0x34>)
 800764e:	462b      	mov	r3, r5
 8007650:	f000 f80e 	bl	8007670 <fiprintf>
 8007654:	f000 faac 	bl	8007bb0 <abort>
 8007658:	4b04      	ldr	r3, [pc, #16]	; (800766c <__assert_func+0x38>)
 800765a:	461c      	mov	r4, r3
 800765c:	e7f3      	b.n	8007646 <__assert_func+0x12>
 800765e:	bf00      	nop
 8007660:	2000000c 	.word	0x2000000c
 8007664:	080084bd 	.word	0x080084bd
 8007668:	080084ca 	.word	0x080084ca
 800766c:	080084f8 	.word	0x080084f8

08007670 <fiprintf>:
 8007670:	b40e      	push	{r1, r2, r3}
 8007672:	b503      	push	{r0, r1, lr}
 8007674:	4601      	mov	r1, r0
 8007676:	ab03      	add	r3, sp, #12
 8007678:	4805      	ldr	r0, [pc, #20]	; (8007690 <fiprintf+0x20>)
 800767a:	f853 2b04 	ldr.w	r2, [r3], #4
 800767e:	6800      	ldr	r0, [r0, #0]
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	f000 f897 	bl	80077b4 <_vfiprintf_r>
 8007686:	b002      	add	sp, #8
 8007688:	f85d eb04 	ldr.w	lr, [sp], #4
 800768c:	b003      	add	sp, #12
 800768e:	4770      	bx	lr
 8007690:	2000000c 	.word	0x2000000c

08007694 <__ascii_mbtowc>:
 8007694:	b082      	sub	sp, #8
 8007696:	b901      	cbnz	r1, 800769a <__ascii_mbtowc+0x6>
 8007698:	a901      	add	r1, sp, #4
 800769a:	b142      	cbz	r2, 80076ae <__ascii_mbtowc+0x1a>
 800769c:	b14b      	cbz	r3, 80076b2 <__ascii_mbtowc+0x1e>
 800769e:	7813      	ldrb	r3, [r2, #0]
 80076a0:	600b      	str	r3, [r1, #0]
 80076a2:	7812      	ldrb	r2, [r2, #0]
 80076a4:	1e10      	subs	r0, r2, #0
 80076a6:	bf18      	it	ne
 80076a8:	2001      	movne	r0, #1
 80076aa:	b002      	add	sp, #8
 80076ac:	4770      	bx	lr
 80076ae:	4610      	mov	r0, r2
 80076b0:	e7fb      	b.n	80076aa <__ascii_mbtowc+0x16>
 80076b2:	f06f 0001 	mvn.w	r0, #1
 80076b6:	e7f8      	b.n	80076aa <__ascii_mbtowc+0x16>

080076b8 <memmove>:
 80076b8:	4288      	cmp	r0, r1
 80076ba:	b510      	push	{r4, lr}
 80076bc:	eb01 0402 	add.w	r4, r1, r2
 80076c0:	d902      	bls.n	80076c8 <memmove+0x10>
 80076c2:	4284      	cmp	r4, r0
 80076c4:	4623      	mov	r3, r4
 80076c6:	d807      	bhi.n	80076d8 <memmove+0x20>
 80076c8:	1e43      	subs	r3, r0, #1
 80076ca:	42a1      	cmp	r1, r4
 80076cc:	d008      	beq.n	80076e0 <memmove+0x28>
 80076ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076d6:	e7f8      	b.n	80076ca <memmove+0x12>
 80076d8:	4402      	add	r2, r0
 80076da:	4601      	mov	r1, r0
 80076dc:	428a      	cmp	r2, r1
 80076de:	d100      	bne.n	80076e2 <memmove+0x2a>
 80076e0:	bd10      	pop	{r4, pc}
 80076e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076ea:	e7f7      	b.n	80076dc <memmove+0x24>

080076ec <__malloc_lock>:
 80076ec:	4801      	ldr	r0, [pc, #4]	; (80076f4 <__malloc_lock+0x8>)
 80076ee:	f000 bc1f 	b.w	8007f30 <__retarget_lock_acquire_recursive>
 80076f2:	bf00      	nop
 80076f4:	20000344 	.word	0x20000344

080076f8 <__malloc_unlock>:
 80076f8:	4801      	ldr	r0, [pc, #4]	; (8007700 <__malloc_unlock+0x8>)
 80076fa:	f000 bc1a 	b.w	8007f32 <__retarget_lock_release_recursive>
 80076fe:	bf00      	nop
 8007700:	20000344 	.word	0x20000344

08007704 <_realloc_r>:
 8007704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007708:	4680      	mov	r8, r0
 800770a:	4614      	mov	r4, r2
 800770c:	460e      	mov	r6, r1
 800770e:	b921      	cbnz	r1, 800771a <_realloc_r+0x16>
 8007710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007714:	4611      	mov	r1, r2
 8007716:	f7ff bdad 	b.w	8007274 <_malloc_r>
 800771a:	b92a      	cbnz	r2, 8007728 <_realloc_r+0x24>
 800771c:	f7ff fd3e 	bl	800719c <_free_r>
 8007720:	4625      	mov	r5, r4
 8007722:	4628      	mov	r0, r5
 8007724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007728:	f000 fc6a 	bl	8008000 <_malloc_usable_size_r>
 800772c:	4284      	cmp	r4, r0
 800772e:	4607      	mov	r7, r0
 8007730:	d802      	bhi.n	8007738 <_realloc_r+0x34>
 8007732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007736:	d812      	bhi.n	800775e <_realloc_r+0x5a>
 8007738:	4621      	mov	r1, r4
 800773a:	4640      	mov	r0, r8
 800773c:	f7ff fd9a 	bl	8007274 <_malloc_r>
 8007740:	4605      	mov	r5, r0
 8007742:	2800      	cmp	r0, #0
 8007744:	d0ed      	beq.n	8007722 <_realloc_r+0x1e>
 8007746:	42bc      	cmp	r4, r7
 8007748:	4622      	mov	r2, r4
 800774a:	4631      	mov	r1, r6
 800774c:	bf28      	it	cs
 800774e:	463a      	movcs	r2, r7
 8007750:	f7ff f97c 	bl	8006a4c <memcpy>
 8007754:	4631      	mov	r1, r6
 8007756:	4640      	mov	r0, r8
 8007758:	f7ff fd20 	bl	800719c <_free_r>
 800775c:	e7e1      	b.n	8007722 <_realloc_r+0x1e>
 800775e:	4635      	mov	r5, r6
 8007760:	e7df      	b.n	8007722 <_realloc_r+0x1e>

08007762 <__sfputc_r>:
 8007762:	6893      	ldr	r3, [r2, #8]
 8007764:	3b01      	subs	r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	b410      	push	{r4}
 800776a:	6093      	str	r3, [r2, #8]
 800776c:	da08      	bge.n	8007780 <__sfputc_r+0x1e>
 800776e:	6994      	ldr	r4, [r2, #24]
 8007770:	42a3      	cmp	r3, r4
 8007772:	db01      	blt.n	8007778 <__sfputc_r+0x16>
 8007774:	290a      	cmp	r1, #10
 8007776:	d103      	bne.n	8007780 <__sfputc_r+0x1e>
 8007778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800777c:	f000 b94a 	b.w	8007a14 <__swbuf_r>
 8007780:	6813      	ldr	r3, [r2, #0]
 8007782:	1c58      	adds	r0, r3, #1
 8007784:	6010      	str	r0, [r2, #0]
 8007786:	7019      	strb	r1, [r3, #0]
 8007788:	4608      	mov	r0, r1
 800778a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800778e:	4770      	bx	lr

08007790 <__sfputs_r>:
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	4606      	mov	r6, r0
 8007794:	460f      	mov	r7, r1
 8007796:	4614      	mov	r4, r2
 8007798:	18d5      	adds	r5, r2, r3
 800779a:	42ac      	cmp	r4, r5
 800779c:	d101      	bne.n	80077a2 <__sfputs_r+0x12>
 800779e:	2000      	movs	r0, #0
 80077a0:	e007      	b.n	80077b2 <__sfputs_r+0x22>
 80077a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077a6:	463a      	mov	r2, r7
 80077a8:	4630      	mov	r0, r6
 80077aa:	f7ff ffda 	bl	8007762 <__sfputc_r>
 80077ae:	1c43      	adds	r3, r0, #1
 80077b0:	d1f3      	bne.n	800779a <__sfputs_r+0xa>
 80077b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077b4 <_vfiprintf_r>:
 80077b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b8:	460d      	mov	r5, r1
 80077ba:	b09d      	sub	sp, #116	; 0x74
 80077bc:	4614      	mov	r4, r2
 80077be:	4698      	mov	r8, r3
 80077c0:	4606      	mov	r6, r0
 80077c2:	b118      	cbz	r0, 80077cc <_vfiprintf_r+0x18>
 80077c4:	6983      	ldr	r3, [r0, #24]
 80077c6:	b90b      	cbnz	r3, 80077cc <_vfiprintf_r+0x18>
 80077c8:	f000 fb14 	bl	8007df4 <__sinit>
 80077cc:	4b89      	ldr	r3, [pc, #548]	; (80079f4 <_vfiprintf_r+0x240>)
 80077ce:	429d      	cmp	r5, r3
 80077d0:	d11b      	bne.n	800780a <_vfiprintf_r+0x56>
 80077d2:	6875      	ldr	r5, [r6, #4]
 80077d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077d6:	07d9      	lsls	r1, r3, #31
 80077d8:	d405      	bmi.n	80077e6 <_vfiprintf_r+0x32>
 80077da:	89ab      	ldrh	r3, [r5, #12]
 80077dc:	059a      	lsls	r2, r3, #22
 80077de:	d402      	bmi.n	80077e6 <_vfiprintf_r+0x32>
 80077e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077e2:	f000 fba5 	bl	8007f30 <__retarget_lock_acquire_recursive>
 80077e6:	89ab      	ldrh	r3, [r5, #12]
 80077e8:	071b      	lsls	r3, r3, #28
 80077ea:	d501      	bpl.n	80077f0 <_vfiprintf_r+0x3c>
 80077ec:	692b      	ldr	r3, [r5, #16]
 80077ee:	b9eb      	cbnz	r3, 800782c <_vfiprintf_r+0x78>
 80077f0:	4629      	mov	r1, r5
 80077f2:	4630      	mov	r0, r6
 80077f4:	f000 f96e 	bl	8007ad4 <__swsetup_r>
 80077f8:	b1c0      	cbz	r0, 800782c <_vfiprintf_r+0x78>
 80077fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077fc:	07dc      	lsls	r4, r3, #31
 80077fe:	d50e      	bpl.n	800781e <_vfiprintf_r+0x6a>
 8007800:	f04f 30ff 	mov.w	r0, #4294967295
 8007804:	b01d      	add	sp, #116	; 0x74
 8007806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780a:	4b7b      	ldr	r3, [pc, #492]	; (80079f8 <_vfiprintf_r+0x244>)
 800780c:	429d      	cmp	r5, r3
 800780e:	d101      	bne.n	8007814 <_vfiprintf_r+0x60>
 8007810:	68b5      	ldr	r5, [r6, #8]
 8007812:	e7df      	b.n	80077d4 <_vfiprintf_r+0x20>
 8007814:	4b79      	ldr	r3, [pc, #484]	; (80079fc <_vfiprintf_r+0x248>)
 8007816:	429d      	cmp	r5, r3
 8007818:	bf08      	it	eq
 800781a:	68f5      	ldreq	r5, [r6, #12]
 800781c:	e7da      	b.n	80077d4 <_vfiprintf_r+0x20>
 800781e:	89ab      	ldrh	r3, [r5, #12]
 8007820:	0598      	lsls	r0, r3, #22
 8007822:	d4ed      	bmi.n	8007800 <_vfiprintf_r+0x4c>
 8007824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007826:	f000 fb84 	bl	8007f32 <__retarget_lock_release_recursive>
 800782a:	e7e9      	b.n	8007800 <_vfiprintf_r+0x4c>
 800782c:	2300      	movs	r3, #0
 800782e:	9309      	str	r3, [sp, #36]	; 0x24
 8007830:	2320      	movs	r3, #32
 8007832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007836:	f8cd 800c 	str.w	r8, [sp, #12]
 800783a:	2330      	movs	r3, #48	; 0x30
 800783c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a00 <_vfiprintf_r+0x24c>
 8007840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007844:	f04f 0901 	mov.w	r9, #1
 8007848:	4623      	mov	r3, r4
 800784a:	469a      	mov	sl, r3
 800784c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007850:	b10a      	cbz	r2, 8007856 <_vfiprintf_r+0xa2>
 8007852:	2a25      	cmp	r2, #37	; 0x25
 8007854:	d1f9      	bne.n	800784a <_vfiprintf_r+0x96>
 8007856:	ebba 0b04 	subs.w	fp, sl, r4
 800785a:	d00b      	beq.n	8007874 <_vfiprintf_r+0xc0>
 800785c:	465b      	mov	r3, fp
 800785e:	4622      	mov	r2, r4
 8007860:	4629      	mov	r1, r5
 8007862:	4630      	mov	r0, r6
 8007864:	f7ff ff94 	bl	8007790 <__sfputs_r>
 8007868:	3001      	adds	r0, #1
 800786a:	f000 80aa 	beq.w	80079c2 <_vfiprintf_r+0x20e>
 800786e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007870:	445a      	add	r2, fp
 8007872:	9209      	str	r2, [sp, #36]	; 0x24
 8007874:	f89a 3000 	ldrb.w	r3, [sl]
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 80a2 	beq.w	80079c2 <_vfiprintf_r+0x20e>
 800787e:	2300      	movs	r3, #0
 8007880:	f04f 32ff 	mov.w	r2, #4294967295
 8007884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007888:	f10a 0a01 	add.w	sl, sl, #1
 800788c:	9304      	str	r3, [sp, #16]
 800788e:	9307      	str	r3, [sp, #28]
 8007890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007894:	931a      	str	r3, [sp, #104]	; 0x68
 8007896:	4654      	mov	r4, sl
 8007898:	2205      	movs	r2, #5
 800789a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800789e:	4858      	ldr	r0, [pc, #352]	; (8007a00 <_vfiprintf_r+0x24c>)
 80078a0:	f7f8 fc9e 	bl	80001e0 <memchr>
 80078a4:	9a04      	ldr	r2, [sp, #16]
 80078a6:	b9d8      	cbnz	r0, 80078e0 <_vfiprintf_r+0x12c>
 80078a8:	06d1      	lsls	r1, r2, #27
 80078aa:	bf44      	itt	mi
 80078ac:	2320      	movmi	r3, #32
 80078ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078b2:	0713      	lsls	r3, r2, #28
 80078b4:	bf44      	itt	mi
 80078b6:	232b      	movmi	r3, #43	; 0x2b
 80078b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078bc:	f89a 3000 	ldrb.w	r3, [sl]
 80078c0:	2b2a      	cmp	r3, #42	; 0x2a
 80078c2:	d015      	beq.n	80078f0 <_vfiprintf_r+0x13c>
 80078c4:	9a07      	ldr	r2, [sp, #28]
 80078c6:	4654      	mov	r4, sl
 80078c8:	2000      	movs	r0, #0
 80078ca:	f04f 0c0a 	mov.w	ip, #10
 80078ce:	4621      	mov	r1, r4
 80078d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078d4:	3b30      	subs	r3, #48	; 0x30
 80078d6:	2b09      	cmp	r3, #9
 80078d8:	d94e      	bls.n	8007978 <_vfiprintf_r+0x1c4>
 80078da:	b1b0      	cbz	r0, 800790a <_vfiprintf_r+0x156>
 80078dc:	9207      	str	r2, [sp, #28]
 80078de:	e014      	b.n	800790a <_vfiprintf_r+0x156>
 80078e0:	eba0 0308 	sub.w	r3, r0, r8
 80078e4:	fa09 f303 	lsl.w	r3, r9, r3
 80078e8:	4313      	orrs	r3, r2
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	46a2      	mov	sl, r4
 80078ee:	e7d2      	b.n	8007896 <_vfiprintf_r+0xe2>
 80078f0:	9b03      	ldr	r3, [sp, #12]
 80078f2:	1d19      	adds	r1, r3, #4
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	9103      	str	r1, [sp, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bfbb      	ittet	lt
 80078fc:	425b      	neglt	r3, r3
 80078fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007902:	9307      	strge	r3, [sp, #28]
 8007904:	9307      	strlt	r3, [sp, #28]
 8007906:	bfb8      	it	lt
 8007908:	9204      	strlt	r2, [sp, #16]
 800790a:	7823      	ldrb	r3, [r4, #0]
 800790c:	2b2e      	cmp	r3, #46	; 0x2e
 800790e:	d10c      	bne.n	800792a <_vfiprintf_r+0x176>
 8007910:	7863      	ldrb	r3, [r4, #1]
 8007912:	2b2a      	cmp	r3, #42	; 0x2a
 8007914:	d135      	bne.n	8007982 <_vfiprintf_r+0x1ce>
 8007916:	9b03      	ldr	r3, [sp, #12]
 8007918:	1d1a      	adds	r2, r3, #4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	9203      	str	r2, [sp, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	bfb8      	it	lt
 8007922:	f04f 33ff 	movlt.w	r3, #4294967295
 8007926:	3402      	adds	r4, #2
 8007928:	9305      	str	r3, [sp, #20]
 800792a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a10 <_vfiprintf_r+0x25c>
 800792e:	7821      	ldrb	r1, [r4, #0]
 8007930:	2203      	movs	r2, #3
 8007932:	4650      	mov	r0, sl
 8007934:	f7f8 fc54 	bl	80001e0 <memchr>
 8007938:	b140      	cbz	r0, 800794c <_vfiprintf_r+0x198>
 800793a:	2340      	movs	r3, #64	; 0x40
 800793c:	eba0 000a 	sub.w	r0, r0, sl
 8007940:	fa03 f000 	lsl.w	r0, r3, r0
 8007944:	9b04      	ldr	r3, [sp, #16]
 8007946:	4303      	orrs	r3, r0
 8007948:	3401      	adds	r4, #1
 800794a:	9304      	str	r3, [sp, #16]
 800794c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007950:	482c      	ldr	r0, [pc, #176]	; (8007a04 <_vfiprintf_r+0x250>)
 8007952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007956:	2206      	movs	r2, #6
 8007958:	f7f8 fc42 	bl	80001e0 <memchr>
 800795c:	2800      	cmp	r0, #0
 800795e:	d03f      	beq.n	80079e0 <_vfiprintf_r+0x22c>
 8007960:	4b29      	ldr	r3, [pc, #164]	; (8007a08 <_vfiprintf_r+0x254>)
 8007962:	bb1b      	cbnz	r3, 80079ac <_vfiprintf_r+0x1f8>
 8007964:	9b03      	ldr	r3, [sp, #12]
 8007966:	3307      	adds	r3, #7
 8007968:	f023 0307 	bic.w	r3, r3, #7
 800796c:	3308      	adds	r3, #8
 800796e:	9303      	str	r3, [sp, #12]
 8007970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007972:	443b      	add	r3, r7
 8007974:	9309      	str	r3, [sp, #36]	; 0x24
 8007976:	e767      	b.n	8007848 <_vfiprintf_r+0x94>
 8007978:	fb0c 3202 	mla	r2, ip, r2, r3
 800797c:	460c      	mov	r4, r1
 800797e:	2001      	movs	r0, #1
 8007980:	e7a5      	b.n	80078ce <_vfiprintf_r+0x11a>
 8007982:	2300      	movs	r3, #0
 8007984:	3401      	adds	r4, #1
 8007986:	9305      	str	r3, [sp, #20]
 8007988:	4619      	mov	r1, r3
 800798a:	f04f 0c0a 	mov.w	ip, #10
 800798e:	4620      	mov	r0, r4
 8007990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007994:	3a30      	subs	r2, #48	; 0x30
 8007996:	2a09      	cmp	r2, #9
 8007998:	d903      	bls.n	80079a2 <_vfiprintf_r+0x1ee>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0c5      	beq.n	800792a <_vfiprintf_r+0x176>
 800799e:	9105      	str	r1, [sp, #20]
 80079a0:	e7c3      	b.n	800792a <_vfiprintf_r+0x176>
 80079a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80079a6:	4604      	mov	r4, r0
 80079a8:	2301      	movs	r3, #1
 80079aa:	e7f0      	b.n	800798e <_vfiprintf_r+0x1da>
 80079ac:	ab03      	add	r3, sp, #12
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	462a      	mov	r2, r5
 80079b2:	4b16      	ldr	r3, [pc, #88]	; (8007a0c <_vfiprintf_r+0x258>)
 80079b4:	a904      	add	r1, sp, #16
 80079b6:	4630      	mov	r0, r6
 80079b8:	f7fd fdd6 	bl	8005568 <_printf_float>
 80079bc:	4607      	mov	r7, r0
 80079be:	1c78      	adds	r0, r7, #1
 80079c0:	d1d6      	bne.n	8007970 <_vfiprintf_r+0x1bc>
 80079c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079c4:	07d9      	lsls	r1, r3, #31
 80079c6:	d405      	bmi.n	80079d4 <_vfiprintf_r+0x220>
 80079c8:	89ab      	ldrh	r3, [r5, #12]
 80079ca:	059a      	lsls	r2, r3, #22
 80079cc:	d402      	bmi.n	80079d4 <_vfiprintf_r+0x220>
 80079ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079d0:	f000 faaf 	bl	8007f32 <__retarget_lock_release_recursive>
 80079d4:	89ab      	ldrh	r3, [r5, #12]
 80079d6:	065b      	lsls	r3, r3, #25
 80079d8:	f53f af12 	bmi.w	8007800 <_vfiprintf_r+0x4c>
 80079dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079de:	e711      	b.n	8007804 <_vfiprintf_r+0x50>
 80079e0:	ab03      	add	r3, sp, #12
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	462a      	mov	r2, r5
 80079e6:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <_vfiprintf_r+0x258>)
 80079e8:	a904      	add	r1, sp, #16
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7fe f860 	bl	8005ab0 <_printf_i>
 80079f0:	e7e4      	b.n	80079bc <_vfiprintf_r+0x208>
 80079f2:	bf00      	nop
 80079f4:	08008624 	.word	0x08008624
 80079f8:	08008644 	.word	0x08008644
 80079fc:	08008604 	.word	0x08008604
 8007a00:	080084ac 	.word	0x080084ac
 8007a04:	080084b6 	.word	0x080084b6
 8007a08:	08005569 	.word	0x08005569
 8007a0c:	08007791 	.word	0x08007791
 8007a10:	080084b2 	.word	0x080084b2

08007a14 <__swbuf_r>:
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	460e      	mov	r6, r1
 8007a18:	4614      	mov	r4, r2
 8007a1a:	4605      	mov	r5, r0
 8007a1c:	b118      	cbz	r0, 8007a26 <__swbuf_r+0x12>
 8007a1e:	6983      	ldr	r3, [r0, #24]
 8007a20:	b90b      	cbnz	r3, 8007a26 <__swbuf_r+0x12>
 8007a22:	f000 f9e7 	bl	8007df4 <__sinit>
 8007a26:	4b21      	ldr	r3, [pc, #132]	; (8007aac <__swbuf_r+0x98>)
 8007a28:	429c      	cmp	r4, r3
 8007a2a:	d12b      	bne.n	8007a84 <__swbuf_r+0x70>
 8007a2c:	686c      	ldr	r4, [r5, #4]
 8007a2e:	69a3      	ldr	r3, [r4, #24]
 8007a30:	60a3      	str	r3, [r4, #8]
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	071a      	lsls	r2, r3, #28
 8007a36:	d52f      	bpl.n	8007a98 <__swbuf_r+0x84>
 8007a38:	6923      	ldr	r3, [r4, #16]
 8007a3a:	b36b      	cbz	r3, 8007a98 <__swbuf_r+0x84>
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	6820      	ldr	r0, [r4, #0]
 8007a40:	1ac0      	subs	r0, r0, r3
 8007a42:	6963      	ldr	r3, [r4, #20]
 8007a44:	b2f6      	uxtb	r6, r6
 8007a46:	4283      	cmp	r3, r0
 8007a48:	4637      	mov	r7, r6
 8007a4a:	dc04      	bgt.n	8007a56 <__swbuf_r+0x42>
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	4628      	mov	r0, r5
 8007a50:	f000 f93c 	bl	8007ccc <_fflush_r>
 8007a54:	bb30      	cbnz	r0, 8007aa4 <__swbuf_r+0x90>
 8007a56:	68a3      	ldr	r3, [r4, #8]
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	60a3      	str	r3, [r4, #8]
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	6022      	str	r2, [r4, #0]
 8007a62:	701e      	strb	r6, [r3, #0]
 8007a64:	6963      	ldr	r3, [r4, #20]
 8007a66:	3001      	adds	r0, #1
 8007a68:	4283      	cmp	r3, r0
 8007a6a:	d004      	beq.n	8007a76 <__swbuf_r+0x62>
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	07db      	lsls	r3, r3, #31
 8007a70:	d506      	bpl.n	8007a80 <__swbuf_r+0x6c>
 8007a72:	2e0a      	cmp	r6, #10
 8007a74:	d104      	bne.n	8007a80 <__swbuf_r+0x6c>
 8007a76:	4621      	mov	r1, r4
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f000 f927 	bl	8007ccc <_fflush_r>
 8007a7e:	b988      	cbnz	r0, 8007aa4 <__swbuf_r+0x90>
 8007a80:	4638      	mov	r0, r7
 8007a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a84:	4b0a      	ldr	r3, [pc, #40]	; (8007ab0 <__swbuf_r+0x9c>)
 8007a86:	429c      	cmp	r4, r3
 8007a88:	d101      	bne.n	8007a8e <__swbuf_r+0x7a>
 8007a8a:	68ac      	ldr	r4, [r5, #8]
 8007a8c:	e7cf      	b.n	8007a2e <__swbuf_r+0x1a>
 8007a8e:	4b09      	ldr	r3, [pc, #36]	; (8007ab4 <__swbuf_r+0xa0>)
 8007a90:	429c      	cmp	r4, r3
 8007a92:	bf08      	it	eq
 8007a94:	68ec      	ldreq	r4, [r5, #12]
 8007a96:	e7ca      	b.n	8007a2e <__swbuf_r+0x1a>
 8007a98:	4621      	mov	r1, r4
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	f000 f81a 	bl	8007ad4 <__swsetup_r>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d0cb      	beq.n	8007a3c <__swbuf_r+0x28>
 8007aa4:	f04f 37ff 	mov.w	r7, #4294967295
 8007aa8:	e7ea      	b.n	8007a80 <__swbuf_r+0x6c>
 8007aaa:	bf00      	nop
 8007aac:	08008624 	.word	0x08008624
 8007ab0:	08008644 	.word	0x08008644
 8007ab4:	08008604 	.word	0x08008604

08007ab8 <__ascii_wctomb>:
 8007ab8:	b149      	cbz	r1, 8007ace <__ascii_wctomb+0x16>
 8007aba:	2aff      	cmp	r2, #255	; 0xff
 8007abc:	bf85      	ittet	hi
 8007abe:	238a      	movhi	r3, #138	; 0x8a
 8007ac0:	6003      	strhi	r3, [r0, #0]
 8007ac2:	700a      	strbls	r2, [r1, #0]
 8007ac4:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ac8:	bf98      	it	ls
 8007aca:	2001      	movls	r0, #1
 8007acc:	4770      	bx	lr
 8007ace:	4608      	mov	r0, r1
 8007ad0:	4770      	bx	lr
	...

08007ad4 <__swsetup_r>:
 8007ad4:	4b32      	ldr	r3, [pc, #200]	; (8007ba0 <__swsetup_r+0xcc>)
 8007ad6:	b570      	push	{r4, r5, r6, lr}
 8007ad8:	681d      	ldr	r5, [r3, #0]
 8007ada:	4606      	mov	r6, r0
 8007adc:	460c      	mov	r4, r1
 8007ade:	b125      	cbz	r5, 8007aea <__swsetup_r+0x16>
 8007ae0:	69ab      	ldr	r3, [r5, #24]
 8007ae2:	b913      	cbnz	r3, 8007aea <__swsetup_r+0x16>
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f000 f985 	bl	8007df4 <__sinit>
 8007aea:	4b2e      	ldr	r3, [pc, #184]	; (8007ba4 <__swsetup_r+0xd0>)
 8007aec:	429c      	cmp	r4, r3
 8007aee:	d10f      	bne.n	8007b10 <__swsetup_r+0x3c>
 8007af0:	686c      	ldr	r4, [r5, #4]
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007af8:	0719      	lsls	r1, r3, #28
 8007afa:	d42c      	bmi.n	8007b56 <__swsetup_r+0x82>
 8007afc:	06dd      	lsls	r5, r3, #27
 8007afe:	d411      	bmi.n	8007b24 <__swsetup_r+0x50>
 8007b00:	2309      	movs	r3, #9
 8007b02:	6033      	str	r3, [r6, #0]
 8007b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b08:	81a3      	strh	r3, [r4, #12]
 8007b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0e:	e03e      	b.n	8007b8e <__swsetup_r+0xba>
 8007b10:	4b25      	ldr	r3, [pc, #148]	; (8007ba8 <__swsetup_r+0xd4>)
 8007b12:	429c      	cmp	r4, r3
 8007b14:	d101      	bne.n	8007b1a <__swsetup_r+0x46>
 8007b16:	68ac      	ldr	r4, [r5, #8]
 8007b18:	e7eb      	b.n	8007af2 <__swsetup_r+0x1e>
 8007b1a:	4b24      	ldr	r3, [pc, #144]	; (8007bac <__swsetup_r+0xd8>)
 8007b1c:	429c      	cmp	r4, r3
 8007b1e:	bf08      	it	eq
 8007b20:	68ec      	ldreq	r4, [r5, #12]
 8007b22:	e7e6      	b.n	8007af2 <__swsetup_r+0x1e>
 8007b24:	0758      	lsls	r0, r3, #29
 8007b26:	d512      	bpl.n	8007b4e <__swsetup_r+0x7a>
 8007b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b2a:	b141      	cbz	r1, 8007b3e <__swsetup_r+0x6a>
 8007b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b30:	4299      	cmp	r1, r3
 8007b32:	d002      	beq.n	8007b3a <__swsetup_r+0x66>
 8007b34:	4630      	mov	r0, r6
 8007b36:	f7ff fb31 	bl	800719c <_free_r>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	2300      	movs	r3, #0
 8007b48:	6063      	str	r3, [r4, #4]
 8007b4a:	6923      	ldr	r3, [r4, #16]
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	f043 0308 	orr.w	r3, r3, #8
 8007b54:	81a3      	strh	r3, [r4, #12]
 8007b56:	6923      	ldr	r3, [r4, #16]
 8007b58:	b94b      	cbnz	r3, 8007b6e <__swsetup_r+0x9a>
 8007b5a:	89a3      	ldrh	r3, [r4, #12]
 8007b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b64:	d003      	beq.n	8007b6e <__swsetup_r+0x9a>
 8007b66:	4621      	mov	r1, r4
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f000 fa09 	bl	8007f80 <__smakebuf_r>
 8007b6e:	89a0      	ldrh	r0, [r4, #12]
 8007b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b74:	f010 0301 	ands.w	r3, r0, #1
 8007b78:	d00a      	beq.n	8007b90 <__swsetup_r+0xbc>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60a3      	str	r3, [r4, #8]
 8007b7e:	6963      	ldr	r3, [r4, #20]
 8007b80:	425b      	negs	r3, r3
 8007b82:	61a3      	str	r3, [r4, #24]
 8007b84:	6923      	ldr	r3, [r4, #16]
 8007b86:	b943      	cbnz	r3, 8007b9a <__swsetup_r+0xc6>
 8007b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b8c:	d1ba      	bne.n	8007b04 <__swsetup_r+0x30>
 8007b8e:	bd70      	pop	{r4, r5, r6, pc}
 8007b90:	0781      	lsls	r1, r0, #30
 8007b92:	bf58      	it	pl
 8007b94:	6963      	ldrpl	r3, [r4, #20]
 8007b96:	60a3      	str	r3, [r4, #8]
 8007b98:	e7f4      	b.n	8007b84 <__swsetup_r+0xb0>
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	e7f7      	b.n	8007b8e <__swsetup_r+0xba>
 8007b9e:	bf00      	nop
 8007ba0:	2000000c 	.word	0x2000000c
 8007ba4:	08008624 	.word	0x08008624
 8007ba8:	08008644 	.word	0x08008644
 8007bac:	08008604 	.word	0x08008604

08007bb0 <abort>:
 8007bb0:	b508      	push	{r3, lr}
 8007bb2:	2006      	movs	r0, #6
 8007bb4:	f000 fa54 	bl	8008060 <raise>
 8007bb8:	2001      	movs	r0, #1
 8007bba:	f7f9 ffdf 	bl	8001b7c <_exit>
	...

08007bc0 <__sflush_r>:
 8007bc0:	898a      	ldrh	r2, [r1, #12]
 8007bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	0710      	lsls	r0, r2, #28
 8007bca:	460c      	mov	r4, r1
 8007bcc:	d458      	bmi.n	8007c80 <__sflush_r+0xc0>
 8007bce:	684b      	ldr	r3, [r1, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	dc05      	bgt.n	8007be0 <__sflush_r+0x20>
 8007bd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	dc02      	bgt.n	8007be0 <__sflush_r+0x20>
 8007bda:	2000      	movs	r0, #0
 8007bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007be2:	2e00      	cmp	r6, #0
 8007be4:	d0f9      	beq.n	8007bda <__sflush_r+0x1a>
 8007be6:	2300      	movs	r3, #0
 8007be8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bec:	682f      	ldr	r7, [r5, #0]
 8007bee:	602b      	str	r3, [r5, #0]
 8007bf0:	d032      	beq.n	8007c58 <__sflush_r+0x98>
 8007bf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	075a      	lsls	r2, r3, #29
 8007bf8:	d505      	bpl.n	8007c06 <__sflush_r+0x46>
 8007bfa:	6863      	ldr	r3, [r4, #4]
 8007bfc:	1ac0      	subs	r0, r0, r3
 8007bfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c00:	b10b      	cbz	r3, 8007c06 <__sflush_r+0x46>
 8007c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c04:	1ac0      	subs	r0, r0, r3
 8007c06:	2300      	movs	r3, #0
 8007c08:	4602      	mov	r2, r0
 8007c0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c0c:	6a21      	ldr	r1, [r4, #32]
 8007c0e:	4628      	mov	r0, r5
 8007c10:	47b0      	blx	r6
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	d106      	bne.n	8007c26 <__sflush_r+0x66>
 8007c18:	6829      	ldr	r1, [r5, #0]
 8007c1a:	291d      	cmp	r1, #29
 8007c1c:	d82c      	bhi.n	8007c78 <__sflush_r+0xb8>
 8007c1e:	4a2a      	ldr	r2, [pc, #168]	; (8007cc8 <__sflush_r+0x108>)
 8007c20:	40ca      	lsrs	r2, r1
 8007c22:	07d6      	lsls	r6, r2, #31
 8007c24:	d528      	bpl.n	8007c78 <__sflush_r+0xb8>
 8007c26:	2200      	movs	r2, #0
 8007c28:	6062      	str	r2, [r4, #4]
 8007c2a:	04d9      	lsls	r1, r3, #19
 8007c2c:	6922      	ldr	r2, [r4, #16]
 8007c2e:	6022      	str	r2, [r4, #0]
 8007c30:	d504      	bpl.n	8007c3c <__sflush_r+0x7c>
 8007c32:	1c42      	adds	r2, r0, #1
 8007c34:	d101      	bne.n	8007c3a <__sflush_r+0x7a>
 8007c36:	682b      	ldr	r3, [r5, #0]
 8007c38:	b903      	cbnz	r3, 8007c3c <__sflush_r+0x7c>
 8007c3a:	6560      	str	r0, [r4, #84]	; 0x54
 8007c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c3e:	602f      	str	r7, [r5, #0]
 8007c40:	2900      	cmp	r1, #0
 8007c42:	d0ca      	beq.n	8007bda <__sflush_r+0x1a>
 8007c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c48:	4299      	cmp	r1, r3
 8007c4a:	d002      	beq.n	8007c52 <__sflush_r+0x92>
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	f7ff faa5 	bl	800719c <_free_r>
 8007c52:	2000      	movs	r0, #0
 8007c54:	6360      	str	r0, [r4, #52]	; 0x34
 8007c56:	e7c1      	b.n	8007bdc <__sflush_r+0x1c>
 8007c58:	6a21      	ldr	r1, [r4, #32]
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b0      	blx	r6
 8007c60:	1c41      	adds	r1, r0, #1
 8007c62:	d1c7      	bne.n	8007bf4 <__sflush_r+0x34>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d0c4      	beq.n	8007bf4 <__sflush_r+0x34>
 8007c6a:	2b1d      	cmp	r3, #29
 8007c6c:	d001      	beq.n	8007c72 <__sflush_r+0xb2>
 8007c6e:	2b16      	cmp	r3, #22
 8007c70:	d101      	bne.n	8007c76 <__sflush_r+0xb6>
 8007c72:	602f      	str	r7, [r5, #0]
 8007c74:	e7b1      	b.n	8007bda <__sflush_r+0x1a>
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c7c:	81a3      	strh	r3, [r4, #12]
 8007c7e:	e7ad      	b.n	8007bdc <__sflush_r+0x1c>
 8007c80:	690f      	ldr	r7, [r1, #16]
 8007c82:	2f00      	cmp	r7, #0
 8007c84:	d0a9      	beq.n	8007bda <__sflush_r+0x1a>
 8007c86:	0793      	lsls	r3, r2, #30
 8007c88:	680e      	ldr	r6, [r1, #0]
 8007c8a:	bf08      	it	eq
 8007c8c:	694b      	ldreq	r3, [r1, #20]
 8007c8e:	600f      	str	r7, [r1, #0]
 8007c90:	bf18      	it	ne
 8007c92:	2300      	movne	r3, #0
 8007c94:	eba6 0807 	sub.w	r8, r6, r7
 8007c98:	608b      	str	r3, [r1, #8]
 8007c9a:	f1b8 0f00 	cmp.w	r8, #0
 8007c9e:	dd9c      	ble.n	8007bda <__sflush_r+0x1a>
 8007ca0:	6a21      	ldr	r1, [r4, #32]
 8007ca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ca4:	4643      	mov	r3, r8
 8007ca6:	463a      	mov	r2, r7
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b0      	blx	r6
 8007cac:	2800      	cmp	r0, #0
 8007cae:	dc06      	bgt.n	8007cbe <__sflush_r+0xfe>
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cb6:	81a3      	strh	r3, [r4, #12]
 8007cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbc:	e78e      	b.n	8007bdc <__sflush_r+0x1c>
 8007cbe:	4407      	add	r7, r0
 8007cc0:	eba8 0800 	sub.w	r8, r8, r0
 8007cc4:	e7e9      	b.n	8007c9a <__sflush_r+0xda>
 8007cc6:	bf00      	nop
 8007cc8:	20400001 	.word	0x20400001

08007ccc <_fflush_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	690b      	ldr	r3, [r1, #16]
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	b913      	cbnz	r3, 8007cdc <_fflush_r+0x10>
 8007cd6:	2500      	movs	r5, #0
 8007cd8:	4628      	mov	r0, r5
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	b118      	cbz	r0, 8007ce6 <_fflush_r+0x1a>
 8007cde:	6983      	ldr	r3, [r0, #24]
 8007ce0:	b90b      	cbnz	r3, 8007ce6 <_fflush_r+0x1a>
 8007ce2:	f000 f887 	bl	8007df4 <__sinit>
 8007ce6:	4b14      	ldr	r3, [pc, #80]	; (8007d38 <_fflush_r+0x6c>)
 8007ce8:	429c      	cmp	r4, r3
 8007cea:	d11b      	bne.n	8007d24 <_fflush_r+0x58>
 8007cec:	686c      	ldr	r4, [r5, #4]
 8007cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0ef      	beq.n	8007cd6 <_fflush_r+0xa>
 8007cf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cf8:	07d0      	lsls	r0, r2, #31
 8007cfa:	d404      	bmi.n	8007d06 <_fflush_r+0x3a>
 8007cfc:	0599      	lsls	r1, r3, #22
 8007cfe:	d402      	bmi.n	8007d06 <_fflush_r+0x3a>
 8007d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d02:	f000 f915 	bl	8007f30 <__retarget_lock_acquire_recursive>
 8007d06:	4628      	mov	r0, r5
 8007d08:	4621      	mov	r1, r4
 8007d0a:	f7ff ff59 	bl	8007bc0 <__sflush_r>
 8007d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d10:	07da      	lsls	r2, r3, #31
 8007d12:	4605      	mov	r5, r0
 8007d14:	d4e0      	bmi.n	8007cd8 <_fflush_r+0xc>
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	059b      	lsls	r3, r3, #22
 8007d1a:	d4dd      	bmi.n	8007cd8 <_fflush_r+0xc>
 8007d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d1e:	f000 f908 	bl	8007f32 <__retarget_lock_release_recursive>
 8007d22:	e7d9      	b.n	8007cd8 <_fflush_r+0xc>
 8007d24:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <_fflush_r+0x70>)
 8007d26:	429c      	cmp	r4, r3
 8007d28:	d101      	bne.n	8007d2e <_fflush_r+0x62>
 8007d2a:	68ac      	ldr	r4, [r5, #8]
 8007d2c:	e7df      	b.n	8007cee <_fflush_r+0x22>
 8007d2e:	4b04      	ldr	r3, [pc, #16]	; (8007d40 <_fflush_r+0x74>)
 8007d30:	429c      	cmp	r4, r3
 8007d32:	bf08      	it	eq
 8007d34:	68ec      	ldreq	r4, [r5, #12]
 8007d36:	e7da      	b.n	8007cee <_fflush_r+0x22>
 8007d38:	08008624 	.word	0x08008624
 8007d3c:	08008644 	.word	0x08008644
 8007d40:	08008604 	.word	0x08008604

08007d44 <std>:
 8007d44:	2300      	movs	r3, #0
 8007d46:	b510      	push	{r4, lr}
 8007d48:	4604      	mov	r4, r0
 8007d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d52:	6083      	str	r3, [r0, #8]
 8007d54:	8181      	strh	r1, [r0, #12]
 8007d56:	6643      	str	r3, [r0, #100]	; 0x64
 8007d58:	81c2      	strh	r2, [r0, #14]
 8007d5a:	6183      	str	r3, [r0, #24]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	2208      	movs	r2, #8
 8007d60:	305c      	adds	r0, #92	; 0x5c
 8007d62:	f7fd fb59 	bl	8005418 <memset>
 8007d66:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <std+0x38>)
 8007d68:	6263      	str	r3, [r4, #36]	; 0x24
 8007d6a:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <std+0x3c>)
 8007d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <std+0x40>)
 8007d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d72:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <std+0x44>)
 8007d74:	6224      	str	r4, [r4, #32]
 8007d76:	6323      	str	r3, [r4, #48]	; 0x30
 8007d78:	bd10      	pop	{r4, pc}
 8007d7a:	bf00      	nop
 8007d7c:	08008099 	.word	0x08008099
 8007d80:	080080bb 	.word	0x080080bb
 8007d84:	080080f3 	.word	0x080080f3
 8007d88:	08008117 	.word	0x08008117

08007d8c <_cleanup_r>:
 8007d8c:	4901      	ldr	r1, [pc, #4]	; (8007d94 <_cleanup_r+0x8>)
 8007d8e:	f000 b8af 	b.w	8007ef0 <_fwalk_reent>
 8007d92:	bf00      	nop
 8007d94:	08007ccd 	.word	0x08007ccd

08007d98 <__sfmoreglue>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	2268      	movs	r2, #104	; 0x68
 8007d9c:	1e4d      	subs	r5, r1, #1
 8007d9e:	4355      	muls	r5, r2
 8007da0:	460e      	mov	r6, r1
 8007da2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007da6:	f7ff fa65 	bl	8007274 <_malloc_r>
 8007daa:	4604      	mov	r4, r0
 8007dac:	b140      	cbz	r0, 8007dc0 <__sfmoreglue+0x28>
 8007dae:	2100      	movs	r1, #0
 8007db0:	e9c0 1600 	strd	r1, r6, [r0]
 8007db4:	300c      	adds	r0, #12
 8007db6:	60a0      	str	r0, [r4, #8]
 8007db8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007dbc:	f7fd fb2c 	bl	8005418 <memset>
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	bd70      	pop	{r4, r5, r6, pc}

08007dc4 <__sfp_lock_acquire>:
 8007dc4:	4801      	ldr	r0, [pc, #4]	; (8007dcc <__sfp_lock_acquire+0x8>)
 8007dc6:	f000 b8b3 	b.w	8007f30 <__retarget_lock_acquire_recursive>
 8007dca:	bf00      	nop
 8007dcc:	20000345 	.word	0x20000345

08007dd0 <__sfp_lock_release>:
 8007dd0:	4801      	ldr	r0, [pc, #4]	; (8007dd8 <__sfp_lock_release+0x8>)
 8007dd2:	f000 b8ae 	b.w	8007f32 <__retarget_lock_release_recursive>
 8007dd6:	bf00      	nop
 8007dd8:	20000345 	.word	0x20000345

08007ddc <__sinit_lock_acquire>:
 8007ddc:	4801      	ldr	r0, [pc, #4]	; (8007de4 <__sinit_lock_acquire+0x8>)
 8007dde:	f000 b8a7 	b.w	8007f30 <__retarget_lock_acquire_recursive>
 8007de2:	bf00      	nop
 8007de4:	20000346 	.word	0x20000346

08007de8 <__sinit_lock_release>:
 8007de8:	4801      	ldr	r0, [pc, #4]	; (8007df0 <__sinit_lock_release+0x8>)
 8007dea:	f000 b8a2 	b.w	8007f32 <__retarget_lock_release_recursive>
 8007dee:	bf00      	nop
 8007df0:	20000346 	.word	0x20000346

08007df4 <__sinit>:
 8007df4:	b510      	push	{r4, lr}
 8007df6:	4604      	mov	r4, r0
 8007df8:	f7ff fff0 	bl	8007ddc <__sinit_lock_acquire>
 8007dfc:	69a3      	ldr	r3, [r4, #24]
 8007dfe:	b11b      	cbz	r3, 8007e08 <__sinit+0x14>
 8007e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e04:	f7ff bff0 	b.w	8007de8 <__sinit_lock_release>
 8007e08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e0c:	6523      	str	r3, [r4, #80]	; 0x50
 8007e0e:	4b13      	ldr	r3, [pc, #76]	; (8007e5c <__sinit+0x68>)
 8007e10:	4a13      	ldr	r2, [pc, #76]	; (8007e60 <__sinit+0x6c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e16:	42a3      	cmp	r3, r4
 8007e18:	bf04      	itt	eq
 8007e1a:	2301      	moveq	r3, #1
 8007e1c:	61a3      	streq	r3, [r4, #24]
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 f820 	bl	8007e64 <__sfp>
 8007e24:	6060      	str	r0, [r4, #4]
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 f81c 	bl	8007e64 <__sfp>
 8007e2c:	60a0      	str	r0, [r4, #8]
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 f818 	bl	8007e64 <__sfp>
 8007e34:	2200      	movs	r2, #0
 8007e36:	60e0      	str	r0, [r4, #12]
 8007e38:	2104      	movs	r1, #4
 8007e3a:	6860      	ldr	r0, [r4, #4]
 8007e3c:	f7ff ff82 	bl	8007d44 <std>
 8007e40:	68a0      	ldr	r0, [r4, #8]
 8007e42:	2201      	movs	r2, #1
 8007e44:	2109      	movs	r1, #9
 8007e46:	f7ff ff7d 	bl	8007d44 <std>
 8007e4a:	68e0      	ldr	r0, [r4, #12]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	2112      	movs	r1, #18
 8007e50:	f7ff ff78 	bl	8007d44 <std>
 8007e54:	2301      	movs	r3, #1
 8007e56:	61a3      	str	r3, [r4, #24]
 8007e58:	e7d2      	b.n	8007e00 <__sinit+0xc>
 8007e5a:	bf00      	nop
 8007e5c:	0800828c 	.word	0x0800828c
 8007e60:	08007d8d 	.word	0x08007d8d

08007e64 <__sfp>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	4607      	mov	r7, r0
 8007e68:	f7ff ffac 	bl	8007dc4 <__sfp_lock_acquire>
 8007e6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ee8 <__sfp+0x84>)
 8007e6e:	681e      	ldr	r6, [r3, #0]
 8007e70:	69b3      	ldr	r3, [r6, #24]
 8007e72:	b913      	cbnz	r3, 8007e7a <__sfp+0x16>
 8007e74:	4630      	mov	r0, r6
 8007e76:	f7ff ffbd 	bl	8007df4 <__sinit>
 8007e7a:	3648      	adds	r6, #72	; 0x48
 8007e7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	d503      	bpl.n	8007e8c <__sfp+0x28>
 8007e84:	6833      	ldr	r3, [r6, #0]
 8007e86:	b30b      	cbz	r3, 8007ecc <__sfp+0x68>
 8007e88:	6836      	ldr	r6, [r6, #0]
 8007e8a:	e7f7      	b.n	8007e7c <__sfp+0x18>
 8007e8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e90:	b9d5      	cbnz	r5, 8007ec8 <__sfp+0x64>
 8007e92:	4b16      	ldr	r3, [pc, #88]	; (8007eec <__sfp+0x88>)
 8007e94:	60e3      	str	r3, [r4, #12]
 8007e96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e9a:	6665      	str	r5, [r4, #100]	; 0x64
 8007e9c:	f000 f847 	bl	8007f2e <__retarget_lock_init_recursive>
 8007ea0:	f7ff ff96 	bl	8007dd0 <__sfp_lock_release>
 8007ea4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ea8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007eac:	6025      	str	r5, [r4, #0]
 8007eae:	61a5      	str	r5, [r4, #24]
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007eb8:	f7fd faae 	bl	8005418 <memset>
 8007ebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ec0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec8:	3468      	adds	r4, #104	; 0x68
 8007eca:	e7d9      	b.n	8007e80 <__sfp+0x1c>
 8007ecc:	2104      	movs	r1, #4
 8007ece:	4638      	mov	r0, r7
 8007ed0:	f7ff ff62 	bl	8007d98 <__sfmoreglue>
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	6030      	str	r0, [r6, #0]
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d1d5      	bne.n	8007e88 <__sfp+0x24>
 8007edc:	f7ff ff78 	bl	8007dd0 <__sfp_lock_release>
 8007ee0:	230c      	movs	r3, #12
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	e7ee      	b.n	8007ec4 <__sfp+0x60>
 8007ee6:	bf00      	nop
 8007ee8:	0800828c 	.word	0x0800828c
 8007eec:	ffff0001 	.word	0xffff0001

08007ef0 <_fwalk_reent>:
 8007ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	4688      	mov	r8, r1
 8007ef8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007efc:	2700      	movs	r7, #0
 8007efe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f02:	f1b9 0901 	subs.w	r9, r9, #1
 8007f06:	d505      	bpl.n	8007f14 <_fwalk_reent+0x24>
 8007f08:	6824      	ldr	r4, [r4, #0]
 8007f0a:	2c00      	cmp	r4, #0
 8007f0c:	d1f7      	bne.n	8007efe <_fwalk_reent+0xe>
 8007f0e:	4638      	mov	r0, r7
 8007f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f14:	89ab      	ldrh	r3, [r5, #12]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d907      	bls.n	8007f2a <_fwalk_reent+0x3a>
 8007f1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	d003      	beq.n	8007f2a <_fwalk_reent+0x3a>
 8007f22:	4629      	mov	r1, r5
 8007f24:	4630      	mov	r0, r6
 8007f26:	47c0      	blx	r8
 8007f28:	4307      	orrs	r7, r0
 8007f2a:	3568      	adds	r5, #104	; 0x68
 8007f2c:	e7e9      	b.n	8007f02 <_fwalk_reent+0x12>

08007f2e <__retarget_lock_init_recursive>:
 8007f2e:	4770      	bx	lr

08007f30 <__retarget_lock_acquire_recursive>:
 8007f30:	4770      	bx	lr

08007f32 <__retarget_lock_release_recursive>:
 8007f32:	4770      	bx	lr

08007f34 <__swhatbuf_r>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	460e      	mov	r6, r1
 8007f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3c:	2900      	cmp	r1, #0
 8007f3e:	b096      	sub	sp, #88	; 0x58
 8007f40:	4614      	mov	r4, r2
 8007f42:	461d      	mov	r5, r3
 8007f44:	da08      	bge.n	8007f58 <__swhatbuf_r+0x24>
 8007f46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	602a      	str	r2, [r5, #0]
 8007f4e:	061a      	lsls	r2, r3, #24
 8007f50:	d410      	bmi.n	8007f74 <__swhatbuf_r+0x40>
 8007f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f56:	e00e      	b.n	8007f76 <__swhatbuf_r+0x42>
 8007f58:	466a      	mov	r2, sp
 8007f5a:	f000 f903 	bl	8008164 <_fstat_r>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	dbf1      	blt.n	8007f46 <__swhatbuf_r+0x12>
 8007f62:	9a01      	ldr	r2, [sp, #4]
 8007f64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f6c:	425a      	negs	r2, r3
 8007f6e:	415a      	adcs	r2, r3
 8007f70:	602a      	str	r2, [r5, #0]
 8007f72:	e7ee      	b.n	8007f52 <__swhatbuf_r+0x1e>
 8007f74:	2340      	movs	r3, #64	; 0x40
 8007f76:	2000      	movs	r0, #0
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	b016      	add	sp, #88	; 0x58
 8007f7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f80 <__smakebuf_r>:
 8007f80:	898b      	ldrh	r3, [r1, #12]
 8007f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f84:	079d      	lsls	r5, r3, #30
 8007f86:	4606      	mov	r6, r0
 8007f88:	460c      	mov	r4, r1
 8007f8a:	d507      	bpl.n	8007f9c <__smakebuf_r+0x1c>
 8007f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	6123      	str	r3, [r4, #16]
 8007f94:	2301      	movs	r3, #1
 8007f96:	6163      	str	r3, [r4, #20]
 8007f98:	b002      	add	sp, #8
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}
 8007f9c:	ab01      	add	r3, sp, #4
 8007f9e:	466a      	mov	r2, sp
 8007fa0:	f7ff ffc8 	bl	8007f34 <__swhatbuf_r>
 8007fa4:	9900      	ldr	r1, [sp, #0]
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f7ff f963 	bl	8007274 <_malloc_r>
 8007fae:	b948      	cbnz	r0, 8007fc4 <__smakebuf_r+0x44>
 8007fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fb4:	059a      	lsls	r2, r3, #22
 8007fb6:	d4ef      	bmi.n	8007f98 <__smakebuf_r+0x18>
 8007fb8:	f023 0303 	bic.w	r3, r3, #3
 8007fbc:	f043 0302 	orr.w	r3, r3, #2
 8007fc0:	81a3      	strh	r3, [r4, #12]
 8007fc2:	e7e3      	b.n	8007f8c <__smakebuf_r+0xc>
 8007fc4:	4b0d      	ldr	r3, [pc, #52]	; (8007ffc <__smakebuf_r+0x7c>)
 8007fc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	6020      	str	r0, [r4, #0]
 8007fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	9b00      	ldr	r3, [sp, #0]
 8007fd4:	6163      	str	r3, [r4, #20]
 8007fd6:	9b01      	ldr	r3, [sp, #4]
 8007fd8:	6120      	str	r0, [r4, #16]
 8007fda:	b15b      	cbz	r3, 8007ff4 <__smakebuf_r+0x74>
 8007fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f000 f8d1 	bl	8008188 <_isatty_r>
 8007fe6:	b128      	cbz	r0, 8007ff4 <__smakebuf_r+0x74>
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	f023 0303 	bic.w	r3, r3, #3
 8007fee:	f043 0301 	orr.w	r3, r3, #1
 8007ff2:	81a3      	strh	r3, [r4, #12]
 8007ff4:	89a0      	ldrh	r0, [r4, #12]
 8007ff6:	4305      	orrs	r5, r0
 8007ff8:	81a5      	strh	r5, [r4, #12]
 8007ffa:	e7cd      	b.n	8007f98 <__smakebuf_r+0x18>
 8007ffc:	08007d8d 	.word	0x08007d8d

08008000 <_malloc_usable_size_r>:
 8008000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008004:	1f18      	subs	r0, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	bfbc      	itt	lt
 800800a:	580b      	ldrlt	r3, [r1, r0]
 800800c:	18c0      	addlt	r0, r0, r3
 800800e:	4770      	bx	lr

08008010 <_raise_r>:
 8008010:	291f      	cmp	r1, #31
 8008012:	b538      	push	{r3, r4, r5, lr}
 8008014:	4604      	mov	r4, r0
 8008016:	460d      	mov	r5, r1
 8008018:	d904      	bls.n	8008024 <_raise_r+0x14>
 800801a:	2316      	movs	r3, #22
 800801c:	6003      	str	r3, [r0, #0]
 800801e:	f04f 30ff 	mov.w	r0, #4294967295
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008026:	b112      	cbz	r2, 800802e <_raise_r+0x1e>
 8008028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800802c:	b94b      	cbnz	r3, 8008042 <_raise_r+0x32>
 800802e:	4620      	mov	r0, r4
 8008030:	f000 f830 	bl	8008094 <_getpid_r>
 8008034:	462a      	mov	r2, r5
 8008036:	4601      	mov	r1, r0
 8008038:	4620      	mov	r0, r4
 800803a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800803e:	f000 b817 	b.w	8008070 <_kill_r>
 8008042:	2b01      	cmp	r3, #1
 8008044:	d00a      	beq.n	800805c <_raise_r+0x4c>
 8008046:	1c59      	adds	r1, r3, #1
 8008048:	d103      	bne.n	8008052 <_raise_r+0x42>
 800804a:	2316      	movs	r3, #22
 800804c:	6003      	str	r3, [r0, #0]
 800804e:	2001      	movs	r0, #1
 8008050:	e7e7      	b.n	8008022 <_raise_r+0x12>
 8008052:	2400      	movs	r4, #0
 8008054:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008058:	4628      	mov	r0, r5
 800805a:	4798      	blx	r3
 800805c:	2000      	movs	r0, #0
 800805e:	e7e0      	b.n	8008022 <_raise_r+0x12>

08008060 <raise>:
 8008060:	4b02      	ldr	r3, [pc, #8]	; (800806c <raise+0xc>)
 8008062:	4601      	mov	r1, r0
 8008064:	6818      	ldr	r0, [r3, #0]
 8008066:	f7ff bfd3 	b.w	8008010 <_raise_r>
 800806a:	bf00      	nop
 800806c:	2000000c 	.word	0x2000000c

08008070 <_kill_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4d07      	ldr	r5, [pc, #28]	; (8008090 <_kill_r+0x20>)
 8008074:	2300      	movs	r3, #0
 8008076:	4604      	mov	r4, r0
 8008078:	4608      	mov	r0, r1
 800807a:	4611      	mov	r1, r2
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	f7f9 fd6d 	bl	8001b5c <_kill>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	d102      	bne.n	800808c <_kill_r+0x1c>
 8008086:	682b      	ldr	r3, [r5, #0]
 8008088:	b103      	cbz	r3, 800808c <_kill_r+0x1c>
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	bd38      	pop	{r3, r4, r5, pc}
 800808e:	bf00      	nop
 8008090:	20000340 	.word	0x20000340

08008094 <_getpid_r>:
 8008094:	f7f9 bd5a 	b.w	8001b4c <_getpid>

08008098 <__sread>:
 8008098:	b510      	push	{r4, lr}
 800809a:	460c      	mov	r4, r1
 800809c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a0:	f000 f894 	bl	80081cc <_read_r>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	bfab      	itete	ge
 80080a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080aa:	89a3      	ldrhlt	r3, [r4, #12]
 80080ac:	181b      	addge	r3, r3, r0
 80080ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080b2:	bfac      	ite	ge
 80080b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80080b6:	81a3      	strhlt	r3, [r4, #12]
 80080b8:	bd10      	pop	{r4, pc}

080080ba <__swrite>:
 80080ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080be:	461f      	mov	r7, r3
 80080c0:	898b      	ldrh	r3, [r1, #12]
 80080c2:	05db      	lsls	r3, r3, #23
 80080c4:	4605      	mov	r5, r0
 80080c6:	460c      	mov	r4, r1
 80080c8:	4616      	mov	r6, r2
 80080ca:	d505      	bpl.n	80080d8 <__swrite+0x1e>
 80080cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d0:	2302      	movs	r3, #2
 80080d2:	2200      	movs	r2, #0
 80080d4:	f000 f868 	bl	80081a8 <_lseek_r>
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080e2:	81a3      	strh	r3, [r4, #12]
 80080e4:	4632      	mov	r2, r6
 80080e6:	463b      	mov	r3, r7
 80080e8:	4628      	mov	r0, r5
 80080ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ee:	f000 b817 	b.w	8008120 <_write_r>

080080f2 <__sseek>:
 80080f2:	b510      	push	{r4, lr}
 80080f4:	460c      	mov	r4, r1
 80080f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fa:	f000 f855 	bl	80081a8 <_lseek_r>
 80080fe:	1c43      	adds	r3, r0, #1
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	bf15      	itete	ne
 8008104:	6560      	strne	r0, [r4, #84]	; 0x54
 8008106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800810a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800810e:	81a3      	strheq	r3, [r4, #12]
 8008110:	bf18      	it	ne
 8008112:	81a3      	strhne	r3, [r4, #12]
 8008114:	bd10      	pop	{r4, pc}

08008116 <__sclose>:
 8008116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800811a:	f000 b813 	b.w	8008144 <_close_r>
	...

08008120 <_write_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d07      	ldr	r5, [pc, #28]	; (8008140 <_write_r+0x20>)
 8008124:	4604      	mov	r4, r0
 8008126:	4608      	mov	r0, r1
 8008128:	4611      	mov	r1, r2
 800812a:	2200      	movs	r2, #0
 800812c:	602a      	str	r2, [r5, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	f7f9 fd4b 	bl	8001bca <_write>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_write_r+0x1e>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	b103      	cbz	r3, 800813e <_write_r+0x1e>
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	20000340 	.word	0x20000340

08008144 <_close_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4d06      	ldr	r5, [pc, #24]	; (8008160 <_close_r+0x1c>)
 8008148:	2300      	movs	r3, #0
 800814a:	4604      	mov	r4, r0
 800814c:	4608      	mov	r0, r1
 800814e:	602b      	str	r3, [r5, #0]
 8008150:	f7f9 fd57 	bl	8001c02 <_close>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	d102      	bne.n	800815e <_close_r+0x1a>
 8008158:	682b      	ldr	r3, [r5, #0]
 800815a:	b103      	cbz	r3, 800815e <_close_r+0x1a>
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	bd38      	pop	{r3, r4, r5, pc}
 8008160:	20000340 	.word	0x20000340

08008164 <_fstat_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4d07      	ldr	r5, [pc, #28]	; (8008184 <_fstat_r+0x20>)
 8008168:	2300      	movs	r3, #0
 800816a:	4604      	mov	r4, r0
 800816c:	4608      	mov	r0, r1
 800816e:	4611      	mov	r1, r2
 8008170:	602b      	str	r3, [r5, #0]
 8008172:	f7f9 fd52 	bl	8001c1a <_fstat>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	d102      	bne.n	8008180 <_fstat_r+0x1c>
 800817a:	682b      	ldr	r3, [r5, #0]
 800817c:	b103      	cbz	r3, 8008180 <_fstat_r+0x1c>
 800817e:	6023      	str	r3, [r4, #0]
 8008180:	bd38      	pop	{r3, r4, r5, pc}
 8008182:	bf00      	nop
 8008184:	20000340 	.word	0x20000340

08008188 <_isatty_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d06      	ldr	r5, [pc, #24]	; (80081a4 <_isatty_r+0x1c>)
 800818c:	2300      	movs	r3, #0
 800818e:	4604      	mov	r4, r0
 8008190:	4608      	mov	r0, r1
 8008192:	602b      	str	r3, [r5, #0]
 8008194:	f7f9 fd51 	bl	8001c3a <_isatty>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_isatty_r+0x1a>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_isatty_r+0x1a>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	20000340 	.word	0x20000340

080081a8 <_lseek_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4d07      	ldr	r5, [pc, #28]	; (80081c8 <_lseek_r+0x20>)
 80081ac:	4604      	mov	r4, r0
 80081ae:	4608      	mov	r0, r1
 80081b0:	4611      	mov	r1, r2
 80081b2:	2200      	movs	r2, #0
 80081b4:	602a      	str	r2, [r5, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f7f9 fd4a 	bl	8001c50 <_lseek>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_lseek_r+0x1e>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_lseek_r+0x1e>
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	20000340 	.word	0x20000340

080081cc <_read_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4d07      	ldr	r5, [pc, #28]	; (80081ec <_read_r+0x20>)
 80081d0:	4604      	mov	r4, r0
 80081d2:	4608      	mov	r0, r1
 80081d4:	4611      	mov	r1, r2
 80081d6:	2200      	movs	r2, #0
 80081d8:	602a      	str	r2, [r5, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	f7f9 fcd8 	bl	8001b90 <_read>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_read_r+0x1e>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_read_r+0x1e>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	20000340 	.word	0x20000340

080081f0 <_init>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	bf00      	nop
 80081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f6:	bc08      	pop	{r3}
 80081f8:	469e      	mov	lr, r3
 80081fa:	4770      	bx	lr

080081fc <_fini>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	bf00      	nop
 8008200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008202:	bc08      	pop	{r3}
 8008204:	469e      	mov	lr, r3
 8008206:	4770      	bx	lr

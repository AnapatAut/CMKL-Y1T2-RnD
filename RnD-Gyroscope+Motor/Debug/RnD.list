
RnD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ef0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08009080  08009080  00019080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800951c  0800951c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800951c  0800951c  0001951c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009524  08009524  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009524  08009524  00019524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009528  08009528  00019528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800952c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200001dc  08009708  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08009708  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013600  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002314  00000000  00000000  0003380c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00035b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  00036d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028184  00000000  00000000  00037e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150c3  00000000  00000000  0005ffcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f731d  00000000  00000000  0007508f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c3ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f2c  00000000  00000000  0016c3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009068 	.word	0x08009068

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009068 	.word	0x08009068

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <MPU6050_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU6050_Init(void)
{
 8000f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f54:	b090      	sub	sp, #64	; 0x40
 8000f56:	af06      	add	r7, sp, #24
    uint8_t check;
    uint8_t Data;
    char buffer[16];
    float temp;
    float gyroTemp = 0;
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
    float accelTemp = 0;
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]

    // check device ID WHO_AM_I
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	f107 0313 	add.w	r3, r7, #19
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	2275      	movs	r2, #117	; 0x75
 8000f78:	21d0      	movs	r1, #208	; 0xd0
 8000f7a:	48b3      	ldr	r0, [pc, #716]	; (8001248 <MPU6050_Init+0x2f8>)
 8000f7c:	f001 fc34 	bl	80027e8 <HAL_I2C_Mem_Read>

    sprintf(buffer, "\r----%d----\n", check);
 8000f80:	7cfb      	ldrb	r3, [r7, #19]
 8000f82:	461a      	mov	r2, r3
 8000f84:	463b      	mov	r3, r7
 8000f86:	49b1      	ldr	r1, [pc, #708]	; (800124c <MPU6050_Init+0x2fc>)
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 fdf3 	bl	8006b74 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f8e:	463b      	mov	r3, r7
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff f91d 	bl	80001d0 <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4639      	mov	r1, r7
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	48ab      	ldr	r0, [pc, #684]	; (8001250 <MPU6050_Init+0x300>)
 8000fa2:	f004 fc3b 	bl	800581c <HAL_UART_Transmit>
    if(check == 104)    // 0x68 will be returned by the sensor if everything goes well
 8000fa6:	7cfb      	ldrb	r3, [r7, #19]
 8000fa8:	2b68      	cmp	r3, #104	; 0x68
 8000faa:	f040 8123 	bne.w	80011f4 <MPU6050_Init+0x2a4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	74bb      	strb	r3, [r7, #18]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	f107 0312 	add.w	r3, r7, #18
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	226b      	movs	r2, #107	; 0x6b
 8000fc6:	21d0      	movs	r1, #208	; 0xd0
 8000fc8:	489f      	ldr	r0, [pc, #636]	; (8001248 <MPU6050_Init+0x2f8>)
 8000fca:	f001 faf9 	bl	80025c0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000fce:	2307      	movs	r3, #7
 8000fd0:	74bb      	strb	r3, [r7, #18]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	f107 0312 	add.w	r3, r7, #18
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2219      	movs	r2, #25
 8000fe6:	21d0      	movs	r1, #208	; 0xd0
 8000fe8:	4897      	ldr	r0, [pc, #604]	; (8001248 <MPU6050_Init+0x2f8>)
 8000fea:	f001 fae9 	bl	80025c0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0xE0;
 8000fee:	23e0      	movs	r3, #224	; 0xe0
 8000ff0:	74bb      	strb	r3, [r7, #18]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	f107 0312 	add.w	r3, r7, #18
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	221c      	movs	r2, #28
 8001006:	21d0      	movs	r1, #208	; 0xd0
 8001008:	488f      	ldr	r0, [pc, #572]	; (8001248 <MPU6050_Init+0x2f8>)
 800100a:	f001 fad9 	bl	80025c0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0xE0;
 800100e:	23e0      	movs	r3, #224	; 0xe0
 8001010:	74bb      	strb	r3, [r7, #18]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2301      	movs	r3, #1
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	f107 0312 	add.w	r3, r7, #18
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	221b      	movs	r2, #27
 8001026:	21d0      	movs	r1, #208	; 0xd0
 8001028:	4887      	ldr	r0, [pc, #540]	; (8001248 <MPU6050_Init+0x2f8>)
 800102a:	f001 fac9 	bl	80025c0 <HAL_I2C_Mem_Write>

        for(int i = 0; i < 512; i++)
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	e01f      	b.n	8001074 <MPU6050_Init+0x124>
        {
            MPU6050_Read_Gyro();
 8001034:	f000 f96c 	bl	8001310 <MPU6050_Read_Gyro>
            MPU6050_Read_Accel();
 8001038:	f000 f91e 	bl	8001278 <MPU6050_Read_Accel>
            gyroTemp += gyro;
 800103c:	4b85      	ldr	r3, [pc, #532]	; (8001254 <MPU6050_Init+0x304>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a08 	vldr	s14, [r7, #32]
 8001046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104a:	edc7 7a08 	vstr	s15, [r7, #32]
            accelTemp += accel;
 800104e:	4b82      	ldr	r3, [pc, #520]	; (8001258 <MPU6050_Init+0x308>)
 8001050:	edd3 7a00 	vldr	s15, [r3]
 8001054:	ed97 7a07 	vldr	s14, [r7, #28]
 8001058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105c:	edc7 7a07 	vstr	s15, [r7, #28]
            temp = i;
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        for(int i = 0; i < 512; i++)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	3301      	adds	r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800107a:	dbdb      	blt.n	8001034 <MPU6050_Init+0xe4>
        }
        gyroOffset = gyroTemp / temp;
 800107c:	edd7 6a08 	vldr	s13, [r7, #32]
 8001080:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001088:	4b74      	ldr	r3, [pc, #464]	; (800125c <MPU6050_Init+0x30c>)
 800108a:	edc3 7a00 	vstr	s15, [r3]
        accelOffset = accelTemp / temp;
 800108e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001092:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800109a:	4b71      	ldr	r3, [pc, #452]	; (8001260 <MPU6050_Init+0x310>)
 800109c:	edc3 7a00 	vstr	s15, [r3]

        for(int i = 0; i < 512; i++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e047      	b.n	8001136 <MPU6050_Init+0x1e6>
		{
			MPU6050_Read_Gyro();
 80010a6:	f000 f933 	bl	8001310 <MPU6050_Read_Gyro>
			MPU6050_Read_Accel();
 80010aa:	f000 f8e5 	bl	8001278 <MPU6050_Read_Accel>
			temp = fabs(accel * 9.8 * 0.05);
 80010ae:	4b6a      	ldr	r3, [pc, #424]	; (8001258 <MPU6050_Init+0x308>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa48 	bl	8000548 <__aeabi_f2d>
 80010b8:	a35b      	add	r3, pc, #364	; (adr r3, 8001228 <MPU6050_Init+0x2d8>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	f7ff fa9b 	bl	80005f8 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	a359      	add	r3, pc, #356	; (adr r3, 8001230 <MPU6050_Init+0x2e0>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fa92 	bl	80005f8 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fd64 	bl	8000ba8 <__aeabi_d2f>
 80010e0:	ee07 0a90 	vmov	s15, r0
 80010e4:	eef0 7ae7 	vabs.f32	s15, s15
 80010e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			if(fabs(gyro) > gyroMargin)
 80010ec:	4b59      	ldr	r3, [pc, #356]	; (8001254 <MPU6050_Init+0x304>)
 80010ee:	edd3 7a00 	vldr	s15, [r3]
 80010f2:	eeb0 7ae7 	vabs.f32	s14, s15
 80010f6:	4b5b      	ldr	r3, [pc, #364]	; (8001264 <MPU6050_Init+0x314>)
 80010f8:	edd3 7a00 	vldr	s15, [r3]
 80010fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001104:	dd07      	ble.n	8001116 <MPU6050_Init+0x1c6>
				gyroMargin = fabs(gyro);
 8001106:	4b53      	ldr	r3, [pc, #332]	; (8001254 <MPU6050_Init+0x304>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	eef0 7ae7 	vabs.f32	s15, s15
 8001110:	4b54      	ldr	r3, [pc, #336]	; (8001264 <MPU6050_Init+0x314>)
 8001112:	edc3 7a00 	vstr	s15, [r3]
			if(temp > velocityMargin)
 8001116:	4b54      	ldr	r3, [pc, #336]	; (8001268 <MPU6050_Init+0x318>)
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	dd02      	ble.n	8001130 <MPU6050_Init+0x1e0>
				velocityMargin = temp;
 800112a:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <MPU6050_Init+0x318>)
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	6013      	str	r3, [r2, #0]
        for(int i = 0; i < 512; i++)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800113c:	dbb3      	blt.n	80010a6 <MPU6050_Init+0x156>
		}
        gyroMargin += 0.1;
 800113e:	4b49      	ldr	r3, [pc, #292]	; (8001264 <MPU6050_Init+0x314>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa00 	bl	8000548 <__aeabi_f2d>
 8001148:	a33b      	add	r3, pc, #236	; (adr r3, 8001238 <MPU6050_Init+0x2e8>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff f89d 	bl	800028c <__adddf3>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fd25 	bl	8000ba8 <__aeabi_d2f>
 800115e:	4603      	mov	r3, r0
 8001160:	4a40      	ldr	r2, [pc, #256]	; (8001264 <MPU6050_Init+0x314>)
 8001162:	6013      	str	r3, [r2, #0]
        velocityMargin += 0.001;
 8001164:	4b40      	ldr	r3, [pc, #256]	; (8001268 <MPU6050_Init+0x318>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9ed 	bl	8000548 <__aeabi_f2d>
 800116e:	a334      	add	r3, pc, #208	; (adr r3, 8001240 <MPU6050_Init+0x2f0>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff f88a 	bl	800028c <__adddf3>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fd12 	bl	8000ba8 <__aeabi_d2f>
 8001184:	4603      	mov	r3, r0
 8001186:	4a38      	ldr	r2, [pc, #224]	; (8001268 <MPU6050_Init+0x318>)
 8001188:	6013      	str	r3, [r2, #0]
        sprintf(buffer, "\r--|%.4f| |%.6f|--\n\r--|%.4f| |%.6f|--\n", gyroOffset, accelOffset, gyroMargin, velocityMargin);
 800118a:	4b34      	ldr	r3, [pc, #208]	; (800125c <MPU6050_Init+0x30c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9da 	bl	8000548 <__aeabi_f2d>
 8001194:	4682      	mov	sl, r0
 8001196:	468b      	mov	fp, r1
 8001198:	4b31      	ldr	r3, [pc, #196]	; (8001260 <MPU6050_Init+0x310>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9d3 	bl	8000548 <__aeabi_f2d>
 80011a2:	4604      	mov	r4, r0
 80011a4:	460d      	mov	r5, r1
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <MPU6050_Init+0x314>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9cc 	bl	8000548 <__aeabi_f2d>
 80011b0:	4680      	mov	r8, r0
 80011b2:	4689      	mov	r9, r1
 80011b4:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <MPU6050_Init+0x318>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9c5 	bl	8000548 <__aeabi_f2d>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4638      	mov	r0, r7
 80011c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80011cc:	e9cd 4500 	strd	r4, r5, [sp]
 80011d0:	4652      	mov	r2, sl
 80011d2:	465b      	mov	r3, fp
 80011d4:	4925      	ldr	r1, [pc, #148]	; (800126c <MPU6050_Init+0x31c>)
 80011d6:	f005 fccd 	bl	8006b74 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 80011da:	463b      	mov	r3, r7
 80011dc:	4618      	mov	r0, r3
 80011de:	f7fe fff7 	bl	80001d0 <strlen>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4639      	mov	r1, r7
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	4818      	ldr	r0, [pc, #96]	; (8001250 <MPU6050_Init+0x300>)
 80011ee:	f004 fb15 	bl	800581c <HAL_UART_Transmit>
    {
        sprintf(buffer, "\r----Error----\n");
        HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
        exit(1);
    }
}
 80011f2:	e013      	b.n	800121c <MPU6050_Init+0x2cc>
        sprintf(buffer, "\r----Error----\n");
 80011f4:	463b      	mov	r3, r7
 80011f6:	491e      	ldr	r1, [pc, #120]	; (8001270 <MPU6050_Init+0x320>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f005 fcbb 	bl	8006b74 <siprintf>
        HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 80011fe:	463b      	mov	r3, r7
 8001200:	4618      	mov	r0, r3
 8001202:	f7fe ffe5 	bl	80001d0 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	4639      	mov	r1, r7
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	480f      	ldr	r0, [pc, #60]	; (8001250 <MPU6050_Init+0x300>)
 8001212:	f004 fb03 	bl	800581c <HAL_UART_Transmit>
        exit(1);
 8001216:	2001      	movs	r0, #1
 8001218:	f005 f802 	bl	8006220 <exit>
}
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001224:	f3af 8000 	nop.w
 8001228:	9999999a 	.word	0x9999999a
 800122c:	40239999 	.word	0x40239999
 8001230:	9999999a 	.word	0x9999999a
 8001234:	3fa99999 	.word	0x3fa99999
 8001238:	9999999a 	.word	0x9999999a
 800123c:	3fb99999 	.word	0x3fb99999
 8001240:	d2f1a9fc 	.word	0xd2f1a9fc
 8001244:	3f50624d 	.word	0x3f50624d
 8001248:	200001f8 	.word	0x200001f8
 800124c:	08009080 	.word	0x08009080
 8001250:	20000298 	.word	0x20000298
 8001254:	20000324 	.word	0x20000324
 8001258:	20000320 	.word	0x20000320
 800125c:	2000032c 	.word	0x2000032c
 8001260:	20000328 	.word	0x20000328
 8001264:	20000330 	.word	0x20000330
 8001268:	20000334 	.word	0x20000334
 800126c:	08009090 	.word	0x08009090
 8001270:	080090b8 	.word	0x080090b8
 8001274:	00000000 	.word	0x00000000

08001278 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af04      	add	r7, sp, #16
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	2306      	movs	r3, #6
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	463b      	mov	r3, r7
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2301      	movs	r3, #1
 800128e:	223b      	movs	r2, #59	; 0x3b
 8001290:	21d0      	movs	r1, #208	; 0xd0
 8001292:	481b      	ldr	r0, [pc, #108]	; (8001300 <MPU6050_Read_Accel+0x88>)
 8001294:	f001 faa8 	bl	80027e8 <HAL_I2C_Mem_Read>

    //Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001298:	78bb      	ldrb	r3, [r7, #2]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b21a      	sxth	r2, r3
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MPU6050_Read_Accel+0x8c>)
 80012a8:	801a      	strh	r2, [r3, #0]
    /*** convert the RAW values into acceleration in 'g'
	 we have to divide according to the Full scale value set in FS_SEL
	 I have configured FS_SEL = 0. So I am dividing by 16384.0
	 for more details check ACCEL_CONFIG Register              ****/

    accel = ((Accel_Y_RAW / 16600.0) - accelOffset);
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MPU6050_Read_Accel+0x8c>)
 80012ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f937 	bl	8000524 <__aeabi_i2d>
 80012b6:	a310      	add	r3, pc, #64	; (adr r3, 80012f8 <MPU6050_Read_Accel+0x80>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff fac6 	bl	800084c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4614      	mov	r4, r2
 80012c6:	461d      	mov	r5, r3
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MPU6050_Read_Accel+0x90>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f93b 	bl	8000548 <__aeabi_f2d>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4620      	mov	r0, r4
 80012d8:	4629      	mov	r1, r5
 80012da:	f7fe ffd5 	bl	8000288 <__aeabi_dsub>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fc5f 	bl	8000ba8 <__aeabi_d2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <MPU6050_Read_Accel+0x94>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bdb0      	pop	{r4, r5, r7, pc}
 80012f8:	00000000 	.word	0x00000000
 80012fc:	40d03600 	.word	0x40d03600
 8001300:	200001f8 	.word	0x200001f8
 8001304:	2000031c 	.word	0x2000031c
 8001308:	20000328 	.word	0x20000328
 800130c:	20000320 	.word	0x20000320

08001310 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af04      	add	r7, sp, #16
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	9302      	str	r3, [sp, #8]
 800131c:	2306      	movs	r3, #6
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	463b      	mov	r3, r7
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2301      	movs	r3, #1
 8001326:	2243      	movs	r2, #67	; 0x43
 8001328:	21d0      	movs	r1, #208	; 0xd0
 800132a:	481b      	ldr	r0, [pc, #108]	; (8001398 <MPU6050_Read_Gyro+0x88>)
 800132c:	f001 fa5c 	bl	80027e8 <HAL_I2C_Mem_Read>

    //Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    //Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
    Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001330:	793b      	ldrb	r3, [r7, #4]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	797b      	ldrb	r3, [r7, #5]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21a      	sxth	r2, r3
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MPU6050_Read_Gyro+0x8c>)
 8001340:	801a      	strh	r2, [r3, #0]
    /*** convert the RAW values into dps (�/s)
	 we have to divide according to the Full scale value set in FS_SEL
	 I have configured FS_SEL = 0. So I am dividing by 131.0
	 for more details check GYRO_CONFIG Register              ****/

    gyro = ((Gyro_Z_RAW / 94.4) - gyroOffset);
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <MPU6050_Read_Gyro+0x8c>)
 8001344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8eb 	bl	8000524 <__aeabi_i2d>
 800134e:	a310      	add	r3, pc, #64	; (adr r3, 8001390 <MPU6050_Read_Gyro+0x80>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff fa7a 	bl	800084c <__aeabi_ddiv>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4614      	mov	r4, r2
 800135e:	461d      	mov	r5, r3
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MPU6050_Read_Gyro+0x90>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f8ef 	bl	8000548 <__aeabi_f2d>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4620      	mov	r0, r4
 8001370:	4629      	mov	r1, r5
 8001372:	f7fe ff89 	bl	8000288 <__aeabi_dsub>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fc13 	bl	8000ba8 <__aeabi_d2f>
 8001382:	4603      	mov	r3, r0
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <MPU6050_Read_Gyro+0x94>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bdb0      	pop	{r4, r5, r7, pc}
 8001390:	9999999a 	.word	0x9999999a
 8001394:	40579999 	.word	0x40579999
 8001398:	200001f8 	.word	0x200001f8
 800139c:	2000031e 	.word	0x2000031e
 80013a0:	2000032c 	.word	0x2000032c
 80013a4:	20000324 	.word	0x20000324

080013a8 <getDistance>:
        HAL_Delay(50);
    }
}

getDistance(float dist)
{
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	ed87 0a01 	vstr	s0, [r7, #4]
	char buffer[32];
	float velocity = 0;
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
	float value = 0;
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(1)
	{
		MPU6050_Read_Accel();
 80013be:	f7ff ff5b 	bl	8001278 <MPU6050_Read_Accel>
		velocity = accel * 9.8 * 0.05;
 80013c2:	4b4d      	ldr	r3, [pc, #308]	; (80014f8 <getDistance+0x150>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f8be 	bl	8000548 <__aeabi_f2d>
 80013cc:	a346      	add	r3, pc, #280	; (adr r3, 80014e8 <getDistance+0x140>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7ff f911 	bl	80005f8 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	a344      	add	r3, pc, #272	; (adr r3, 80014f0 <getDistance+0x148>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff f908 	bl	80005f8 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fbda 	bl	8000ba8 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
		if(fabs(velocity) >= velocityMargin)
 80013f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013fc:	eeb0 7ae7 	vabs.f32	s14, s15
 8001400:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <getDistance+0x154>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	db07      	blt.n	8001420 <getDistance+0x78>
			value += velocity;
 8001410:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001414:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c


		sprintf(buffer, "\rDist: |%.6f|\n", value * 0.05);
 8001420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001422:	f7ff f891 	bl	8000548 <__aeabi_f2d>
 8001426:	a332      	add	r3, pc, #200	; (adr r3, 80014f0 <getDistance+0x148>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff f8e4 	bl	80005f8 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	f107 0008 	add.w	r0, r7, #8
 8001438:	4931      	ldr	r1, [pc, #196]	; (8001500 <getDistance+0x158>)
 800143a:	f005 fb9b 	bl	8006b74 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe fec4 	bl	80001d0 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	f107 0108 	add.w	r1, r7, #8
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	482b      	ldr	r0, [pc, #172]	; (8001504 <getDistance+0x15c>)
 8001456:	f004 f9e1 	bl	800581c <HAL_UART_Transmit>
		if((((value * 0.05) >= dist) && (dist > 0)) || (((value * 0.05) <= dist) && (dist < 0)))
 800145a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800145c:	f7ff f874 	bl	8000548 <__aeabi_f2d>
 8001460:	a323      	add	r3, pc, #140	; (adr r3, 80014f0 <getDistance+0x148>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7ff f8c7 	bl	80005f8 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4614      	mov	r4, r2
 8001470:	461d      	mov	r5, r3
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff f868 	bl	8000548 <__aeabi_f2d>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4620      	mov	r0, r4
 800147e:	4629      	mov	r1, r5
 8001480:	f7ff fb40 	bl	8000b04 <__aeabi_dcmpge>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <getDistance+0xf0>
 800148a:	edd7 7a01 	vldr	s15, [r7, #4]
 800148e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	dc22      	bgt.n	80014de <getDistance+0x136>
 8001498:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800149a:	f7ff f855 	bl	8000548 <__aeabi_f2d>
 800149e:	a314      	add	r3, pc, #80	; (adr r3, 80014f0 <getDistance+0x148>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f8a8 	bl	80005f8 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4614      	mov	r4, r2
 80014ae:	461d      	mov	r5, r3
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff f849 	bl	8000548 <__aeabi_f2d>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4620      	mov	r0, r4
 80014bc:	4629      	mov	r1, r5
 80014be:	f7ff fb17 	bl	8000af0 <__aeabi_dcmple>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <getDistance+0x12e>
 80014c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	d403      	bmi.n	80014de <getDistance+0x136>
			return;
		HAL_Delay(50);
 80014d6:	2032      	movs	r0, #50	; 0x32
 80014d8:	f000 fd16 	bl	8001f08 <HAL_Delay>
		MPU6050_Read_Accel();
 80014dc:	e76f      	b.n	80013be <getDistance+0x16>
			return;
 80014de:	bf00      	nop
	}
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3730      	adds	r7, #48	; 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bdb0      	pop	{r4, r5, r7, pc}
 80014e8:	9999999a 	.word	0x9999999a
 80014ec:	40239999 	.word	0x40239999
 80014f0:	9999999a 	.word	0x9999999a
 80014f4:	3fa99999 	.word	0x3fa99999
 80014f8:	20000320 	.word	0x20000320
 80014fc:	20000334 	.word	0x20000334
 8001500:	080090d8 	.word	0x080090d8
 8001504:	20000298 	.word	0x20000298

08001508 <main>:

int main(void)
{
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800150e:	f000 fc7f 	bl	8001e10 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001512:	f000 f867 	bl	80015e4 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001516:	f000 f99b 	bl	8001850 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 800151a:	f000 f969 	bl	80017f0 <MX_USART2_UART_Init>
    MX_I2C1_Init();
 800151e:	f000 f8b1 	bl	8001684 <MX_I2C1_Init>
    MX_TIM2_Init();
 8001522:	f000 f8ef 	bl	8001704 <MX_TIM2_Init>
    /* USER CODE BEGIN 2 */
    MPU6050_Init();
 8001526:	f7ff fd13 	bl	8000f50 <MPU6050_Init>
    char buffer[32];

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);    //PA1 TIM2 CH2
 800152a:	2104      	movs	r1, #4
 800152c:	4827      	ldr	r0, [pc, #156]	; (80015cc <main+0xc4>)
 800152e:	f003 f98b 	bl	8004848 <HAL_TIM_PWM_Start>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001532:	2201      	movs	r2, #1
 8001534:	2120      	movs	r1, #32
 8001536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153a:	f000 ff99 	bl	8002470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2140      	movs	r1, #64	; 0x40
 8001542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001546:	f000 ff93 	bl	8002470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001552:	f000 ff8d 	bl	8002470 <HAL_GPIO_WritePin>
    getDistance(0.1);
 8001556:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80015d0 <main+0xc8>
 800155a:	f7ff ff25 	bl	80013a8 <getDistance>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while(1)
    {
        MPU6050_Read_Gyro();
 800155e:	f7ff fed7 	bl	8001310 <MPU6050_Read_Gyro>
        MPU6050_Read_Accel();
 8001562:	f7ff fe89 	bl	8001278 <MPU6050_Read_Accel>

        sprintf(buffer, "\r|%.2f| |%.2f|\n", gyro, accel);
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <main+0xcc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ffec 	bl	8000548 <__aeabi_f2d>
 8001570:	4604      	mov	r4, r0
 8001572:	460d      	mov	r5, r1
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <main+0xd0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ffe5 	bl	8000548 <__aeabi_f2d>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4638      	mov	r0, r7
 8001584:	e9cd 2300 	strd	r2, r3, [sp]
 8001588:	4622      	mov	r2, r4
 800158a:	462b      	mov	r3, r5
 800158c:	4913      	ldr	r1, [pc, #76]	; (80015dc <main+0xd4>)
 800158e:	f005 faf1 	bl	8006b74 <siprintf>
        HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001592:	463b      	mov	r3, r7
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fe1b 	bl	80001d0 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	4639      	mov	r1, r7
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295
 80015a4:	480e      	ldr	r0, [pc, #56]	; (80015e0 <main+0xd8>)
 80015a6:	f004 f939 	bl	800581c <HAL_UART_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2140      	movs	r1, #64	; 0x40
 80015ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b2:	f000 ff5d 	bl	8002470 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015be:	f000 ff57 	bl	8002470 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80015c2:	2032      	movs	r0, #50	; 0x32
 80015c4:	f000 fca0 	bl	8001f08 <HAL_Delay>
        MPU6050_Read_Gyro();
 80015c8:	e7c9      	b.n	800155e <main+0x56>
 80015ca:	bf00      	nop
 80015cc:	2000024c 	.word	0x2000024c
 80015d0:	3dcccccd 	.word	0x3dcccccd
 80015d4:	20000324 	.word	0x20000324
 80015d8:	20000320 	.word	0x20000320
 80015dc:	080090e8 	.word	0x080090e8
 80015e0:	20000298 	.word	0x20000298

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b096      	sub	sp, #88	; 0x58
 80015e8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2244      	movs	r2, #68	; 0x44
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 fe4c 	bl	8006290 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
  */
    if(HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001606:	f44f 7000 	mov.w	r0, #512	; 0x200
 800160a:	f001 fd53 	bl	80030b4 <HAL_PWREx_ControlVoltageScaling>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x34>
    {
        Error_Handler();
 8001614:	f000 f998 	bl	8001948 <Error_Handler>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001618:	2301      	movs	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800161c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001620:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001622:	2302      	movs	r3, #2
 8001624:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001626:	2303      	movs	r3, #3
 8001628:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 800162a:	2301      	movs	r3, #1
 800162c:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLN = 20;
 800162e:	2314      	movs	r3, #20
 8001630:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001632:	2307      	movs	r3, #7
 8001634:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001636:	2302      	movs	r3, #2
 8001638:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800163a:	2302      	movs	r3, #2
 800163c:	657b      	str	r3, [r7, #84]	; 0x54
    if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4618      	mov	r0, r3
 8001644:	f001 fd8c 	bl	8003160 <HAL_RCC_OscConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0x6e>
    {
        Error_Handler();
 800164e:	f000 f97b 	bl	8001948 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
  */
    RCC_ClkInitStruct.ClockType =
 8001652:	230f      	movs	r3, #15
 8001654:	603b      	str	r3, [r7, #0]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001656:	2303      	movs	r3, #3
 8001658:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]

    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001666:	463b      	mov	r3, r7
 8001668:	2104      	movs	r1, #4
 800166a:	4618      	mov	r0, r3
 800166c:	f002 f954 	bl	8003918 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x96>
    {
        Error_Handler();
 8001676:	f000 f967 	bl	8001948 <Error_Handler>
    }
}
 800167a:	bf00      	nop
 800167c:	3758      	adds	r7, #88	; 0x58
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MX_I2C1_Init+0x74>)
 800168a:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <MX_I2C1_Init+0x78>)
 800168c:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x10909CEC;
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_I2C1_Init+0x74>)
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <MX_I2C1_Init+0x7c>)
 8001692:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_I2C1_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_I2C1_Init+0x74>)
 800169c:	2201      	movs	r2, #1
 800169e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
    if(HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016be:	480e      	ldr	r0, [pc, #56]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016c0:	f000 feee 	bl	80024a0 <HAL_I2C_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_I2C1_Init+0x4a>
    {
        Error_Handler();
 80016ca:	f000 f93d 	bl	8001948 <Error_Handler>
    }

    /** Configure Analogue filter
  */
    if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016d2:	f001 fc49 	bl	8002f68 <HAL_I2CEx_ConfigAnalogFilter>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_I2C1_Init+0x5c>
    {
        Error_Handler();
 80016dc:	f000 f934 	bl	8001948 <Error_Handler>
    }

    /** Configure Digital filter
  */
    if(HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016e4:	f001 fc8b 	bl	8002ffe <HAL_I2CEx_ConfigDigitalFilter>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_I2C1_Init+0x6e>
    {
        Error_Handler();
 80016ee:	f000 f92b 	bl	8001948 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200001f8 	.word	0x200001f8
 80016fc:	40005400 	.word	0x40005400
 8001700:	10909cec 	.word	0x10909cec

08001704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08e      	sub	sp, #56	; 0x38
 8001708:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001724:	463b      	mov	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <MX_TIM2_Init+0xe8>)
 8001738:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800173c:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 127;
 800173e:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <MX_TIM2_Init+0xe8>)
 8001740:	227f      	movs	r2, #127	; 0x7f
 8001742:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001744:	4b29      	ldr	r3, [pc, #164]	; (80017ec <MX_TIM2_Init+0xe8>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 625;
 800174a:	4b28      	ldr	r3, [pc, #160]	; (80017ec <MX_TIM2_Init+0xe8>)
 800174c:	f240 2271 	movw	r2, #625	; 0x271
 8001750:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <MX_TIM2_Init+0xe8>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <MX_TIM2_Init+0xe8>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
    if(HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800175e:	4823      	ldr	r0, [pc, #140]	; (80017ec <MX_TIM2_Init+0xe8>)
 8001760:	f002 ffba 	bl	80046d8 <HAL_TIM_Base_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM2_Init+0x6a>
    {
        Error_Handler();
 800176a:	f000 f8ed 	bl	8001948 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
    if(HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001774:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001778:	4619      	mov	r1, r3
 800177a:	481c      	ldr	r0, [pc, #112]	; (80017ec <MX_TIM2_Init+0xe8>)
 800177c:	f003 fa7e 	bl	8004c7c <HAL_TIM_ConfigClockSource>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM2_Init+0x86>
    {
        Error_Handler();
 8001786:	f000 f8df 	bl	8001948 <Error_Handler>
    }
    if(HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800178a:	4818      	ldr	r0, [pc, #96]	; (80017ec <MX_TIM2_Init+0xe8>)
 800178c:	f002 fffb 	bl	8004786 <HAL_TIM_PWM_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM2_Init+0x96>
    {
        Error_Handler();
 8001796:	f000 f8d7 	bl	8001948 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    if(HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4810      	ldr	r0, [pc, #64]	; (80017ec <MX_TIM2_Init+0xe8>)
 80017aa:	f003 ff61 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM2_Init+0xb4>
    {
        Error_Handler();
 80017b4:	f000 f8c8 	bl	8001948 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b8:	2360      	movs	r3, #96	; 0x60
 80017ba:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
    if(HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017c8:	463b      	mov	r3, r7
 80017ca:	2204      	movs	r2, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4807      	ldr	r0, [pc, #28]	; (80017ec <MX_TIM2_Init+0xe8>)
 80017d0:	f003 f940 	bl	8004a54 <HAL_TIM_PWM_ConfigChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM2_Init+0xda>
    {
        Error_Handler();
 80017da:	f000 f8b5 	bl	8001948 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 80017de:	4803      	ldr	r0, [pc, #12]	; (80017ec <MX_TIM2_Init+0xe8>)
 80017e0:	f000 f95a 	bl	8001a98 <HAL_TIM_MspPostInit>
}
 80017e4:	bf00      	nop
 80017e6:	3738      	adds	r7, #56	; 0x38
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000024c 	.word	0x2000024c

080017f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_USART2_UART_Init+0x58>)
 80017f6:	4a15      	ldr	r2, [pc, #84]	; (800184c <MX_USART2_UART_Init+0x5c>)
 80017f8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_USART2_UART_Init+0x58>)
 80017fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001800:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_USART2_UART_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001816:	220c      	movs	r2, #12
 8001818:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_USART2_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_USART2_UART_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
    if(HAL_UART_Init(&huart2) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001834:	f003 ffa4 	bl	8005780 <HAL_UART_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USART2_UART_Init+0x52>
    {
        Error_Handler();
 800183e:	f000 f883 	bl	8001948 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000298 	.word	0x20000298
 800184c:	40004400 	.word	0x40004400

08001850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <MX_GPIO_Init+0xf0>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	4a35      	ldr	r2, [pc, #212]	; (8001940 <MX_GPIO_Init+0xf0>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <MX_GPIO_Init+0xf0>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <MX_GPIO_Init+0xf0>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	4a2f      	ldr	r2, [pc, #188]	; (8001940 <MX_GPIO_Init+0xf0>)
 8001884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <MX_GPIO_Init+0xf0>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <MX_GPIO_Init+0xf0>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4a29      	ldr	r2, [pc, #164]	; (8001940 <MX_GPIO_Init+0xf0>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a2:	4b27      	ldr	r3, [pc, #156]	; (8001940 <MX_GPIO_Init+0xf0>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <MX_GPIO_Init+0xf0>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	4a23      	ldr	r2, [pc, #140]	; (8001940 <MX_GPIO_Init+0xf0>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_GPIO_Init+0xf0>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2120      	movs	r1, #32
 80018ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ce:	f000 fdcf 	bl	8002470 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_SET);
 80018d2:	2201      	movs	r2, #1
 80018d4:	21c0      	movs	r1, #192	; 0xc0
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018da:	f000 fdc9 	bl	8002470 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 80018de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4813      	ldr	r0, [pc, #76]	; (8001944 <MX_GPIO_Init+0xf4>)
 80018f6:	f000 fc11 	bl	800211c <HAL_GPIO_Init>

    /*Configure GPIO pin : PA5 */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018fa:	2320      	movs	r3, #32
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001914:	f000 fc02 	bl	800211c <HAL_GPIO_Init>

    /*Configure GPIO pins : PA6 PA7 */
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001918:	23c0      	movs	r3, #192	; 0xc0
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800191c:	2311      	movs	r3, #17
 800191e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001932:	f000 fbf3 	bl	800211c <HAL_GPIO_Init>
}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	48000800 	.word	0x48000800

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_MspInit+0x44>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001962:	4a0e      	ldr	r2, [pc, #56]	; (800199c <HAL_MspInit+0x44>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6613      	str	r3, [r2, #96]	; 0x60
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_MspInit+0x44>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_MspInit+0x44>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <HAL_MspInit+0x44>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	6593      	str	r3, [r2, #88]	; 0x58
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_MspInit+0x44>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000

080019a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b0ac      	sub	sp, #176	; 0xb0
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2288      	movs	r2, #136	; 0x88
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f004 fc65 	bl	8006290 <memset>
  if(hi2c->Instance==I2C1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <HAL_I2C_MspInit+0xb0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d13b      	bne.n	8001a48 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019d0:	2340      	movs	r3, #64	; 0x40
 80019d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 f9bf 	bl	8003d60 <HAL_RCCEx_PeriphCLKConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019e8:	f7ff ffae 	bl	8001948 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_I2C_MspInit+0xb4>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <HAL_I2C_MspInit+0xb4>)
 80019f2:	f043 0302 	orr.w	r3, r3, #2
 80019f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_I2C_MspInit+0xb4>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0c:	2312      	movs	r3, #18
 8001a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480b      	ldr	r0, [pc, #44]	; (8001a58 <HAL_I2C_MspInit+0xb8>)
 8001a2c:	f000 fb76 	bl	800211c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_I2C_MspInit+0xb4>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_I2C_MspInit+0xb4>)
 8001a36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_I2C_MspInit+0xb4>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a48:	bf00      	nop
 8001a4a:	37b0      	adds	r7, #176	; 0xb0
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40005400 	.word	0x40005400
 8001a54:	40021000 	.word	0x40021000
 8001a58:	48000400 	.word	0x48000400

08001a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6c:	d10b      	bne.n	8001a86 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_TIM_Base_MspInit+0x38>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_TIM_Base_MspInit+0x38>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_TIM_Base_MspInit+0x38>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab8:	d11c      	bne.n	8001af4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_TIM_MspPostInit+0x64>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_TIM_MspPostInit+0x64>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_TIM_MspPostInit+0x64>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af0:	f000 fb14 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000

08001b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b0ac      	sub	sp, #176	; 0xb0
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2288      	movs	r2, #136	; 0x88
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 fbb5 	bl	8006290 <memset>
  if(huart->Instance==USART2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <HAL_UART_MspInit+0xb0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d13b      	bne.n	8001ba8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 f90f 	bl	8003d60 <HAL_RCCEx_PeriphCLKConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b48:	f7ff fefe 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_UART_MspInit+0xb4>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <HAL_UART_MspInit+0xb4>)
 8001b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b56:	6593      	str	r3, [r2, #88]	; 0x58
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_UART_MspInit+0xb4>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_UART_MspInit+0xb4>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b68:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <HAL_UART_MspInit+0xb4>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_UART_MspInit+0xb4>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b7c:	230c      	movs	r3, #12
 8001b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b94:	2307      	movs	r3, #7
 8001b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba4:	f000 faba 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	37b0      	adds	r7, #176	; 0xb0
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40004400 	.word	0x40004400
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while(1)
 8001bbc:	e7fe      	b.n	8001bbc <NMI_Handler+0x4>

08001bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <HardFault_Handler+0x4>

08001bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <MemManage_Handler+0x4>

08001bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <BusFault_Handler+0x4>

08001bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <UsageFault_Handler+0x4>

08001bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c04:	f000 f960 	bl	8001ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
	return 1;
 8001c10:	2301      	movs	r3, #1
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_kill>:

int _kill(int pid, int sig)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8001c26:	f004 faf5 	bl	8006214 <__errno>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2216      	movs	r2, #22
 8001c2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_exit>:

void _exit(int status)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ffe7 	bl	8001c1c <_kill>
	while(1)
 8001c4e:	e7fe      	b.n	8001c4e <_exit+0x12>

08001c50 <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;
	
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e00a      	b.n	8001c78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c62:	f3af 8000 	nop.w
 8001c66:	4601      	mov	r1, r0
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	60ba      	str	r2, [r7, #8]
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dbf0      	blt.n	8001c62 <_read+0x12>
	}
	
	return len;
 8001c80:	687b      	ldr	r3, [r7, #4]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;
	
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e009      	b.n	8001cb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60ba      	str	r2, [r7, #8]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f3af 8000 	nop.w
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf1      	blt.n	8001c9c <_write+0x12>
	}
	return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_close>:

int _close(int file)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cea:	605a      	str	r2, [r3, #4]
	return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_isatty>:

int _isatty(int file)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <_sbrk+0x5c>)
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <_sbrk+0x60>)
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;
	
	/* Initialize heap end at first call */
	if(NULL == __sbrk_heap_end)
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <_sbrk+0x64>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <_sbrk+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
	}
	
	/* Protect heap from growing into the reserved MSP stack */
	if(__sbrk_heap_end + incr > max_heap)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d207      	bcs.n	8001d6c <_sbrk+0x40>
	{
		errno = ENOMEM;
 8001d5c:	f004 fa5a 	bl	8006214 <__errno>
 8001d60:	4603      	mov	r3, r0
 8001d62:	220c      	movs	r2, #12
 8001d64:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e009      	b.n	8001d80 <_sbrk+0x54>
	}
	
	prev_heap_end = __sbrk_heap_end;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <_sbrk+0x64>)
 8001d7c:	6013      	str	r3, [r2, #0]
	
	return (void*) prev_heap_end;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20018000 	.word	0x20018000
 8001d8c:	00000400 	.word	0x00000400
 8001d90:	20000338 	.word	0x20000338
 8001d94:	20000350 	.word	0x20000350

08001d98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <SystemInit+0x20>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <SystemInit+0x20>)
 8001da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dc0:	f7ff ffea 	bl	8001d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc4:	480c      	ldr	r0, [pc, #48]	; (8001df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dc6:	490d      	ldr	r1, [pc, #52]	; (8001dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <LoopForever+0xe>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dcc:	e002      	b.n	8001dd4 <LoopCopyDataInit>

08001dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd2:	3304      	adds	r3, #4

08001dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd8:	d3f9      	bcc.n	8001dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ddc:	4c0a      	ldr	r4, [pc, #40]	; (8001e08 <LoopForever+0x16>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de0:	e001      	b.n	8001de6 <LoopFillZerobss>

08001de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de4:	3204      	adds	r2, #4

08001de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de8:	d3fb      	bcc.n	8001de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dea:	f004 fa2d 	bl	8006248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dee:	f7ff fb8b 	bl	8001508 <main>

08001df2 <LoopForever>:

LoopForever:
    b LoopForever
 8001df2:	e7fe      	b.n	8001df2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001df4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dfc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e00:	0800952c 	.word	0x0800952c
  ldr r2, =_sbss
 8001e04:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e08:	20000350 	.word	0x20000350

08001e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <ADC1_2_IRQHandler>
	...

08001e10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <HAL_Init+0x3c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <HAL_Init+0x3c>)
 8001e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e26:	2003      	movs	r0, #3
 8001e28:	f000 f944 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f000 f80f 	bl	8001e50 <HAL_InitTick>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	71fb      	strb	r3, [r7, #7]
 8001e3c:	e001      	b.n	8001e42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e3e:	f7ff fd8b 	bl	8001958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e42:	79fb      	ldrb	r3, [r7, #7]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40022000 	.word	0x40022000

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_InitTick+0x6c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d023      	beq.n	8001eac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_InitTick+0x70>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_InitTick+0x6c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f941 	bl	8002102 <HAL_SYSTICK_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10f      	bne.n	8001ea6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b0f      	cmp	r3, #15
 8001e8a:	d809      	bhi.n	8001ea0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f000 f919 	bl	80020ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_InitTick+0x74>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e007      	b.n	8001eb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e004      	b.n	8001eb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	e001      	b.n	8001eb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000008 	.word	0x20000008
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_IncTick+0x20>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_IncTick+0x24>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_IncTick+0x24>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	2000033c 	.word	0x2000033c

08001ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_GetTick+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	2000033c 	.word	0x2000033c

08001f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff ffee 	bl	8001ef0 <HAL_GetTick>
 8001f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d005      	beq.n	8001f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_Delay+0x44>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f2e:	bf00      	nop
 8001f30:	f7ff ffde 	bl	8001ef0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d8f7      	bhi.n	8001f30 <HAL_Delay+0x28>
  {
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000008 	.word	0x20000008

08001f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f003 0307 	and.w	r3, r3, #7
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	; (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	; (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff8e 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff47 	bl	8001f50 <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff5c 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff8e 	bl	8002008 <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5d 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffb0 	bl	8002070 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212a:	e17f      	b.n	800242c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8171 	beq.w	8002426 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d005      	beq.n	800215c <HAL_GPIO_Init+0x40>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d130      	bne.n	80021be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002192:	2201      	movs	r2, #1
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 0201 	and.w	r2, r3, #1
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d118      	bne.n	80021fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021d0:	2201      	movs	r2, #1
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	f003 0201 	and.w	r2, r3, #1
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b03      	cmp	r3, #3
 8002206:	d017      	beq.n	8002238 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d123      	bne.n	800228c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	6939      	ldr	r1, [r7, #16]
 8002288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80ac 	beq.w	8002426 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	4b5f      	ldr	r3, [pc, #380]	; (800244c <HAL_GPIO_Init+0x330>)
 80022d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d2:	4a5e      	ldr	r2, [pc, #376]	; (800244c <HAL_GPIO_Init+0x330>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6613      	str	r3, [r2, #96]	; 0x60
 80022da:	4b5c      	ldr	r3, [pc, #368]	; (800244c <HAL_GPIO_Init+0x330>)
 80022dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022e6:	4a5a      	ldr	r2, [pc, #360]	; (8002450 <HAL_GPIO_Init+0x334>)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	3302      	adds	r3, #2
 80022ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	220f      	movs	r2, #15
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002310:	d025      	beq.n	800235e <HAL_GPIO_Init+0x242>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4f      	ldr	r2, [pc, #316]	; (8002454 <HAL_GPIO_Init+0x338>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01f      	beq.n	800235a <HAL_GPIO_Init+0x23e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4e      	ldr	r2, [pc, #312]	; (8002458 <HAL_GPIO_Init+0x33c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d019      	beq.n	8002356 <HAL_GPIO_Init+0x23a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4d      	ldr	r2, [pc, #308]	; (800245c <HAL_GPIO_Init+0x340>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d013      	beq.n	8002352 <HAL_GPIO_Init+0x236>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4c      	ldr	r2, [pc, #304]	; (8002460 <HAL_GPIO_Init+0x344>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00d      	beq.n	800234e <HAL_GPIO_Init+0x232>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4b      	ldr	r2, [pc, #300]	; (8002464 <HAL_GPIO_Init+0x348>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d007      	beq.n	800234a <HAL_GPIO_Init+0x22e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4a      	ldr	r2, [pc, #296]	; (8002468 <HAL_GPIO_Init+0x34c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_GPIO_Init+0x22a>
 8002342:	2306      	movs	r3, #6
 8002344:	e00c      	b.n	8002360 <HAL_GPIO_Init+0x244>
 8002346:	2307      	movs	r3, #7
 8002348:	e00a      	b.n	8002360 <HAL_GPIO_Init+0x244>
 800234a:	2305      	movs	r3, #5
 800234c:	e008      	b.n	8002360 <HAL_GPIO_Init+0x244>
 800234e:	2304      	movs	r3, #4
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x244>
 8002352:	2303      	movs	r3, #3
 8002354:	e004      	b.n	8002360 <HAL_GPIO_Init+0x244>
 8002356:	2302      	movs	r3, #2
 8002358:	e002      	b.n	8002360 <HAL_GPIO_Init+0x244>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_GPIO_Init+0x244>
 800235e:	2300      	movs	r3, #0
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	f002 0203 	and.w	r2, r2, #3
 8002366:	0092      	lsls	r2, r2, #2
 8002368:	4093      	lsls	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002370:	4937      	ldr	r1, [pc, #220]	; (8002450 <HAL_GPIO_Init+0x334>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800237e:	4b3b      	ldr	r3, [pc, #236]	; (800246c <HAL_GPIO_Init+0x350>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023a2:	4a32      	ldr	r2, [pc, #200]	; (800246c <HAL_GPIO_Init+0x350>)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023a8:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_GPIO_Init+0x350>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023cc:	4a27      	ldr	r2, [pc, #156]	; (800246c <HAL_GPIO_Init+0x350>)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_GPIO_Init+0x350>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023f6:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_GPIO_Init+0x350>)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <HAL_GPIO_Init+0x350>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	43db      	mvns	r3, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002420:	4a12      	ldr	r2, [pc, #72]	; (800246c <HAL_GPIO_Init+0x350>)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	f47f ae78 	bne.w	800212c <HAL_GPIO_Init+0x10>
  }
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000
 8002454:	48000400 	.word	0x48000400
 8002458:	48000800 	.word	0x48000800
 800245c:	48000c00 	.word	0x48000c00
 8002460:	48001000 	.word	0x48001000
 8002464:	48001400 	.word	0x48001400
 8002468:	48001800 	.word	0x48001800
 800246c:	40010400 	.word	0x40010400

08002470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
 800247c:	4613      	mov	r3, r2
 800247e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002480:	787b      	ldrb	r3, [r7, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800248c:	e002      	b.n	8002494 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e081      	b.n	80025b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff fa6a 	bl	80019a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2224      	movs	r2, #36	; 0x24
 80024d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002500:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d107      	bne.n	800251a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	e006      	b.n	8002528 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002526:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d104      	bne.n	800253a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002538:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800254c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69d9      	ldr	r1, [r3, #28]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1a      	ldr	r2, [r3, #32]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	4608      	mov	r0, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	817b      	strh	r3, [r7, #10]
 80025d2:	460b      	mov	r3, r1
 80025d4:	813b      	strh	r3, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	f040 80f9 	bne.w	80027da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_I2C_Mem_Write+0x34>
 80025ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0ed      	b.n	80027dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_I2C_Mem_Write+0x4e>
 800260a:	2302      	movs	r3, #2
 800260c:	e0e6      	b.n	80027dc <HAL_I2C_Mem_Write+0x21c>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002616:	f7ff fc6b 	bl	8001ef0 <HAL_GetTick>
 800261a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2319      	movs	r3, #25
 8002622:	2201      	movs	r2, #1
 8002624:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fac3 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0d1      	b.n	80027dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2221      	movs	r2, #33	; 0x21
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2240      	movs	r2, #64	; 0x40
 8002644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a3a      	ldr	r2, [r7, #32]
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002658:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002660:	88f8      	ldrh	r0, [r7, #6]
 8002662:	893a      	ldrh	r2, [r7, #8]
 8002664:	8979      	ldrh	r1, [r7, #10]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	4603      	mov	r3, r0
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f9d3 	bl	8002a1c <I2C_RequestMemoryWrite>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0a9      	b.n	80027dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	2bff      	cmp	r3, #255	; 0xff
 8002690:	d90e      	bls.n	80026b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	22ff      	movs	r2, #255	; 0xff
 8002696:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	b2da      	uxtb	r2, r3
 800269e:	8979      	ldrh	r1, [r7, #10]
 80026a0:	2300      	movs	r3, #0
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fc2b 	bl	8002f04 <I2C_TransferConfig>
 80026ae:	e00f      	b.n	80026d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	8979      	ldrh	r1, [r7, #10]
 80026c2:	2300      	movs	r3, #0
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fc1a 	bl	8002f04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 faad 	bl	8002c34 <I2C_WaitOnTXISFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e07b      	b.n	80027dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d034      	beq.n	8002788 <HAL_I2C_Mem_Write+0x1c8>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	2b00      	cmp	r3, #0
 8002724:	d130      	bne.n	8002788 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	2200      	movs	r2, #0
 800272e:	2180      	movs	r1, #128	; 0x80
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fa3f 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e04d      	b.n	80027dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	2bff      	cmp	r3, #255	; 0xff
 8002748:	d90e      	bls.n	8002768 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	22ff      	movs	r2, #255	; 0xff
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	b2da      	uxtb	r2, r3
 8002756:	8979      	ldrh	r1, [r7, #10]
 8002758:	2300      	movs	r3, #0
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fbcf 	bl	8002f04 <I2C_TransferConfig>
 8002766:	e00f      	b.n	8002788 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	b2da      	uxtb	r2, r3
 8002778:	8979      	ldrh	r1, [r7, #10]
 800277a:	2300      	movs	r3, #0
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fbbe 	bl	8002f04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d19e      	bne.n	80026d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fa8c 	bl	8002cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e01a      	b.n	80027dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2220      	movs	r2, #32
 80027ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_I2C_Mem_Write+0x224>)
 80027ba:	400b      	ands	r3, r1
 80027bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e000      	b.n	80027dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80027da:	2302      	movs	r3, #2
  }
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	fe00e800 	.word	0xfe00e800

080027e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	817b      	strh	r3, [r7, #10]
 80027fa:	460b      	mov	r3, r1
 80027fc:	813b      	strh	r3, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b20      	cmp	r3, #32
 800280c:	f040 80fd 	bne.w	8002a0a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_I2C_Mem_Read+0x34>
 8002816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002822:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0f1      	b.n	8002a0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Mem_Read+0x4e>
 8002832:	2302      	movs	r3, #2
 8002834:	e0ea      	b.n	8002a0c <HAL_I2C_Mem_Read+0x224>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800283e:	f7ff fb57 	bl	8001ef0 <HAL_GetTick>
 8002842:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2319      	movs	r3, #25
 800284a:	2201      	movs	r2, #1
 800284c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f9af 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0d5      	b.n	8002a0c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2222      	movs	r2, #34	; 0x22
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2240      	movs	r2, #64	; 0x40
 800286c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a3a      	ldr	r2, [r7, #32]
 800287a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002880:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002888:	88f8      	ldrh	r0, [r7, #6]
 800288a:	893a      	ldrh	r2, [r7, #8]
 800288c:	8979      	ldrh	r1, [r7, #10]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	4603      	mov	r3, r0
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f913 	bl	8002ac4 <I2C_RequestMemoryRead>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0ad      	b.n	8002a0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2bff      	cmp	r3, #255	; 0xff
 80028b8:	d90e      	bls.n	80028d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	22ff      	movs	r2, #255	; 0xff
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	8979      	ldrh	r1, [r7, #10]
 80028c8:	4b52      	ldr	r3, [pc, #328]	; (8002a14 <HAL_I2C_Mem_Read+0x22c>)
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fb17 	bl	8002f04 <I2C_TransferConfig>
 80028d6:	e00f      	b.n	80028f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_I2C_Mem_Read+0x22c>)
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fb06 	bl	8002f04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	2200      	movs	r2, #0
 8002900:	2104      	movs	r1, #4
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f956 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07c      	b.n	8002a0c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d034      	beq.n	80029b8 <HAL_I2C_Mem_Read+0x1d0>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002952:	2b00      	cmp	r3, #0
 8002954:	d130      	bne.n	80029b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	2200      	movs	r2, #0
 800295e:	2180      	movs	r1, #128	; 0x80
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f927 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e04d      	b.n	8002a0c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	2bff      	cmp	r3, #255	; 0xff
 8002978:	d90e      	bls.n	8002998 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	22ff      	movs	r2, #255	; 0xff
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002984:	b2da      	uxtb	r2, r3
 8002986:	8979      	ldrh	r1, [r7, #10]
 8002988:	2300      	movs	r3, #0
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fab7 	bl	8002f04 <I2C_TransferConfig>
 8002996:	e00f      	b.n	80029b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	8979      	ldrh	r1, [r7, #10]
 80029aa:	2300      	movs	r3, #0
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 faa6 	bl	8002f04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d19a      	bne.n	80028f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f974 	bl	8002cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e01a      	b.n	8002a0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2220      	movs	r2, #32
 80029dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6859      	ldr	r1, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_I2C_Mem_Read+0x230>)
 80029ea:	400b      	ands	r3, r1
 80029ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e000      	b.n	8002a0c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
  }
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	80002400 	.word	0x80002400
 8002a18:	fe00e800 	.word	0xfe00e800

08002a1c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	4608      	mov	r0, r1
 8002a26:	4611      	mov	r1, r2
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	817b      	strh	r3, [r7, #10]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	813b      	strh	r3, [r7, #8]
 8002a32:	4613      	mov	r3, r2
 8002a34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	8979      	ldrh	r1, [r7, #10]
 8002a3c:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <I2C_RequestMemoryWrite+0xa4>)
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fa5d 	bl	8002f04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	69b9      	ldr	r1, [r7, #24]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f8f0 	bl	8002c34 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e02c      	b.n	8002ab8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a64:	893b      	ldrh	r3, [r7, #8]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28
 8002a6e:	e015      	b.n	8002a9c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a70:	893b      	ldrh	r3, [r7, #8]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	69b9      	ldr	r1, [r7, #24]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f8d6 	bl	8002c34 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e012      	b.n	8002ab8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a92:	893b      	ldrh	r3, [r7, #8]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2180      	movs	r1, #128	; 0x80
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f884 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	80002000 	.word	0x80002000

08002ac4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	4608      	mov	r0, r1
 8002ace:	4611      	mov	r1, r2
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	817b      	strh	r3, [r7, #10]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	813b      	strh	r3, [r7, #8]
 8002ada:	4613      	mov	r3, r2
 8002adc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	8979      	ldrh	r1, [r7, #10]
 8002ae4:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <I2C_RequestMemoryRead+0xa4>)
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fa0a 	bl	8002f04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af0:	69fa      	ldr	r2, [r7, #28]
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f89d 	bl	8002c34 <I2C_WaitOnTXISFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e02c      	b.n	8002b5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d105      	bne.n	8002b16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b0a:	893b      	ldrh	r3, [r7, #8]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
 8002b14:	e015      	b.n	8002b42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b16:	893b      	ldrh	r3, [r7, #8]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	69b9      	ldr	r1, [r7, #24]
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f883 	bl	8002c34 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e012      	b.n	8002b5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b38:	893b      	ldrh	r3, [r7, #8]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2140      	movs	r1, #64	; 0x40
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f831 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	80002000 	.word	0x80002000

08002b6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d103      	bne.n	8002b8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2200      	movs	r2, #0
 8002b88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d007      	beq.n	8002ba8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	619a      	str	r2, [r3, #24]
  }
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc4:	e022      	b.n	8002c0c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d01e      	beq.n	8002c0c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bce:	f7ff f98f 	bl	8001ef0 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d302      	bcc.n	8002be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d113      	bne.n	8002c0c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e00f      	b.n	8002c2c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4013      	ands	r3, r2
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d0cd      	beq.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c40:	e02c      	b.n	8002c9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f870 	bl	8002d2c <I2C_IsErrorOccurred>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e02a      	b.n	8002cac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5c:	d01e      	beq.n	8002c9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7ff f947 	bl	8001ef0 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d113      	bne.n	8002c9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	f043 0220 	orr.w	r2, r3, #32
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e007      	b.n	8002cac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d1cb      	bne.n	8002c42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cc0:	e028      	b.n	8002d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f830 	bl	8002d2c <I2C_IsErrorOccurred>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e026      	b.n	8002d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd6:	f7ff f90b 	bl	8001ef0 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d113      	bne.n	8002d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	f043 0220 	orr.w	r2, r3, #32
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e007      	b.n	8002d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d1cf      	bne.n	8002cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d075      	beq.n	8002e44 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d60:	e056      	b.n	8002e10 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d68:	d052      	beq.n	8002e10 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d6a:	f7ff f8c1 	bl	8001ef0 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d302      	bcc.n	8002d80 <I2C_IsErrorOccurred+0x54>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d147      	bne.n	8002e10 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da2:	d12e      	bne.n	8002e02 <I2C_IsErrorOccurred+0xd6>
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002daa:	d02a      	beq.n	8002e02 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002dac:	7cfb      	ldrb	r3, [r7, #19]
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d027      	beq.n	8002e02 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dc0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002dc2:	f7ff f895 	bl	8001ef0 <HAL_GetTick>
 8002dc6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dc8:	e01b      	b.n	8002e02 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002dca:	f7ff f891 	bl	8001ef0 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b19      	cmp	r3, #25
 8002dd6:	d914      	bls.n	8002e02 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	f043 0220 	orr.w	r2, r3, #32
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d1dc      	bne.n	8002dca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d003      	beq.n	8002e26 <I2C_IsErrorOccurred+0xfa>
 8002e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d09d      	beq.n	8002d62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2220      	movs	r2, #32
 8002e34:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	f043 0308 	orr.w	r3, r3, #8
 8002e7e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01c      	beq.n	8002ef4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7ff fe56 	bl	8002b6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <I2C_IsErrorOccurred+0x1d4>)
 8002ecc:	400b      	ands	r3, r1
 8002ece:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3728      	adds	r7, #40	; 0x28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	fe00e800 	.word	0xfe00e800

08002f04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	817b      	strh	r3, [r7, #10]
 8002f12:	4613      	mov	r3, r2
 8002f14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f16:	897b      	ldrh	r3, [r7, #10]
 8002f18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f1c:	7a7b      	ldrb	r3, [r7, #9]
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	0d5b      	lsrs	r3, r3, #21
 8002f3e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <I2C_TransferConfig+0x60>)
 8002f44:	430b      	orrs	r3, r1
 8002f46:	43db      	mvns	r3, r3
 8002f48:	ea02 0103 	and.w	r1, r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	03ff63ff 	.word	0x03ff63ff

08002f68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d138      	bne.n	8002ff0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e032      	b.n	8002ff2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2224      	movs	r2, #36	; 0x24
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e000      	b.n	8002ff2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ff0:	2302      	movs	r3, #2
  }
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b20      	cmp	r3, #32
 8003012:	d139      	bne.n	8003088 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800301e:	2302      	movs	r3, #2
 8003020:	e033      	b.n	800308a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2224      	movs	r2, #36	; 0x24
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003050:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e000      	b.n	800308a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003088:	2302      	movs	r3, #2
  }
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40007000 	.word	0x40007000

080030b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c2:	d130      	bne.n	8003126 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030c4:	4b23      	ldr	r3, [pc, #140]	; (8003154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d0:	d038      	beq.n	8003144 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030da:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030e2:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2232      	movs	r2, #50	; 0x32
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	4a1b      	ldr	r2, [pc, #108]	; (800315c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0c9b      	lsrs	r3, r3, #18
 80030f4:	3301      	adds	r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030f8:	e002      	b.n	8003100 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003100:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310c:	d102      	bne.n	8003114 <HAL_PWREx_ControlVoltageScaling+0x60>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f2      	bne.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003114:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003120:	d110      	bne.n	8003144 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e00f      	b.n	8003146 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800312e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003132:	d007      	beq.n	8003144 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003134:	4b07      	ldr	r3, [pc, #28]	; (8003154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800313c:	4a05      	ldr	r2, [pc, #20]	; (8003154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003142:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40007000 	.word	0x40007000
 8003158:	20000000 	.word	0x20000000
 800315c:	431bde83 	.word	0x431bde83

08003160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e3ca      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003172:	4b97      	ldr	r3, [pc, #604]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800317c:	4b94      	ldr	r3, [pc, #592]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80e4 	beq.w	800335c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <HAL_RCC_OscConfig+0x4a>
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	f040 808b 	bne.w	80032b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	f040 8087 	bne.w	80032b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031aa:	4b89      	ldr	r3, [pc, #548]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_RCC_OscConfig+0x62>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e3a2      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1a      	ldr	r2, [r3, #32]
 80031c6:	4b82      	ldr	r3, [pc, #520]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d004      	beq.n	80031dc <HAL_RCC_OscConfig+0x7c>
 80031d2:	4b7f      	ldr	r3, [pc, #508]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031da:	e005      	b.n	80031e8 <HAL_RCC_OscConfig+0x88>
 80031dc:	4b7c      	ldr	r3, [pc, #496]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80031de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e2:	091b      	lsrs	r3, r3, #4
 80031e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d223      	bcs.n	8003234 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fd55 	bl	8003ca0 <RCC_SetFlashLatencyFromMSIRange>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e383      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003200:	4b73      	ldr	r3, [pc, #460]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a72      	ldr	r2, [pc, #456]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003206:	f043 0308 	orr.w	r3, r3, #8
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b70      	ldr	r3, [pc, #448]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	496d      	ldr	r1, [pc, #436]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800321e:	4b6c      	ldr	r3, [pc, #432]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	4968      	ldr	r1, [pc, #416]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]
 8003232:	e025      	b.n	8003280 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003234:	4b66      	ldr	r3, [pc, #408]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a65      	ldr	r2, [pc, #404]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 800323a:	f043 0308 	orr.w	r3, r3, #8
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b63      	ldr	r3, [pc, #396]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4960      	ldr	r1, [pc, #384]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003252:	4b5f      	ldr	r3, [pc, #380]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	495b      	ldr	r1, [pc, #364]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003262:	4313      	orrs	r3, r2
 8003264:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fd15 	bl	8003ca0 <RCC_SetFlashLatencyFromMSIRange>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e343      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003280:	f000 fc4a 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b52      	ldr	r3, [pc, #328]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	4950      	ldr	r1, [pc, #320]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
 800329c:	4a4e      	ldr	r2, [pc, #312]	; (80033d8 <HAL_RCC_OscConfig+0x278>)
 800329e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032a0:	4b4e      	ldr	r3, [pc, #312]	; (80033dc <HAL_RCC_OscConfig+0x27c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fdd3 	bl	8001e50 <HAL_InitTick>
 80032aa:	4603      	mov	r3, r0
 80032ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d052      	beq.n	800335a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	e327      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d032      	beq.n	8003326 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032c0:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a42      	ldr	r2, [pc, #264]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032cc:	f7fe fe10 	bl	8001ef0 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032d4:	f7fe fe0c 	bl	8001ef0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e310      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032e6:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032f2:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a36      	ldr	r2, [pc, #216]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80032f8:	f043 0308 	orr.w	r3, r3, #8
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	4931      	ldr	r1, [pc, #196]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 800330c:	4313      	orrs	r3, r2
 800330e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003310:	4b2f      	ldr	r3, [pc, #188]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	492c      	ldr	r1, [pc, #176]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
 8003324:	e01a      	b.n	800335c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003326:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a29      	ldr	r2, [pc, #164]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003332:	f7fe fddd 	bl	8001ef0 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800333a:	f7fe fdd9 	bl	8001ef0 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e2dd      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800334c:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f0      	bne.n	800333a <HAL_RCC_OscConfig+0x1da>
 8003358:	e000      	b.n	800335c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800335a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d074      	beq.n	8003452 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b08      	cmp	r3, #8
 800336c:	d005      	beq.n	800337a <HAL_RCC_OscConfig+0x21a>
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2b0c      	cmp	r3, #12
 8003372:	d10e      	bne.n	8003392 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d10b      	bne.n	8003392 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d064      	beq.n	8003450 <HAL_RCC_OscConfig+0x2f0>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d160      	bne.n	8003450 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e2ba      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339a:	d106      	bne.n	80033aa <HAL_RCC_OscConfig+0x24a>
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80033a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	e026      	b.n	80033f8 <HAL_RCC_OscConfig+0x298>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b2:	d115      	bne.n	80033e0 <HAL_RCC_OscConfig+0x280>
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80033ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a02      	ldr	r2, [pc, #8]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80033c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	e014      	b.n	80033f8 <HAL_RCC_OscConfig+0x298>
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000
 80033d4:	080090f8 	.word	0x080090f8
 80033d8:	20000000 	.word	0x20000000
 80033dc:	20000004 	.word	0x20000004
 80033e0:	4ba0      	ldr	r3, [pc, #640]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a9f      	ldr	r2, [pc, #636]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b9d      	ldr	r3, [pc, #628]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a9c      	ldr	r2, [pc, #624]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80033f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe fd76 	bl	8001ef0 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe fd72 	bl	8001ef0 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e276      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800341a:	4b92      	ldr	r3, [pc, #584]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x2a8>
 8003426:	e014      	b.n	8003452 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe fd62 	bl	8001ef0 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe fd5e 	bl	8001ef0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e262      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003442:	4b88      	ldr	r3, [pc, #544]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x2d0>
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d060      	beq.n	8003520 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d005      	beq.n	8003470 <HAL_RCC_OscConfig+0x310>
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b0c      	cmp	r3, #12
 8003468:	d119      	bne.n	800349e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d116      	bne.n	800349e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003470:	4b7c      	ldr	r3, [pc, #496]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_OscConfig+0x328>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e23f      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b76      	ldr	r3, [pc, #472]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	4973      	ldr	r1, [pc, #460]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800349c:	e040      	b.n	8003520 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d023      	beq.n	80034ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a6:	4b6f      	ldr	r3, [pc, #444]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a6e      	ldr	r2, [pc, #440]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fe fd1d 	bl	8001ef0 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ba:	f7fe fd19 	bl	8001ef0 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e21d      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034cc:	4b65      	ldr	r3, [pc, #404]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d8:	4b62      	ldr	r3, [pc, #392]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	061b      	lsls	r3, r3, #24
 80034e6:	495f      	ldr	r1, [pc, #380]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]
 80034ec:	e018      	b.n	8003520 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ee:	4b5d      	ldr	r3, [pc, #372]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a5c      	ldr	r2, [pc, #368]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80034f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fe fcf9 	bl	8001ef0 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003502:	f7fe fcf5 	bl	8001ef0 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e1f9      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003514:	4b53      	ldr	r3, [pc, #332]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d03c      	beq.n	80035a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01c      	beq.n	800356e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003534:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 8003536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800353a:	4a4a      	ldr	r2, [pc, #296]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fe fcd4 	bl	8001ef0 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354c:	f7fe fcd0 	bl	8001ef0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e1d4      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800355e:	4b41      	ldr	r3, [pc, #260]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 8003560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ef      	beq.n	800354c <HAL_RCC_OscConfig+0x3ec>
 800356c:	e01b      	b.n	80035a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356e:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 8003570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003574:	4a3b      	ldr	r2, [pc, #236]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7fe fcb7 	bl	8001ef0 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003586:	f7fe fcb3 	bl	8001ef0 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e1b7      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003598:	4b32      	ldr	r3, [pc, #200]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 800359a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1ef      	bne.n	8003586 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80a6 	beq.w	8003700 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b4:	2300      	movs	r3, #0
 80035b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035b8:	4b2a      	ldr	r3, [pc, #168]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10d      	bne.n	80035e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c4:	4b27      	ldr	r3, [pc, #156]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ce:	6593      	str	r3, [r2, #88]	; 0x58
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035dc:	2301      	movs	r3, #1
 80035de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <HAL_RCC_OscConfig+0x508>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d118      	bne.n	800361e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ec:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <HAL_RCC_OscConfig+0x508>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <HAL_RCC_OscConfig+0x508>)
 80035f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f8:	f7fe fc7a 	bl	8001ef0 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003600:	f7fe fc76 	bl	8001ef0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e17a      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003612:	4b15      	ldr	r3, [pc, #84]	; (8003668 <HAL_RCC_OscConfig+0x508>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d108      	bne.n	8003638 <HAL_RCC_OscConfig+0x4d8>
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362c:	4a0d      	ldr	r2, [pc, #52]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003636:	e029      	b.n	800368c <HAL_RCC_OscConfig+0x52c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b05      	cmp	r3, #5
 800363e:	d115      	bne.n	800366c <HAL_RCC_OscConfig+0x50c>
 8003640:	4b08      	ldr	r3, [pc, #32]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	4a07      	ldr	r2, [pc, #28]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	4a03      	ldr	r2, [pc, #12]	; (8003664 <HAL_RCC_OscConfig+0x504>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003660:	e014      	b.n	800368c <HAL_RCC_OscConfig+0x52c>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	40007000 	.word	0x40007000
 800366c:	4b9c      	ldr	r3, [pc, #624]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	4a9b      	ldr	r2, [pc, #620]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800367c:	4b98      	ldr	r3, [pc, #608]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	4a97      	ldr	r2, [pc, #604]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d016      	beq.n	80036c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fe fc2c 	bl	8001ef0 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369c:	f7fe fc28 	bl	8001ef0 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e12a      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b2:	4b8b      	ldr	r3, [pc, #556]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ed      	beq.n	800369c <HAL_RCC_OscConfig+0x53c>
 80036c0:	e015      	b.n	80036ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c2:	f7fe fc15 	bl	8001ef0 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe fc11 	bl	8001ef0 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e113      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036e0:	4b7f      	ldr	r3, [pc, #508]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1ed      	bne.n	80036ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ee:	7ffb      	ldrb	r3, [r7, #31]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f4:	4b7a      	ldr	r3, [pc, #488]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	4a79      	ldr	r2, [pc, #484]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 80036fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80fe 	beq.w	8003906 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	2b02      	cmp	r3, #2
 8003710:	f040 80d0 	bne.w	80038b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003714:	4b72      	ldr	r3, [pc, #456]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f003 0203 	and.w	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	429a      	cmp	r2, r3
 8003726:	d130      	bne.n	800378a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	3b01      	subs	r3, #1
 8003734:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	429a      	cmp	r2, r3
 8003738:	d127      	bne.n	800378a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003744:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d11f      	bne.n	800378a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003754:	2a07      	cmp	r2, #7
 8003756:	bf14      	ite	ne
 8003758:	2201      	movne	r2, #1
 800375a:	2200      	moveq	r2, #0
 800375c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800375e:	4293      	cmp	r3, r2
 8003760:	d113      	bne.n	800378a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	3b01      	subs	r3, #1
 8003770:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d109      	bne.n	800378a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	3b01      	subs	r3, #1
 8003784:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d06e      	beq.n	8003868 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b0c      	cmp	r3, #12
 800378e:	d069      	beq.n	8003864 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003790:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d105      	bne.n	80037a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800379c:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0ad      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037ac:	4b4c      	ldr	r3, [pc, #304]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a4b      	ldr	r2, [pc, #300]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 80037b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037b8:	f7fe fb9a 	bl	8001ef0 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe fb96 	bl	8001ef0 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e09a      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d2:	4b43      	ldr	r3, [pc, #268]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037de:	4b40      	ldr	r3, [pc, #256]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	4b40      	ldr	r3, [pc, #256]	; (80038e4 <HAL_RCC_OscConfig+0x784>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037ee:	3a01      	subs	r2, #1
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	4311      	orrs	r1, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037f8:	0212      	lsls	r2, r2, #8
 80037fa:	4311      	orrs	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003800:	0852      	lsrs	r2, r2, #1
 8003802:	3a01      	subs	r2, #1
 8003804:	0552      	lsls	r2, r2, #21
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800380c:	0852      	lsrs	r2, r2, #1
 800380e:	3a01      	subs	r2, #1
 8003810:	0652      	lsls	r2, r2, #25
 8003812:	4311      	orrs	r1, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003818:	0912      	lsrs	r2, r2, #4
 800381a:	0452      	lsls	r2, r2, #17
 800381c:	430a      	orrs	r2, r1
 800381e:	4930      	ldr	r1, [pc, #192]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 8003820:	4313      	orrs	r3, r2
 8003822:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003824:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a2d      	ldr	r2, [pc, #180]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 800382a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800382e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003830:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4a2a      	ldr	r2, [pc, #168]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 8003836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800383c:	f7fe fb58 	bl	8001ef0 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe fb54 	bl	8001ef0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e058      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003856:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003862:	e050      	b.n	8003906 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e04f      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003868:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d148      	bne.n	8003906 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003874:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a19      	ldr	r2, [pc, #100]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 800387a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003880:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a16      	ldr	r2, [pc, #88]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 8003886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800388c:	f7fe fb30 	bl	8001ef0 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe fb2c 	bl	8001ef0 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e030      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a6:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x734>
 80038b2:	e028      	b.n	8003906 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b0c      	cmp	r3, #12
 80038b8:	d023      	beq.n	8003902 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a08      	ldr	r2, [pc, #32]	; (80038e0 <HAL_RCC_OscConfig+0x780>)
 80038c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7fe fb13 	bl	8001ef0 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038cc:	e00c      	b.n	80038e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fe fb0f 	bl	8001ef0 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d905      	bls.n	80038e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e013      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_RCC_OscConfig+0x7b0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1ec      	bne.n	80038ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_RCC_OscConfig+0x7b0>)
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	4905      	ldr	r1, [pc, #20]	; (8003910 <HAL_RCC_OscConfig+0x7b0>)
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCC_OscConfig+0x7b4>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	60cb      	str	r3, [r1, #12]
 8003900:	e001      	b.n	8003906 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3720      	adds	r7, #32
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	feeefffc 	.word	0xfeeefffc

08003918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0e7      	b.n	8003afc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800392c:	4b75      	ldr	r3, [pc, #468]	; (8003b04 <HAL_RCC_ClockConfig+0x1ec>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d910      	bls.n	800395c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b72      	ldr	r3, [pc, #456]	; (8003b04 <HAL_RCC_ClockConfig+0x1ec>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 0207 	bic.w	r2, r3, #7
 8003942:	4970      	ldr	r1, [pc, #448]	; (8003b04 <HAL_RCC_ClockConfig+0x1ec>)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b6e      	ldr	r3, [pc, #440]	; (8003b04 <HAL_RCC_ClockConfig+0x1ec>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0cf      	b.n	8003afc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d010      	beq.n	800398a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	4b66      	ldr	r3, [pc, #408]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003974:	429a      	cmp	r2, r3
 8003976:	d908      	bls.n	800398a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003978:	4b63      	ldr	r3, [pc, #396]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4960      	ldr	r1, [pc, #384]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d04c      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b03      	cmp	r3, #3
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800399e:	4b5a      	ldr	r3, [pc, #360]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d121      	bne.n	80039ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e0a6      	b.n	8003afc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039b6:	4b54      	ldr	r3, [pc, #336]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d115      	bne.n	80039ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e09a      	b.n	8003afc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ce:	4b4e      	ldr	r3, [pc, #312]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e08e      	b.n	8003afc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039de:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e086      	b.n	8003afc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039ee:	4b46      	ldr	r3, [pc, #280]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 0203 	bic.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4943      	ldr	r1, [pc, #268]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a00:	f7fe fa76 	bl	8001ef0 <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a08:	f7fe fa72 	bl	8001ef0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e06e      	b.n	8003afc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	4b3a      	ldr	r3, [pc, #232]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 020c 	and.w	r2, r3, #12
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1eb      	bne.n	8003a08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d010      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d208      	bcs.n	8003a5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4c:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	492b      	ldr	r1, [pc, #172]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a5e:	4b29      	ldr	r3, [pc, #164]	; (8003b04 <HAL_RCC_ClockConfig+0x1ec>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d210      	bcs.n	8003a8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6c:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <HAL_RCC_ClockConfig+0x1ec>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f023 0207 	bic.w	r2, r3, #7
 8003a74:	4923      	ldr	r1, [pc, #140]	; (8003b04 <HAL_RCC_ClockConfig+0x1ec>)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7c:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <HAL_RCC_ClockConfig+0x1ec>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e036      	b.n	8003afc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	4918      	ldr	r1, [pc, #96]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d009      	beq.n	8003acc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ab8:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4910      	ldr	r1, [pc, #64]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003acc:	f000 f824 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	490b      	ldr	r1, [pc, #44]	; (8003b0c <HAL_RCC_ClockConfig+0x1f4>)
 8003ade:	5ccb      	ldrb	r3, [r1, r3]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae8:	4a09      	ldr	r2, [pc, #36]	; (8003b10 <HAL_RCC_ClockConfig+0x1f8>)
 8003aea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <HAL_RCC_ClockConfig+0x1fc>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe f9ad 	bl	8001e50 <HAL_InitTick>
 8003af6:	4603      	mov	r3, r0
 8003af8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003afa:	7afb      	ldrb	r3, [r7, #11]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40022000 	.word	0x40022000
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	080090f8 	.word	0x080090f8
 8003b10:	20000000 	.word	0x20000000
 8003b14:	20000004 	.word	0x20000004

08003b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
 8003b22:	2300      	movs	r3, #0
 8003b24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b26:	4b3e      	ldr	r3, [pc, #248]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b30:	4b3b      	ldr	r3, [pc, #236]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_GetSysClockFreq+0x34>
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b0c      	cmp	r3, #12
 8003b44:	d121      	bne.n	8003b8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d11e      	bne.n	8003b8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b4c:	4b34      	ldr	r3, [pc, #208]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d107      	bne.n	8003b68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b58:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5e:	0a1b      	lsrs	r3, r3, #8
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	e005      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b74:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10d      	bne.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d102      	bne.n	8003b96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b90:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	e004      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b9c:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x114>)
 8003b9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d134      	bne.n	8003c10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ba6:	4b1e      	ldr	r3, [pc, #120]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCC_GetSysClockFreq+0xa6>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d003      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xac>
 8003bbc:	e005      	b.n	8003bca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bbe:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bc0:	617b      	str	r3, [r7, #20]
      break;
 8003bc2:	e005      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x114>)
 8003bc6:	617b      	str	r3, [r7, #20]
      break;
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	617b      	str	r3, [r7, #20]
      break;
 8003bce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bd0:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	3301      	adds	r3, #1
 8003bdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	fb03 f202 	mul.w	r2, r3, r2
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	0e5b      	lsrs	r3, r3, #25
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	3301      	adds	r3, #1
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c10:	69bb      	ldr	r3, [r7, #24]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3724      	adds	r7, #36	; 0x24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	08009110 	.word	0x08009110
 8003c28:	00f42400 	.word	0x00f42400
 8003c2c:	007a1200 	.word	0x007a1200

08003c30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c36:	681b      	ldr	r3, [r3, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000000 	.word	0x20000000

08003c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c4c:	f7ff fff0 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4904      	ldr	r1, [pc, #16]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	08009108 	.word	0x08009108

08003c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c78:	f7ff ffda 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	0adb      	lsrs	r3, r3, #11
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4904      	ldr	r1, [pc, #16]	; (8003c9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	08009108 	.word	0x08009108

08003ca0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ca8:	2300      	movs	r3, #0
 8003caa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cac:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cb8:	f7ff f9ee 	bl	8003098 <HAL_PWREx_GetVoltageRange>
 8003cbc:	6178      	str	r0, [r7, #20]
 8003cbe:	e014      	b.n	8003cea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cc0:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc4:	4a24      	ldr	r2, [pc, #144]	; (8003d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cca:	6593      	str	r3, [r2, #88]	; 0x58
 8003ccc:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cd8:	f7ff f9de 	bl	8003098 <HAL_PWREx_GetVoltageRange>
 8003cdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cde:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf0:	d10b      	bne.n	8003d0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b80      	cmp	r3, #128	; 0x80
 8003cf6:	d919      	bls.n	8003d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2ba0      	cmp	r3, #160	; 0xa0
 8003cfc:	d902      	bls.n	8003d04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cfe:	2302      	movs	r3, #2
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	e013      	b.n	8003d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d04:	2301      	movs	r3, #1
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	e010      	b.n	8003d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b80      	cmp	r3, #128	; 0x80
 8003d0e:	d902      	bls.n	8003d16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d10:	2303      	movs	r3, #3
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	e00a      	b.n	8003d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b80      	cmp	r3, #128	; 0x80
 8003d1a:	d102      	bne.n	8003d22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	e004      	b.n	8003d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b70      	cmp	r3, #112	; 0x70
 8003d26:	d101      	bne.n	8003d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d28:	2301      	movs	r3, #1
 8003d2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 0207 	bic.w	r2, r3, #7
 8003d34:	4909      	ldr	r1, [pc, #36]	; (8003d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d3c:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d001      	beq.n	8003d4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40022000 	.word	0x40022000

08003d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d68:	2300      	movs	r3, #0
 8003d6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d041      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d84:	d02a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d8a:	d824      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d90:	d008      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d96:	d81e      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da0:	d010      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003da2:	e018      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003da4:	4b86      	ldr	r3, [pc, #536]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4a85      	ldr	r2, [pc, #532]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003db0:	e015      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3304      	adds	r3, #4
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fabb 	bl	8004334 <RCCEx_PLLSAI1_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dc2:	e00c      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3320      	adds	r3, #32
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fba6 	bl	800451c <RCCEx_PLLSAI2_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dd4:	e003      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	74fb      	strb	r3, [r7, #19]
      break;
 8003dda:	e000      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dde:	7cfb      	ldrb	r3, [r7, #19]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003de4:	4b76      	ldr	r3, [pc, #472]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df2:	4973      	ldr	r1, [pc, #460]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dfa:	e001      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d041      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e14:	d02a      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e1a:	d824      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e20:	d008      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e26:	d81e      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e30:	d010      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e32:	e018      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e34:	4b62      	ldr	r3, [pc, #392]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4a61      	ldr	r2, [pc, #388]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e40:	e015      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fa73 	bl	8004334 <RCCEx_PLLSAI1_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e52:	e00c      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3320      	adds	r3, #32
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fb5e 	bl	800451c <RCCEx_PLLSAI2_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e64:	e003      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	74fb      	strb	r3, [r7, #19]
      break;
 8003e6a:	e000      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e6e:	7cfb      	ldrb	r3, [r7, #19]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10b      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e74:	4b52      	ldr	r3, [pc, #328]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e82:	494f      	ldr	r1, [pc, #316]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e8a:	e001      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8c:	7cfb      	ldrb	r3, [r7, #19]
 8003e8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80a0 	beq.w	8003fde <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ea2:	4b47      	ldr	r3, [pc, #284]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00d      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb8:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	4a40      	ldr	r2, [pc, #256]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec4:	4b3e      	ldr	r3, [pc, #248]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed4:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a3a      	ldr	r2, [pc, #232]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ede:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ee0:	f7fe f806 	bl	8001ef0 <HAL_GetTick>
 8003ee4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ee6:	e009      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee8:	f7fe f802 	bl	8001ef0 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d902      	bls.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	74fb      	strb	r3, [r7, #19]
        break;
 8003efa:	e005      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003efc:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ef      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f08:	7cfb      	ldrb	r3, [r7, #19]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d15c      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f0e:	4b2c      	ldr	r3, [pc, #176]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01f      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d019      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f2c:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f38:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f48:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f58:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d016      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6a:	f7fd ffc1 	bl	8001ef0 <HAL_GetTick>
 8003f6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f70:	e00b      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fd ffbd 	bl	8001ef0 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d902      	bls.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	74fb      	strb	r3, [r7, #19]
            break;
 8003f88:	e006      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0ec      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fae:	4904      	ldr	r1, [pc, #16]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fb6:	e009      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fb8:	7cfb      	ldrb	r3, [r7, #19]
 8003fba:	74bb      	strb	r3, [r7, #18]
 8003fbc:	e006      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003fbe:	bf00      	nop
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fcc:	7c7b      	ldrb	r3, [r7, #17]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d105      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd2:	4b9e      	ldr	r3, [pc, #632]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	4a9d      	ldr	r2, [pc, #628]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fea:	4b98      	ldr	r3, [pc, #608]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff0:	f023 0203 	bic.w	r2, r3, #3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	4994      	ldr	r1, [pc, #592]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800400c:	4b8f      	ldr	r3, [pc, #572]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f023 020c 	bic.w	r2, r3, #12
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	498c      	ldr	r1, [pc, #560]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800402e:	4b87      	ldr	r3, [pc, #540]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	4983      	ldr	r1, [pc, #524]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004050:	4b7e      	ldr	r3, [pc, #504]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	497b      	ldr	r1, [pc, #492]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004072:	4b76      	ldr	r3, [pc, #472]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004080:	4972      	ldr	r1, [pc, #456]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004094:	4b6d      	ldr	r3, [pc, #436]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a2:	496a      	ldr	r1, [pc, #424]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040b6:	4b65      	ldr	r3, [pc, #404]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c4:	4961      	ldr	r1, [pc, #388]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040d8:	4b5c      	ldr	r3, [pc, #368]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e6:	4959      	ldr	r1, [pc, #356]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040fa:	4b54      	ldr	r3, [pc, #336]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004100:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004108:	4950      	ldr	r1, [pc, #320]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800411c:	4b4b      	ldr	r3, [pc, #300]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	4948      	ldr	r1, [pc, #288]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800413e:	4b43      	ldr	r3, [pc, #268]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	493f      	ldr	r1, [pc, #252]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d028      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004160:	4b3a      	ldr	r3, [pc, #232]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004166:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416e:	4937      	ldr	r1, [pc, #220]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800417e:	d106      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004180:	4b32      	ldr	r3, [pc, #200]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4a31      	ldr	r2, [pc, #196]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800418a:	60d3      	str	r3, [r2, #12]
 800418c:	e011      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004192:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004196:	d10c      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	2101      	movs	r1, #1
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f8c8 	bl	8004334 <RCCEx_PLLSAI1_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d028      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041be:	4b23      	ldr	r3, [pc, #140]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	491f      	ldr	r1, [pc, #124]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041dc:	d106      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041de:	4b1b      	ldr	r3, [pc, #108]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	4a1a      	ldr	r2, [pc, #104]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041e8:	60d3      	str	r3, [r2, #12]
 80041ea:	e011      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041f4:	d10c      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3304      	adds	r3, #4
 80041fa:	2101      	movs	r1, #1
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f899 	bl	8004334 <RCCEx_PLLSAI1_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004206:	7cfb      	ldrb	r3, [r7, #19]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d02b      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422a:	4908      	ldr	r1, [pc, #32]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423a:	d109      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a02      	ldr	r2, [pc, #8]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004246:	60d3      	str	r3, [r2, #12]
 8004248:	e014      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004258:	d10c      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	2101      	movs	r1, #1
 8004260:	4618      	mov	r0, r3
 8004262:	f000 f867 	bl	8004334 <RCCEx_PLLSAI1_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004270:	7cfb      	ldrb	r3, [r7, #19]
 8004272:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d02f      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004280:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800428e:	4928      	ldr	r1, [pc, #160]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800429a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800429e:	d10d      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	2102      	movs	r1, #2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f844 	bl	8004334 <RCCEx_PLLSAI1_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042b0:	7cfb      	ldrb	r3, [r7, #19]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d014      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042b6:	7cfb      	ldrb	r3, [r7, #19]
 80042b8:	74bb      	strb	r3, [r7, #18]
 80042ba:	e011      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3320      	adds	r3, #32
 80042ca:	2102      	movs	r1, #2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 f925 	bl	800451c <RCCEx_PLLSAI2_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042d6:	7cfb      	ldrb	r3, [r7, #19]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042dc:	7cfb      	ldrb	r3, [r7, #19]
 80042de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042fa:	490d      	ldr	r1, [pc, #52]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004314:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800431e:	4904      	ldr	r1, [pc, #16]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004326:	7cbb      	ldrb	r3, [r7, #18]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000

08004334 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004342:	4b75      	ldr	r3, [pc, #468]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d018      	beq.n	8004380 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800434e:	4b72      	ldr	r3, [pc, #456]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f003 0203 	and.w	r2, r3, #3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d10d      	bne.n	800437a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
       ||
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004366:	4b6c      	ldr	r3, [pc, #432]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
       ||
 8004376:	429a      	cmp	r2, r3
 8004378:	d047      	beq.n	800440a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
 800437e:	e044      	b.n	800440a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d018      	beq.n	80043ba <RCCEx_PLLSAI1_Config+0x86>
 8004388:	2b03      	cmp	r3, #3
 800438a:	d825      	bhi.n	80043d8 <RCCEx_PLLSAI1_Config+0xa4>
 800438c:	2b01      	cmp	r3, #1
 800438e:	d002      	beq.n	8004396 <RCCEx_PLLSAI1_Config+0x62>
 8004390:	2b02      	cmp	r3, #2
 8004392:	d009      	beq.n	80043a8 <RCCEx_PLLSAI1_Config+0x74>
 8004394:	e020      	b.n	80043d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004396:	4b60      	ldr	r3, [pc, #384]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d11d      	bne.n	80043de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a6:	e01a      	b.n	80043de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043a8:	4b5b      	ldr	r3, [pc, #364]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d116      	bne.n	80043e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b8:	e013      	b.n	80043e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ba:	4b57      	ldr	r3, [pc, #348]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10f      	bne.n	80043e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043c6:	4b54      	ldr	r3, [pc, #336]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043d6:	e006      	b.n	80043e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      break;
 80043dc:	e004      	b.n	80043e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043de:	bf00      	nop
 80043e0:	e002      	b.n	80043e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043e2:	bf00      	nop
 80043e4:	e000      	b.n	80043e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10d      	bne.n	800440a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043ee:	4b4a      	ldr	r3, [pc, #296]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	3b01      	subs	r3, #1
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	430b      	orrs	r3, r1
 8004404:	4944      	ldr	r1, [pc, #272]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004406:	4313      	orrs	r3, r2
 8004408:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d17d      	bne.n	800450c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004410:	4b41      	ldr	r3, [pc, #260]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a40      	ldr	r2, [pc, #256]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004416:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800441a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800441c:	f7fd fd68 	bl	8001ef0 <HAL_GetTick>
 8004420:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004422:	e009      	b.n	8004438 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004424:	f7fd fd64 	bl	8001ef0 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d902      	bls.n	8004438 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	73fb      	strb	r3, [r7, #15]
        break;
 8004436:	e005      	b.n	8004444 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004438:	4b37      	ldr	r3, [pc, #220]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1ef      	bne.n	8004424 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d160      	bne.n	800450c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d111      	bne.n	8004474 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004450:	4b31      	ldr	r3, [pc, #196]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6892      	ldr	r2, [r2, #8]
 8004460:	0211      	lsls	r1, r2, #8
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68d2      	ldr	r2, [r2, #12]
 8004466:	0912      	lsrs	r2, r2, #4
 8004468:	0452      	lsls	r2, r2, #17
 800446a:	430a      	orrs	r2, r1
 800446c:	492a      	ldr	r1, [pc, #168]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800446e:	4313      	orrs	r3, r2
 8004470:	610b      	str	r3, [r1, #16]
 8004472:	e027      	b.n	80044c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d112      	bne.n	80044a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800447a:	4b27      	ldr	r3, [pc, #156]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004482:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6892      	ldr	r2, [r2, #8]
 800448a:	0211      	lsls	r1, r2, #8
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6912      	ldr	r2, [r2, #16]
 8004490:	0852      	lsrs	r2, r2, #1
 8004492:	3a01      	subs	r2, #1
 8004494:	0552      	lsls	r2, r2, #21
 8004496:	430a      	orrs	r2, r1
 8004498:	491f      	ldr	r1, [pc, #124]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	610b      	str	r3, [r1, #16]
 800449e:	e011      	b.n	80044c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044a0:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6892      	ldr	r2, [r2, #8]
 80044b0:	0211      	lsls	r1, r2, #8
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6952      	ldr	r2, [r2, #20]
 80044b6:	0852      	lsrs	r2, r2, #1
 80044b8:	3a01      	subs	r2, #1
 80044ba:	0652      	lsls	r2, r2, #25
 80044bc:	430a      	orrs	r2, r1
 80044be:	4916      	ldr	r1, [pc, #88]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044c4:	4b14      	ldr	r3, [pc, #80]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a13      	ldr	r2, [pc, #76]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fd fd0e 	bl	8001ef0 <HAL_GetTick>
 80044d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044d6:	e009      	b.n	80044ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044d8:	f7fd fd0a 	bl	8001ef0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d902      	bls.n	80044ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	73fb      	strb	r3, [r7, #15]
          break;
 80044ea:	e005      	b.n	80044f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ef      	beq.n	80044d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044fe:	4b06      	ldr	r3, [pc, #24]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	4904      	ldr	r1, [pc, #16]	; (8004518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004508:	4313      	orrs	r3, r2
 800450a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000

0800451c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800452a:	4b6a      	ldr	r3, [pc, #424]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d018      	beq.n	8004568 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004536:	4b67      	ldr	r3, [pc, #412]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0203 	and.w	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d10d      	bne.n	8004562 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
       ||
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800454e:	4b61      	ldr	r3, [pc, #388]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	091b      	lsrs	r3, r3, #4
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
       ||
 800455e:	429a      	cmp	r2, r3
 8004560:	d047      	beq.n	80045f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
 8004566:	e044      	b.n	80045f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b03      	cmp	r3, #3
 800456e:	d018      	beq.n	80045a2 <RCCEx_PLLSAI2_Config+0x86>
 8004570:	2b03      	cmp	r3, #3
 8004572:	d825      	bhi.n	80045c0 <RCCEx_PLLSAI2_Config+0xa4>
 8004574:	2b01      	cmp	r3, #1
 8004576:	d002      	beq.n	800457e <RCCEx_PLLSAI2_Config+0x62>
 8004578:	2b02      	cmp	r3, #2
 800457a:	d009      	beq.n	8004590 <RCCEx_PLLSAI2_Config+0x74>
 800457c:	e020      	b.n	80045c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800457e:	4b55      	ldr	r3, [pc, #340]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d11d      	bne.n	80045c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800458e:	e01a      	b.n	80045c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004590:	4b50      	ldr	r3, [pc, #320]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	2b00      	cmp	r3, #0
 800459a:	d116      	bne.n	80045ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a0:	e013      	b.n	80045ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045a2:	4b4c      	ldr	r3, [pc, #304]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10f      	bne.n	80045ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045ae:	4b49      	ldr	r3, [pc, #292]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045be:	e006      	b.n	80045ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
      break;
 80045c4:	e004      	b.n	80045d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045c6:	bf00      	nop
 80045c8:	e002      	b.n	80045d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045ca:	bf00      	nop
 80045cc:	e000      	b.n	80045d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10d      	bne.n	80045f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045d6:	4b3f      	ldr	r3, [pc, #252]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6819      	ldr	r1, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	430b      	orrs	r3, r1
 80045ec:	4939      	ldr	r1, [pc, #228]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d167      	bne.n	80046c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045f8:	4b36      	ldr	r3, [pc, #216]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a35      	ldr	r2, [pc, #212]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004604:	f7fd fc74 	bl	8001ef0 <HAL_GetTick>
 8004608:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800460a:	e009      	b.n	8004620 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800460c:	f7fd fc70 	bl	8001ef0 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d902      	bls.n	8004620 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	73fb      	strb	r3, [r7, #15]
        break;
 800461e:	e005      	b.n	800462c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004620:	4b2c      	ldr	r3, [pc, #176]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1ef      	bne.n	800460c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d14a      	bne.n	80046c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d111      	bne.n	800465c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004638:	4b26      	ldr	r3, [pc, #152]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6892      	ldr	r2, [r2, #8]
 8004648:	0211      	lsls	r1, r2, #8
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	68d2      	ldr	r2, [r2, #12]
 800464e:	0912      	lsrs	r2, r2, #4
 8004650:	0452      	lsls	r2, r2, #17
 8004652:	430a      	orrs	r2, r1
 8004654:	491f      	ldr	r1, [pc, #124]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004656:	4313      	orrs	r3, r2
 8004658:	614b      	str	r3, [r1, #20]
 800465a:	e011      	b.n	8004680 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800465c:	4b1d      	ldr	r3, [pc, #116]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004664:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6892      	ldr	r2, [r2, #8]
 800466c:	0211      	lsls	r1, r2, #8
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6912      	ldr	r2, [r2, #16]
 8004672:	0852      	lsrs	r2, r2, #1
 8004674:	3a01      	subs	r2, #1
 8004676:	0652      	lsls	r2, r2, #25
 8004678:	430a      	orrs	r2, r1
 800467a:	4916      	ldr	r1, [pc, #88]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800467c:	4313      	orrs	r3, r2
 800467e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004680:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468c:	f7fd fc30 	bl	8001ef0 <HAL_GetTick>
 8004690:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004692:	e009      	b.n	80046a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004694:	f7fd fc2c 	bl	8001ef0 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d902      	bls.n	80046a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	73fb      	strb	r3, [r7, #15]
          break;
 80046a6:	e005      	b.n	80046b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046a8:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0ef      	beq.n	8004694 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4904      	ldr	r1, [pc, #16]	; (80046d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000

080046d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e049      	b.n	800477e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fd f9ac 	bl	8001a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f000 fb7a 	bl	8004e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e049      	b.n	800482c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d106      	bne.n	80047b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f841 	bl	8004834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2202      	movs	r2, #2
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3304      	adds	r3, #4
 80047c2:	4619      	mov	r1, r3
 80047c4:	4610      	mov	r0, r2
 80047c6:	f000 fb23 	bl	8004e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d109      	bne.n	800486c <HAL_TIM_PWM_Start+0x24>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	e03c      	b.n	80048e6 <HAL_TIM_PWM_Start+0x9e>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b04      	cmp	r3, #4
 8004870:	d109      	bne.n	8004886 <HAL_TIM_PWM_Start+0x3e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b01      	cmp	r3, #1
 800487c:	bf14      	ite	ne
 800487e:	2301      	movne	r3, #1
 8004880:	2300      	moveq	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	e02f      	b.n	80048e6 <HAL_TIM_PWM_Start+0x9e>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d109      	bne.n	80048a0 <HAL_TIM_PWM_Start+0x58>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	e022      	b.n	80048e6 <HAL_TIM_PWM_Start+0x9e>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b0c      	cmp	r3, #12
 80048a4:	d109      	bne.n	80048ba <HAL_TIM_PWM_Start+0x72>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	bf14      	ite	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	2300      	moveq	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	e015      	b.n	80048e6 <HAL_TIM_PWM_Start+0x9e>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b10      	cmp	r3, #16
 80048be:	d109      	bne.n	80048d4 <HAL_TIM_PWM_Start+0x8c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	e008      	b.n	80048e6 <HAL_TIM_PWM_Start+0x9e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	bf14      	ite	ne
 80048e0:	2301      	movne	r3, #1
 80048e2:	2300      	moveq	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e09c      	b.n	8004a28 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d104      	bne.n	80048fe <HAL_TIM_PWM_Start+0xb6>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048fc:	e023      	b.n	8004946 <HAL_TIM_PWM_Start+0xfe>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b04      	cmp	r3, #4
 8004902:	d104      	bne.n	800490e <HAL_TIM_PWM_Start+0xc6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800490c:	e01b      	b.n	8004946 <HAL_TIM_PWM_Start+0xfe>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b08      	cmp	r3, #8
 8004912:	d104      	bne.n	800491e <HAL_TIM_PWM_Start+0xd6>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800491c:	e013      	b.n	8004946 <HAL_TIM_PWM_Start+0xfe>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d104      	bne.n	800492e <HAL_TIM_PWM_Start+0xe6>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800492c:	e00b      	b.n	8004946 <HAL_TIM_PWM_Start+0xfe>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b10      	cmp	r3, #16
 8004932:	d104      	bne.n	800493e <HAL_TIM_PWM_Start+0xf6>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800493c:	e003      	b.n	8004946 <HAL_TIM_PWM_Start+0xfe>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2202      	movs	r2, #2
 8004942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2201      	movs	r2, #1
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fe68 	bl	8005624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a35      	ldr	r2, [pc, #212]	; (8004a30 <HAL_TIM_PWM_Start+0x1e8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <HAL_TIM_PWM_Start+0x13e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a34      	ldr	r2, [pc, #208]	; (8004a34 <HAL_TIM_PWM_Start+0x1ec>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00e      	beq.n	8004986 <HAL_TIM_PWM_Start+0x13e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a32      	ldr	r2, [pc, #200]	; (8004a38 <HAL_TIM_PWM_Start+0x1f0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_TIM_PWM_Start+0x13e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a31      	ldr	r2, [pc, #196]	; (8004a3c <HAL_TIM_PWM_Start+0x1f4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_TIM_PWM_Start+0x13e>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2f      	ldr	r2, [pc, #188]	; (8004a40 <HAL_TIM_PWM_Start+0x1f8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d101      	bne.n	800498a <HAL_TIM_PWM_Start+0x142>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <HAL_TIM_PWM_Start+0x144>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d007      	beq.n	80049a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800499e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <HAL_TIM_PWM_Start+0x1e8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01d      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x19e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b2:	d018      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x19e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a22      	ldr	r2, [pc, #136]	; (8004a44 <HAL_TIM_PWM_Start+0x1fc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x19e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a21      	ldr	r2, [pc, #132]	; (8004a48 <HAL_TIM_PWM_Start+0x200>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00e      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x19e>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <HAL_TIM_PWM_Start+0x204>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d009      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x19e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a17      	ldr	r2, [pc, #92]	; (8004a34 <HAL_TIM_PWM_Start+0x1ec>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d004      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x19e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a15      	ldr	r2, [pc, #84]	; (8004a38 <HAL_TIM_PWM_Start+0x1f0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d115      	bne.n	8004a12 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	4b18      	ldr	r3, [pc, #96]	; (8004a50 <HAL_TIM_PWM_Start+0x208>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b06      	cmp	r3, #6
 80049f6:	d015      	beq.n	8004a24 <HAL_TIM_PWM_Start+0x1dc>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fe:	d011      	beq.n	8004a24 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	e008      	b.n	8004a24 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	e000      	b.n	8004a26 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40012c00 	.word	0x40012c00
 8004a34:	40013400 	.word	0x40013400
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40014400 	.word	0x40014400
 8004a40:	40014800 	.word	0x40014800
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	00010007 	.word	0x00010007

08004a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e0ff      	b.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b14      	cmp	r3, #20
 8004a7e:	f200 80f0 	bhi.w	8004c62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004add 	.word	0x08004add
 8004a8c:	08004c63 	.word	0x08004c63
 8004a90:	08004c63 	.word	0x08004c63
 8004a94:	08004c63 	.word	0x08004c63
 8004a98:	08004b1d 	.word	0x08004b1d
 8004a9c:	08004c63 	.word	0x08004c63
 8004aa0:	08004c63 	.word	0x08004c63
 8004aa4:	08004c63 	.word	0x08004c63
 8004aa8:	08004b5f 	.word	0x08004b5f
 8004aac:	08004c63 	.word	0x08004c63
 8004ab0:	08004c63 	.word	0x08004c63
 8004ab4:	08004c63 	.word	0x08004c63
 8004ab8:	08004b9f 	.word	0x08004b9f
 8004abc:	08004c63 	.word	0x08004c63
 8004ac0:	08004c63 	.word	0x08004c63
 8004ac4:	08004c63 	.word	0x08004c63
 8004ac8:	08004be1 	.word	0x08004be1
 8004acc:	08004c63 	.word	0x08004c63
 8004ad0:	08004c63 	.word	0x08004c63
 8004ad4:	08004c63 	.word	0x08004c63
 8004ad8:	08004c21 	.word	0x08004c21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fa2e 	bl	8004f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0208 	orr.w	r2, r2, #8
 8004af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0204 	bic.w	r2, r2, #4
 8004b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6999      	ldr	r1, [r3, #24]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	619a      	str	r2, [r3, #24]
      break;
 8004b1a:	e0a5      	b.n	8004c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fa9e 	bl	8005064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	021a      	lsls	r2, r3, #8
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	619a      	str	r2, [r3, #24]
      break;
 8004b5c:	e084      	b.n	8004c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fb07 	bl	8005178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0208 	orr.w	r2, r2, #8
 8004b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0204 	bic.w	r2, r2, #4
 8004b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69d9      	ldr	r1, [r3, #28]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	61da      	str	r2, [r3, #28]
      break;
 8004b9c:	e064      	b.n	8004c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fb6f 	bl	8005288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69d9      	ldr	r1, [r3, #28]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	021a      	lsls	r2, r3, #8
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	61da      	str	r2, [r3, #28]
      break;
 8004bde:	e043      	b.n	8004c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fbb8 	bl	800535c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0208 	orr.w	r2, r2, #8
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0204 	bic.w	r2, r2, #4
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c1e:	e023      	b.n	8004c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fbfc 	bl	8005424 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	021a      	lsls	r2, r3, #8
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c60:	e002      	b.n	8004c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
      break;
 8004c66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop

08004c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_TIM_ConfigClockSource+0x1c>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e0b6      	b.n	8004e06 <HAL_TIM_ConfigClockSource+0x18a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd4:	d03e      	beq.n	8004d54 <HAL_TIM_ConfigClockSource+0xd8>
 8004cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cda:	f200 8087 	bhi.w	8004dec <HAL_TIM_ConfigClockSource+0x170>
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	f000 8086 	beq.w	8004df2 <HAL_TIM_ConfigClockSource+0x176>
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cea:	d87f      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x170>
 8004cec:	2b70      	cmp	r3, #112	; 0x70
 8004cee:	d01a      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0xaa>
 8004cf0:	2b70      	cmp	r3, #112	; 0x70
 8004cf2:	d87b      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x170>
 8004cf4:	2b60      	cmp	r3, #96	; 0x60
 8004cf6:	d050      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x11e>
 8004cf8:	2b60      	cmp	r3, #96	; 0x60
 8004cfa:	d877      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x170>
 8004cfc:	2b50      	cmp	r3, #80	; 0x50
 8004cfe:	d03c      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0xfe>
 8004d00:	2b50      	cmp	r3, #80	; 0x50
 8004d02:	d873      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x170>
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d058      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x13e>
 8004d08:	2b40      	cmp	r3, #64	; 0x40
 8004d0a:	d86f      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x170>
 8004d0c:	2b30      	cmp	r3, #48	; 0x30
 8004d0e:	d064      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x15e>
 8004d10:	2b30      	cmp	r3, #48	; 0x30
 8004d12:	d86b      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x170>
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d060      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x15e>
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d867      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x170>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d05c      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x15e>
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d05a      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x15e>
 8004d24:	e062      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	6899      	ldr	r1, [r3, #8]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f000 fc55 	bl	80055e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	609a      	str	r2, [r3, #8]
      break;
 8004d52:	e04f      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6899      	ldr	r1, [r3, #8]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f000 fc3e 	bl	80055e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d76:	609a      	str	r2, [r3, #8]
      break;
 8004d78:	e03c      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6859      	ldr	r1, [r3, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	461a      	mov	r2, r3
 8004d88:	f000 fbb2 	bl	80054f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2150      	movs	r1, #80	; 0x50
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fc0b 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8004d98:	e02c      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6859      	ldr	r1, [r3, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f000 fbd1 	bl	800554e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2160      	movs	r1, #96	; 0x60
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fbfb 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8004db8:	e01c      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	6859      	ldr	r1, [r3, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f000 fb92 	bl	80054f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2140      	movs	r1, #64	; 0x40
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fbeb 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8004dd8:	e00c      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f000 fbe2 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8004dea:	e003      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
      break;
 8004df0:	e000      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a40      	ldr	r2, [pc, #256]	; (8004f24 <TIM_Base_SetConfig+0x114>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d013      	beq.n	8004e50 <TIM_Base_SetConfig+0x40>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2e:	d00f      	beq.n	8004e50 <TIM_Base_SetConfig+0x40>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a3d      	ldr	r2, [pc, #244]	; (8004f28 <TIM_Base_SetConfig+0x118>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00b      	beq.n	8004e50 <TIM_Base_SetConfig+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a3c      	ldr	r2, [pc, #240]	; (8004f2c <TIM_Base_SetConfig+0x11c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a3b      	ldr	r2, [pc, #236]	; (8004f30 <TIM_Base_SetConfig+0x120>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a3a      	ldr	r2, [pc, #232]	; (8004f34 <TIM_Base_SetConfig+0x124>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d108      	bne.n	8004e62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2f      	ldr	r2, [pc, #188]	; (8004f24 <TIM_Base_SetConfig+0x114>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01f      	beq.n	8004eaa <TIM_Base_SetConfig+0x9a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e70:	d01b      	beq.n	8004eaa <TIM_Base_SetConfig+0x9a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2c      	ldr	r2, [pc, #176]	; (8004f28 <TIM_Base_SetConfig+0x118>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d017      	beq.n	8004eaa <TIM_Base_SetConfig+0x9a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2b      	ldr	r2, [pc, #172]	; (8004f2c <TIM_Base_SetConfig+0x11c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <TIM_Base_SetConfig+0x9a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a2a      	ldr	r2, [pc, #168]	; (8004f30 <TIM_Base_SetConfig+0x120>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00f      	beq.n	8004eaa <TIM_Base_SetConfig+0x9a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a29      	ldr	r2, [pc, #164]	; (8004f34 <TIM_Base_SetConfig+0x124>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00b      	beq.n	8004eaa <TIM_Base_SetConfig+0x9a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a28      	ldr	r2, [pc, #160]	; (8004f38 <TIM_Base_SetConfig+0x128>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <TIM_Base_SetConfig+0x9a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a27      	ldr	r2, [pc, #156]	; (8004f3c <TIM_Base_SetConfig+0x12c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <TIM_Base_SetConfig+0x9a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a26      	ldr	r2, [pc, #152]	; (8004f40 <TIM_Base_SetConfig+0x130>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d108      	bne.n	8004ebc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a10      	ldr	r2, [pc, #64]	; (8004f24 <TIM_Base_SetConfig+0x114>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00f      	beq.n	8004f08 <TIM_Base_SetConfig+0xf8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a12      	ldr	r2, [pc, #72]	; (8004f34 <TIM_Base_SetConfig+0x124>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00b      	beq.n	8004f08 <TIM_Base_SetConfig+0xf8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a11      	ldr	r2, [pc, #68]	; (8004f38 <TIM_Base_SetConfig+0x128>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d007      	beq.n	8004f08 <TIM_Base_SetConfig+0xf8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <TIM_Base_SetConfig+0x12c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_Base_SetConfig+0xf8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <TIM_Base_SetConfig+0x130>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d103      	bne.n	8004f10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	615a      	str	r2, [r3, #20]
}
 8004f16:	bf00      	nop
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40012c00 	.word	0x40012c00
 8004f28:	40000400 	.word	0x40000400
 8004f2c:	40000800 	.word	0x40000800
 8004f30:	40000c00 	.word	0x40000c00
 8004f34:	40013400 	.word	0x40013400
 8004f38:	40014000 	.word	0x40014000
 8004f3c:	40014400 	.word	0x40014400
 8004f40:	40014800 	.word	0x40014800

08004f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f023 0201 	bic.w	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0303 	bic.w	r3, r3, #3
 8004f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 0302 	bic.w	r3, r3, #2
 8004f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a2c      	ldr	r2, [pc, #176]	; (8005050 <TIM_OC1_SetConfig+0x10c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00f      	beq.n	8004fc4 <TIM_OC1_SetConfig+0x80>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a2b      	ldr	r2, [pc, #172]	; (8005054 <TIM_OC1_SetConfig+0x110>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <TIM_OC1_SetConfig+0x80>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a2a      	ldr	r2, [pc, #168]	; (8005058 <TIM_OC1_SetConfig+0x114>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d007      	beq.n	8004fc4 <TIM_OC1_SetConfig+0x80>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a29      	ldr	r2, [pc, #164]	; (800505c <TIM_OC1_SetConfig+0x118>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_OC1_SetConfig+0x80>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a28      	ldr	r2, [pc, #160]	; (8005060 <TIM_OC1_SetConfig+0x11c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d10c      	bne.n	8004fde <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0308 	bic.w	r3, r3, #8
 8004fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f023 0304 	bic.w	r3, r3, #4
 8004fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <TIM_OC1_SetConfig+0x10c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00f      	beq.n	8005006 <TIM_OC1_SetConfig+0xc2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1a      	ldr	r2, [pc, #104]	; (8005054 <TIM_OC1_SetConfig+0x110>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00b      	beq.n	8005006 <TIM_OC1_SetConfig+0xc2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a19      	ldr	r2, [pc, #100]	; (8005058 <TIM_OC1_SetConfig+0x114>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d007      	beq.n	8005006 <TIM_OC1_SetConfig+0xc2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a18      	ldr	r2, [pc, #96]	; (800505c <TIM_OC1_SetConfig+0x118>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_OC1_SetConfig+0xc2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a17      	ldr	r2, [pc, #92]	; (8005060 <TIM_OC1_SetConfig+0x11c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d111      	bne.n	800502a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800500c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	621a      	str	r2, [r3, #32]
}
 8005044:	bf00      	nop
 8005046:	371c      	adds	r7, #28
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40013400 	.word	0x40013400
 8005058:	40014000 	.word	0x40014000
 800505c:	40014400 	.word	0x40014400
 8005060:	40014800 	.word	0x40014800

08005064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f023 0210 	bic.w	r2, r3, #16
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f023 0320 	bic.w	r3, r3, #32
 80050b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a28      	ldr	r2, [pc, #160]	; (8005164 <TIM_OC2_SetConfig+0x100>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_OC2_SetConfig+0x6c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a27      	ldr	r2, [pc, #156]	; (8005168 <TIM_OC2_SetConfig+0x104>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d10d      	bne.n	80050ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <TIM_OC2_SetConfig+0x100>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00f      	beq.n	8005114 <TIM_OC2_SetConfig+0xb0>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <TIM_OC2_SetConfig+0x104>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00b      	beq.n	8005114 <TIM_OC2_SetConfig+0xb0>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a1b      	ldr	r2, [pc, #108]	; (800516c <TIM_OC2_SetConfig+0x108>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <TIM_OC2_SetConfig+0xb0>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a1a      	ldr	r2, [pc, #104]	; (8005170 <TIM_OC2_SetConfig+0x10c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_OC2_SetConfig+0xb0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a19      	ldr	r2, [pc, #100]	; (8005174 <TIM_OC2_SetConfig+0x110>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d113      	bne.n	800513c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800511a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	621a      	str	r2, [r3, #32]
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40012c00 	.word	0x40012c00
 8005168:	40013400 	.word	0x40013400
 800516c:	40014000 	.word	0x40014000
 8005170:	40014400 	.word	0x40014400
 8005174:	40014800 	.word	0x40014800

08005178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0303 	bic.w	r3, r3, #3
 80051b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	021b      	lsls	r3, r3, #8
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a27      	ldr	r2, [pc, #156]	; (8005274 <TIM_OC3_SetConfig+0xfc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d003      	beq.n	80051e2 <TIM_OC3_SetConfig+0x6a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a26      	ldr	r2, [pc, #152]	; (8005278 <TIM_OC3_SetConfig+0x100>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d10d      	bne.n	80051fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <TIM_OC3_SetConfig+0xfc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00f      	beq.n	8005226 <TIM_OC3_SetConfig+0xae>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a1b      	ldr	r2, [pc, #108]	; (8005278 <TIM_OC3_SetConfig+0x100>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00b      	beq.n	8005226 <TIM_OC3_SetConfig+0xae>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a1a      	ldr	r2, [pc, #104]	; (800527c <TIM_OC3_SetConfig+0x104>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d007      	beq.n	8005226 <TIM_OC3_SetConfig+0xae>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a19      	ldr	r2, [pc, #100]	; (8005280 <TIM_OC3_SetConfig+0x108>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d003      	beq.n	8005226 <TIM_OC3_SetConfig+0xae>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a18      	ldr	r2, [pc, #96]	; (8005284 <TIM_OC3_SetConfig+0x10c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d113      	bne.n	800524e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800522c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	621a      	str	r2, [r3, #32]
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	40012c00 	.word	0x40012c00
 8005278:	40013400 	.word	0x40013400
 800527c:	40014000 	.word	0x40014000
 8005280:	40014400 	.word	0x40014400
 8005284:	40014800 	.word	0x40014800

08005288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	021b      	lsls	r3, r3, #8
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	031b      	lsls	r3, r3, #12
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a18      	ldr	r2, [pc, #96]	; (8005348 <TIM_OC4_SetConfig+0xc0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00f      	beq.n	800530c <TIM_OC4_SetConfig+0x84>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a17      	ldr	r2, [pc, #92]	; (800534c <TIM_OC4_SetConfig+0xc4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00b      	beq.n	800530c <TIM_OC4_SetConfig+0x84>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a16      	ldr	r2, [pc, #88]	; (8005350 <TIM_OC4_SetConfig+0xc8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d007      	beq.n	800530c <TIM_OC4_SetConfig+0x84>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a15      	ldr	r2, [pc, #84]	; (8005354 <TIM_OC4_SetConfig+0xcc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_OC4_SetConfig+0x84>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a14      	ldr	r2, [pc, #80]	; (8005358 <TIM_OC4_SetConfig+0xd0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d109      	bne.n	8005320 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005312:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	019b      	lsls	r3, r3, #6
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40012c00 	.word	0x40012c00
 800534c:	40013400 	.word	0x40013400
 8005350:	40014000 	.word	0x40014000
 8005354:	40014400 	.word	0x40014400
 8005358:	40014800 	.word	0x40014800

0800535c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	041b      	lsls	r3, r3, #16
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a17      	ldr	r2, [pc, #92]	; (8005410 <TIM_OC5_SetConfig+0xb4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00f      	beq.n	80053d6 <TIM_OC5_SetConfig+0x7a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a16      	ldr	r2, [pc, #88]	; (8005414 <TIM_OC5_SetConfig+0xb8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00b      	beq.n	80053d6 <TIM_OC5_SetConfig+0x7a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a15      	ldr	r2, [pc, #84]	; (8005418 <TIM_OC5_SetConfig+0xbc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d007      	beq.n	80053d6 <TIM_OC5_SetConfig+0x7a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a14      	ldr	r2, [pc, #80]	; (800541c <TIM_OC5_SetConfig+0xc0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d003      	beq.n	80053d6 <TIM_OC5_SetConfig+0x7a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a13      	ldr	r2, [pc, #76]	; (8005420 <TIM_OC5_SetConfig+0xc4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d109      	bne.n	80053ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	621a      	str	r2, [r3, #32]
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40013400 	.word	0x40013400
 8005418:	40014000 	.word	0x40014000
 800541c:	40014400 	.word	0x40014400
 8005420:	40014800 	.word	0x40014800

08005424 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800546a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	051b      	lsls	r3, r3, #20
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a18      	ldr	r2, [pc, #96]	; (80054dc <TIM_OC6_SetConfig+0xb8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00f      	beq.n	80054a0 <TIM_OC6_SetConfig+0x7c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <TIM_OC6_SetConfig+0xbc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00b      	beq.n	80054a0 <TIM_OC6_SetConfig+0x7c>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <TIM_OC6_SetConfig+0xc0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d007      	beq.n	80054a0 <TIM_OC6_SetConfig+0x7c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <TIM_OC6_SetConfig+0xc4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d003      	beq.n	80054a0 <TIM_OC6_SetConfig+0x7c>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a14      	ldr	r2, [pc, #80]	; (80054ec <TIM_OC6_SetConfig+0xc8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d109      	bne.n	80054b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	029b      	lsls	r3, r3, #10
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40013400 	.word	0x40013400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400
 80054ec:	40014800 	.word	0x40014800

080054f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0201 	bic.w	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800551a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f023 030a 	bic.w	r3, r3, #10
 800552c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554e:	b480      	push	{r7}
 8005550:	b087      	sub	sp, #28
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0210 	bic.w	r2, r3, #16
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	031b      	lsls	r3, r3, #12
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800558a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f043 0307 	orr.w	r3, r3, #7
 80055d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	609a      	str	r2, [r3, #8]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	021a      	lsls	r2, r3, #8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	431a      	orrs	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4313      	orrs	r3, r2
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	609a      	str	r2, [r3, #8]
}
 8005618:	bf00      	nop
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	2201      	movs	r2, #1
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1a      	ldr	r2, [r3, #32]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	43db      	mvns	r3, r3
 8005646:	401a      	ands	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1a      	ldr	r2, [r3, #32]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	fa01 f303 	lsl.w	r3, r1, r3
 800565c:	431a      	orrs	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005684:	2302      	movs	r3, #2
 8005686:	e068      	b.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a2e      	ldr	r2, [pc, #184]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d004      	beq.n	80056bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a2d      	ldr	r2, [pc, #180]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d108      	bne.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1e      	ldr	r2, [pc, #120]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d01d      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fa:	d018      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1b      	ldr	r2, [pc, #108]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1a      	ldr	r2, [pc, #104]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00e      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a18      	ldr	r2, [pc, #96]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d009      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a13      	ldr	r2, [pc, #76]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d004      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a14      	ldr	r2, [pc, #80]	; (800577c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d10c      	bne.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4313      	orrs	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40012c00 	.word	0x40012c00
 800576c:	40013400 	.word	0x40013400
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800
 8005778:	40000c00 	.word	0x40000c00
 800577c:	40014000 	.word	0x40014000

08005780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e040      	b.n	8005814 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fc f9ac 	bl	8001b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2224      	movs	r2, #36	; 0x24
 80057ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f8c0 	bl	8005944 <UART_SetConfig>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e022      	b.n	8005814 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fb6c 	bl	8005eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fbf3 	bl	8005ff8 <UART_CheckIdleState>
 8005812:	4603      	mov	r3, r0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	; 0x28
 8005820:	af02      	add	r7, sp, #8
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005830:	2b20      	cmp	r3, #32
 8005832:	f040 8082 	bne.w	800593a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <HAL_UART_Transmit+0x26>
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e07a      	b.n	800593c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_UART_Transmit+0x38>
 8005850:	2302      	movs	r3, #2
 8005852:	e073      	b.n	800593c <HAL_UART_Transmit+0x120>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2221      	movs	r2, #33	; 0x21
 8005868:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800586a:	f7fc fb41 	bl	8001ef0 <HAL_GetTick>
 800586e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005888:	d108      	bne.n	800589c <HAL_UART_Transmit+0x80>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d104      	bne.n	800589c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	e003      	b.n	80058a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80058ac:	e02d      	b.n	800590a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2200      	movs	r2, #0
 80058b6:	2180      	movs	r1, #128	; 0x80
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fbe6 	bl	800608a <UART_WaitOnFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e039      	b.n	800593c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	881a      	ldrh	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058da:	b292      	uxth	r2, r2
 80058dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	3302      	adds	r3, #2
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e008      	b.n	80058f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	781a      	ldrb	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	b292      	uxth	r2, r2
 80058f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3301      	adds	r3, #1
 80058f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1cb      	bne.n	80058ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2200      	movs	r2, #0
 800591e:	2140      	movs	r1, #64	; 0x40
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fbb2 	bl	800608a <UART_WaitOnFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e005      	b.n	800593c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	e000      	b.n	800593c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800593a:	2302      	movs	r3, #2
  }
}
 800593c:	4618      	mov	r0, r3
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005948:	b08a      	sub	sp, #40	; 0x28
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	431a      	orrs	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	431a      	orrs	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	4313      	orrs	r3, r2
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	4ba4      	ldr	r3, [pc, #656]	; (8005c04 <UART_SetConfig+0x2c0>)
 8005974:	4013      	ands	r3, r2
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800597c:	430b      	orrs	r3, r1
 800597e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a99      	ldr	r2, [pc, #612]	; (8005c08 <UART_SetConfig+0x2c4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ac:	4313      	orrs	r3, r2
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c0:	430a      	orrs	r2, r1
 80059c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a90      	ldr	r2, [pc, #576]	; (8005c0c <UART_SetConfig+0x2c8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d126      	bne.n	8005a1c <UART_SetConfig+0xd8>
 80059ce:	4b90      	ldr	r3, [pc, #576]	; (8005c10 <UART_SetConfig+0x2cc>)
 80059d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d4:	f003 0303 	and.w	r3, r3, #3
 80059d8:	2b03      	cmp	r3, #3
 80059da:	d81b      	bhi.n	8005a14 <UART_SetConfig+0xd0>
 80059dc:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <UART_SetConfig+0xa0>)
 80059de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e2:	bf00      	nop
 80059e4:	080059f5 	.word	0x080059f5
 80059e8:	08005a05 	.word	0x08005a05
 80059ec:	080059fd 	.word	0x080059fd
 80059f0:	08005a0d 	.word	0x08005a0d
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059fa:	e116      	b.n	8005c2a <UART_SetConfig+0x2e6>
 80059fc:	2302      	movs	r3, #2
 80059fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a02:	e112      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005a04:	2304      	movs	r3, #4
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0a:	e10e      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a12:	e10a      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005a14:	2310      	movs	r3, #16
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1a:	e106      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a7c      	ldr	r2, [pc, #496]	; (8005c14 <UART_SetConfig+0x2d0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d138      	bne.n	8005a98 <UART_SetConfig+0x154>
 8005a26:	4b7a      	ldr	r3, [pc, #488]	; (8005c10 <UART_SetConfig+0x2cc>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	f003 030c 	and.w	r3, r3, #12
 8005a30:	2b0c      	cmp	r3, #12
 8005a32:	d82d      	bhi.n	8005a90 <UART_SetConfig+0x14c>
 8005a34:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <UART_SetConfig+0xf8>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a71 	.word	0x08005a71
 8005a40:	08005a91 	.word	0x08005a91
 8005a44:	08005a91 	.word	0x08005a91
 8005a48:	08005a91 	.word	0x08005a91
 8005a4c:	08005a81 	.word	0x08005a81
 8005a50:	08005a91 	.word	0x08005a91
 8005a54:	08005a91 	.word	0x08005a91
 8005a58:	08005a91 	.word	0x08005a91
 8005a5c:	08005a79 	.word	0x08005a79
 8005a60:	08005a91 	.word	0x08005a91
 8005a64:	08005a91 	.word	0x08005a91
 8005a68:	08005a91 	.word	0x08005a91
 8005a6c:	08005a89 	.word	0x08005a89
 8005a70:	2300      	movs	r3, #0
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a76:	e0d8      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7e:	e0d4      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005a80:	2304      	movs	r3, #4
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a86:	e0d0      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005a88:	2308      	movs	r3, #8
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8e:	e0cc      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005a90:	2310      	movs	r3, #16
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a96:	e0c8      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a5e      	ldr	r2, [pc, #376]	; (8005c18 <UART_SetConfig+0x2d4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d125      	bne.n	8005aee <UART_SetConfig+0x1aa>
 8005aa2:	4b5b      	ldr	r3, [pc, #364]	; (8005c10 <UART_SetConfig+0x2cc>)
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aac:	2b30      	cmp	r3, #48	; 0x30
 8005aae:	d016      	beq.n	8005ade <UART_SetConfig+0x19a>
 8005ab0:	2b30      	cmp	r3, #48	; 0x30
 8005ab2:	d818      	bhi.n	8005ae6 <UART_SetConfig+0x1a2>
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d00a      	beq.n	8005ace <UART_SetConfig+0x18a>
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d814      	bhi.n	8005ae6 <UART_SetConfig+0x1a2>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <UART_SetConfig+0x182>
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	d008      	beq.n	8005ad6 <UART_SetConfig+0x192>
 8005ac4:	e00f      	b.n	8005ae6 <UART_SetConfig+0x1a2>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005acc:	e0ad      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad4:	e0a9      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005ad6:	2304      	movs	r3, #4
 8005ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005adc:	e0a5      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005ade:	2308      	movs	r3, #8
 8005ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae4:	e0a1      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005ae6:	2310      	movs	r3, #16
 8005ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aec:	e09d      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a4a      	ldr	r2, [pc, #296]	; (8005c1c <UART_SetConfig+0x2d8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d125      	bne.n	8005b44 <UART_SetConfig+0x200>
 8005af8:	4b45      	ldr	r3, [pc, #276]	; (8005c10 <UART_SetConfig+0x2cc>)
 8005afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b02:	2bc0      	cmp	r3, #192	; 0xc0
 8005b04:	d016      	beq.n	8005b34 <UART_SetConfig+0x1f0>
 8005b06:	2bc0      	cmp	r3, #192	; 0xc0
 8005b08:	d818      	bhi.n	8005b3c <UART_SetConfig+0x1f8>
 8005b0a:	2b80      	cmp	r3, #128	; 0x80
 8005b0c:	d00a      	beq.n	8005b24 <UART_SetConfig+0x1e0>
 8005b0e:	2b80      	cmp	r3, #128	; 0x80
 8005b10:	d814      	bhi.n	8005b3c <UART_SetConfig+0x1f8>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <UART_SetConfig+0x1d8>
 8005b16:	2b40      	cmp	r3, #64	; 0x40
 8005b18:	d008      	beq.n	8005b2c <UART_SetConfig+0x1e8>
 8005b1a:	e00f      	b.n	8005b3c <UART_SetConfig+0x1f8>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b22:	e082      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005b24:	2302      	movs	r3, #2
 8005b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b2a:	e07e      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b32:	e07a      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005b34:	2308      	movs	r3, #8
 8005b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3a:	e076      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b42:	e072      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a35      	ldr	r2, [pc, #212]	; (8005c20 <UART_SetConfig+0x2dc>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d12a      	bne.n	8005ba4 <UART_SetConfig+0x260>
 8005b4e:	4b30      	ldr	r3, [pc, #192]	; (8005c10 <UART_SetConfig+0x2cc>)
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b5c:	d01a      	beq.n	8005b94 <UART_SetConfig+0x250>
 8005b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b62:	d81b      	bhi.n	8005b9c <UART_SetConfig+0x258>
 8005b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b68:	d00c      	beq.n	8005b84 <UART_SetConfig+0x240>
 8005b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b6e:	d815      	bhi.n	8005b9c <UART_SetConfig+0x258>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <UART_SetConfig+0x238>
 8005b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b78:	d008      	beq.n	8005b8c <UART_SetConfig+0x248>
 8005b7a:	e00f      	b.n	8005b9c <UART_SetConfig+0x258>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b82:	e052      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005b84:	2302      	movs	r3, #2
 8005b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b8a:	e04e      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b92:	e04a      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005b94:	2308      	movs	r3, #8
 8005b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b9a:	e046      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005b9c:	2310      	movs	r3, #16
 8005b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba2:	e042      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <UART_SetConfig+0x2c4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d13a      	bne.n	8005c24 <UART_SetConfig+0x2e0>
 8005bae:	4b18      	ldr	r3, [pc, #96]	; (8005c10 <UART_SetConfig+0x2cc>)
 8005bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bbc:	d01a      	beq.n	8005bf4 <UART_SetConfig+0x2b0>
 8005bbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bc2:	d81b      	bhi.n	8005bfc <UART_SetConfig+0x2b8>
 8005bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc8:	d00c      	beq.n	8005be4 <UART_SetConfig+0x2a0>
 8005bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bce:	d815      	bhi.n	8005bfc <UART_SetConfig+0x2b8>
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <UART_SetConfig+0x298>
 8005bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd8:	d008      	beq.n	8005bec <UART_SetConfig+0x2a8>
 8005bda:	e00f      	b.n	8005bfc <UART_SetConfig+0x2b8>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be2:	e022      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005be4:	2302      	movs	r3, #2
 8005be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bea:	e01e      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005bec:	2304      	movs	r3, #4
 8005bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bf2:	e01a      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bfa:	e016      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c02:	e012      	b.n	8005c2a <UART_SetConfig+0x2e6>
 8005c04:	efff69f3 	.word	0xefff69f3
 8005c08:	40008000 	.word	0x40008000
 8005c0c:	40013800 	.word	0x40013800
 8005c10:	40021000 	.word	0x40021000
 8005c14:	40004400 	.word	0x40004400
 8005c18:	40004800 	.word	0x40004800
 8005c1c:	40004c00 	.word	0x40004c00
 8005c20:	40005000 	.word	0x40005000
 8005c24:	2310      	movs	r3, #16
 8005c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a9f      	ldr	r2, [pc, #636]	; (8005eac <UART_SetConfig+0x568>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d17a      	bne.n	8005d2a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d824      	bhi.n	8005c86 <UART_SetConfig+0x342>
 8005c3c:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <UART_SetConfig+0x300>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c87 	.word	0x08005c87
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c87 	.word	0x08005c87
 8005c54:	08005c77 	.word	0x08005c77
 8005c58:	08005c87 	.word	0x08005c87
 8005c5c:	08005c87 	.word	0x08005c87
 8005c60:	08005c87 	.word	0x08005c87
 8005c64:	08005c7f 	.word	0x08005c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c68:	f7fd ffee 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 8005c6c:	61f8      	str	r0, [r7, #28]
        break;
 8005c6e:	e010      	b.n	8005c92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c70:	4b8f      	ldr	r3, [pc, #572]	; (8005eb0 <UART_SetConfig+0x56c>)
 8005c72:	61fb      	str	r3, [r7, #28]
        break;
 8005c74:	e00d      	b.n	8005c92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c76:	f7fd ff4f 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8005c7a:	61f8      	str	r0, [r7, #28]
        break;
 8005c7c:	e009      	b.n	8005c92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c82:	61fb      	str	r3, [r7, #28]
        break;
 8005c84:	e005      	b.n	8005c92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80fb 	beq.w	8005e90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	4413      	add	r3, r2
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d305      	bcc.n	8005cb6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d903      	bls.n	8005cbe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005cbc:	e0e8      	b.n	8005e90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	461c      	mov	r4, r3
 8005cc4:	4615      	mov	r5, r2
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	022b      	lsls	r3, r5, #8
 8005cd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005cd4:	0222      	lsls	r2, r4, #8
 8005cd6:	68f9      	ldr	r1, [r7, #12]
 8005cd8:	6849      	ldr	r1, [r1, #4]
 8005cda:	0849      	lsrs	r1, r1, #1
 8005cdc:	2000      	movs	r0, #0
 8005cde:	4688      	mov	r8, r1
 8005ce0:	4681      	mov	r9, r0
 8005ce2:	eb12 0a08 	adds.w	sl, r2, r8
 8005ce6:	eb43 0b09 	adc.w	fp, r3, r9
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	603b      	str	r3, [r7, #0]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cf8:	4650      	mov	r0, sl
 8005cfa:	4659      	mov	r1, fp
 8005cfc:	f7fa ffa4 	bl	8000c48 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4613      	mov	r3, r2
 8005d06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d0e:	d308      	bcc.n	8005d22 <UART_SetConfig+0x3de>
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d16:	d204      	bcs.n	8005d22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	60da      	str	r2, [r3, #12]
 8005d20:	e0b6      	b.n	8005e90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d28:	e0b2      	b.n	8005e90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d32:	d15e      	bne.n	8005df2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d828      	bhi.n	8005d8e <UART_SetConfig+0x44a>
 8005d3c:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <UART_SetConfig+0x400>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d69 	.word	0x08005d69
 8005d48:	08005d71 	.word	0x08005d71
 8005d4c:	08005d79 	.word	0x08005d79
 8005d50:	08005d8f 	.word	0x08005d8f
 8005d54:	08005d7f 	.word	0x08005d7f
 8005d58:	08005d8f 	.word	0x08005d8f
 8005d5c:	08005d8f 	.word	0x08005d8f
 8005d60:	08005d8f 	.word	0x08005d8f
 8005d64:	08005d87 	.word	0x08005d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d68:	f7fd ff6e 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 8005d6c:	61f8      	str	r0, [r7, #28]
        break;
 8005d6e:	e014      	b.n	8005d9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d70:	f7fd ff80 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 8005d74:	61f8      	str	r0, [r7, #28]
        break;
 8005d76:	e010      	b.n	8005d9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d78:	4b4d      	ldr	r3, [pc, #308]	; (8005eb0 <UART_SetConfig+0x56c>)
 8005d7a:	61fb      	str	r3, [r7, #28]
        break;
 8005d7c:	e00d      	b.n	8005d9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d7e:	f7fd fecb 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8005d82:	61f8      	str	r0, [r7, #28]
        break;
 8005d84:	e009      	b.n	8005d9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8a:	61fb      	str	r3, [r7, #28]
        break;
 8005d8c:	e005      	b.n	8005d9a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d077      	beq.n	8005e90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	005a      	lsls	r2, r3, #1
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	441a      	add	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	2b0f      	cmp	r3, #15
 8005dba:	d916      	bls.n	8005dea <UART_SetConfig+0x4a6>
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc2:	d212      	bcs.n	8005dea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	f023 030f 	bic.w	r3, r3, #15
 8005dcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	085b      	lsrs	r3, r3, #1
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	8afb      	ldrh	r3, [r7, #22]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	8afa      	ldrh	r2, [r7, #22]
 8005de6:	60da      	str	r2, [r3, #12]
 8005de8:	e052      	b.n	8005e90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005df0:	e04e      	b.n	8005e90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d827      	bhi.n	8005e4a <UART_SetConfig+0x506>
 8005dfa:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <UART_SetConfig+0x4bc>)
 8005dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e00:	08005e25 	.word	0x08005e25
 8005e04:	08005e2d 	.word	0x08005e2d
 8005e08:	08005e35 	.word	0x08005e35
 8005e0c:	08005e4b 	.word	0x08005e4b
 8005e10:	08005e3b 	.word	0x08005e3b
 8005e14:	08005e4b 	.word	0x08005e4b
 8005e18:	08005e4b 	.word	0x08005e4b
 8005e1c:	08005e4b 	.word	0x08005e4b
 8005e20:	08005e43 	.word	0x08005e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e24:	f7fd ff10 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 8005e28:	61f8      	str	r0, [r7, #28]
        break;
 8005e2a:	e014      	b.n	8005e56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e2c:	f7fd ff22 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 8005e30:	61f8      	str	r0, [r7, #28]
        break;
 8005e32:	e010      	b.n	8005e56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e34:	4b1e      	ldr	r3, [pc, #120]	; (8005eb0 <UART_SetConfig+0x56c>)
 8005e36:	61fb      	str	r3, [r7, #28]
        break;
 8005e38:	e00d      	b.n	8005e56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3a:	f7fd fe6d 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8005e3e:	61f8      	str	r0, [r7, #28]
        break;
 8005e40:	e009      	b.n	8005e56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e46:	61fb      	str	r3, [r7, #28]
        break;
 8005e48:	e005      	b.n	8005e56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e54:	bf00      	nop
    }

    if (pclk != 0U)
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d019      	beq.n	8005e90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	085a      	lsrs	r2, r3, #1
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	441a      	add	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	2b0f      	cmp	r3, #15
 8005e74:	d909      	bls.n	8005e8a <UART_SetConfig+0x546>
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7c:	d205      	bcs.n	8005e8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60da      	str	r2, [r3, #12]
 8005e88:	e002      	b.n	8005e90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3728      	adds	r7, #40	; 0x28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eaa:	bf00      	nop
 8005eac:	40008000 	.word	0x40008000
 8005eb0:	00f42400 	.word	0x00f42400

08005eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01a      	beq.n	8005fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fb2:	d10a      	bne.n	8005fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	605a      	str	r2, [r3, #4]
  }
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006008:	f7fb ff72 	bl	8001ef0 <HAL_GetTick>
 800600c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0308 	and.w	r3, r3, #8
 8006018:	2b08      	cmp	r3, #8
 800601a:	d10e      	bne.n	800603a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800601c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f82d 	bl	800608a <UART_WaitOnFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e023      	b.n	8006082 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b04      	cmp	r3, #4
 8006046:	d10e      	bne.n	8006066 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f817 	bl	800608a <UART_WaitOnFlagUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e00d      	b.n	8006082 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b09c      	sub	sp, #112	; 0x70
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	603b      	str	r3, [r7, #0]
 8006096:	4613      	mov	r3, r2
 8006098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800609a:	e0a5      	b.n	80061e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	f000 80a1 	beq.w	80061e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a6:	f7fb ff23 	bl	8001ef0 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <UART_WaitOnFlagUntilTimeout+0x32>
 80060b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d13e      	bne.n	800613a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060d0:	667b      	str	r3, [r7, #100]	; 0x64
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e6      	bne.n	80060bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3308      	adds	r3, #8
 80060f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	663b      	str	r3, [r7, #96]	; 0x60
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3308      	adds	r3, #8
 800610c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800610e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006110:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800611c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e5      	bne.n	80060ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2220      	movs	r2, #32
 8006126:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e067      	b.n	800620a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d04f      	beq.n	80061e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006156:	d147      	bne.n	80061e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006160:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006176:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
 8006182:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e6      	bne.n	8006162 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3308      	adds	r3, #8
 800619a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	613b      	str	r3, [r7, #16]
   return(result);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3308      	adds	r3, #8
 80061b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061b4:	623a      	str	r2, [r7, #32]
 80061b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	69f9      	ldr	r1, [r7, #28]
 80061ba:	6a3a      	ldr	r2, [r7, #32]
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e5      	bne.n	8006194 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e010      	b.n	800620a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69da      	ldr	r2, [r3, #28]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4013      	ands	r3, r2
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	bf0c      	ite	eq
 80061f8:	2301      	moveq	r3, #1
 80061fa:	2300      	movne	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	429a      	cmp	r2, r3
 8006204:	f43f af4a 	beq.w	800609c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3770      	adds	r7, #112	; 0x70
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <__errno>:
 8006214:	4b01      	ldr	r3, [pc, #4]	; (800621c <__errno+0x8>)
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	2000000c 	.word	0x2000000c

08006220 <exit>:
 8006220:	b508      	push	{r3, lr}
 8006222:	4b07      	ldr	r3, [pc, #28]	; (8006240 <exit+0x20>)
 8006224:	4604      	mov	r4, r0
 8006226:	b113      	cbz	r3, 800622e <exit+0xe>
 8006228:	2100      	movs	r1, #0
 800622a:	f3af 8000 	nop.w
 800622e:	4b05      	ldr	r3, [pc, #20]	; (8006244 <exit+0x24>)
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006234:	b103      	cbz	r3, 8006238 <exit+0x18>
 8006236:	4798      	blx	r3
 8006238:	4620      	mov	r0, r4
 800623a:	f7fb fcff 	bl	8001c3c <_exit>
 800623e:	bf00      	nop
 8006240:	00000000 	.word	0x00000000
 8006244:	08009140 	.word	0x08009140

08006248 <__libc_init_array>:
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	4d0d      	ldr	r5, [pc, #52]	; (8006280 <__libc_init_array+0x38>)
 800624c:	4c0d      	ldr	r4, [pc, #52]	; (8006284 <__libc_init_array+0x3c>)
 800624e:	1b64      	subs	r4, r4, r5
 8006250:	10a4      	asrs	r4, r4, #2
 8006252:	2600      	movs	r6, #0
 8006254:	42a6      	cmp	r6, r4
 8006256:	d109      	bne.n	800626c <__libc_init_array+0x24>
 8006258:	4d0b      	ldr	r5, [pc, #44]	; (8006288 <__libc_init_array+0x40>)
 800625a:	4c0c      	ldr	r4, [pc, #48]	; (800628c <__libc_init_array+0x44>)
 800625c:	f002 ff04 	bl	8009068 <_init>
 8006260:	1b64      	subs	r4, r4, r5
 8006262:	10a4      	asrs	r4, r4, #2
 8006264:	2600      	movs	r6, #0
 8006266:	42a6      	cmp	r6, r4
 8006268:	d105      	bne.n	8006276 <__libc_init_array+0x2e>
 800626a:	bd70      	pop	{r4, r5, r6, pc}
 800626c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006270:	4798      	blx	r3
 8006272:	3601      	adds	r6, #1
 8006274:	e7ee      	b.n	8006254 <__libc_init_array+0xc>
 8006276:	f855 3b04 	ldr.w	r3, [r5], #4
 800627a:	4798      	blx	r3
 800627c:	3601      	adds	r6, #1
 800627e:	e7f2      	b.n	8006266 <__libc_init_array+0x1e>
 8006280:	08009524 	.word	0x08009524
 8006284:	08009524 	.word	0x08009524
 8006288:	08009524 	.word	0x08009524
 800628c:	08009528 	.word	0x08009528

08006290 <memset>:
 8006290:	4402      	add	r2, r0
 8006292:	4603      	mov	r3, r0
 8006294:	4293      	cmp	r3, r2
 8006296:	d100      	bne.n	800629a <memset+0xa>
 8006298:	4770      	bx	lr
 800629a:	f803 1b01 	strb.w	r1, [r3], #1
 800629e:	e7f9      	b.n	8006294 <memset+0x4>

080062a0 <__cvt>:
 80062a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a4:	ec55 4b10 	vmov	r4, r5, d0
 80062a8:	2d00      	cmp	r5, #0
 80062aa:	460e      	mov	r6, r1
 80062ac:	4619      	mov	r1, r3
 80062ae:	462b      	mov	r3, r5
 80062b0:	bfbb      	ittet	lt
 80062b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062b6:	461d      	movlt	r5, r3
 80062b8:	2300      	movge	r3, #0
 80062ba:	232d      	movlt	r3, #45	; 0x2d
 80062bc:	700b      	strb	r3, [r1, #0]
 80062be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062c4:	4691      	mov	r9, r2
 80062c6:	f023 0820 	bic.w	r8, r3, #32
 80062ca:	bfbc      	itt	lt
 80062cc:	4622      	movlt	r2, r4
 80062ce:	4614      	movlt	r4, r2
 80062d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062d4:	d005      	beq.n	80062e2 <__cvt+0x42>
 80062d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062da:	d100      	bne.n	80062de <__cvt+0x3e>
 80062dc:	3601      	adds	r6, #1
 80062de:	2102      	movs	r1, #2
 80062e0:	e000      	b.n	80062e4 <__cvt+0x44>
 80062e2:	2103      	movs	r1, #3
 80062e4:	ab03      	add	r3, sp, #12
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	ab02      	add	r3, sp, #8
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	ec45 4b10 	vmov	d0, r4, r5
 80062f0:	4653      	mov	r3, sl
 80062f2:	4632      	mov	r2, r6
 80062f4:	f000 fcec 	bl	8006cd0 <_dtoa_r>
 80062f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062fc:	4607      	mov	r7, r0
 80062fe:	d102      	bne.n	8006306 <__cvt+0x66>
 8006300:	f019 0f01 	tst.w	r9, #1
 8006304:	d022      	beq.n	800634c <__cvt+0xac>
 8006306:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800630a:	eb07 0906 	add.w	r9, r7, r6
 800630e:	d110      	bne.n	8006332 <__cvt+0x92>
 8006310:	783b      	ldrb	r3, [r7, #0]
 8006312:	2b30      	cmp	r3, #48	; 0x30
 8006314:	d10a      	bne.n	800632c <__cvt+0x8c>
 8006316:	2200      	movs	r2, #0
 8006318:	2300      	movs	r3, #0
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	f7fa fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006322:	b918      	cbnz	r0, 800632c <__cvt+0x8c>
 8006324:	f1c6 0601 	rsb	r6, r6, #1
 8006328:	f8ca 6000 	str.w	r6, [sl]
 800632c:	f8da 3000 	ldr.w	r3, [sl]
 8006330:	4499      	add	r9, r3
 8006332:	2200      	movs	r2, #0
 8006334:	2300      	movs	r3, #0
 8006336:	4620      	mov	r0, r4
 8006338:	4629      	mov	r1, r5
 800633a:	f7fa fbc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800633e:	b108      	cbz	r0, 8006344 <__cvt+0xa4>
 8006340:	f8cd 900c 	str.w	r9, [sp, #12]
 8006344:	2230      	movs	r2, #48	; 0x30
 8006346:	9b03      	ldr	r3, [sp, #12]
 8006348:	454b      	cmp	r3, r9
 800634a:	d307      	bcc.n	800635c <__cvt+0xbc>
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006350:	1bdb      	subs	r3, r3, r7
 8006352:	4638      	mov	r0, r7
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	b004      	add	sp, #16
 8006358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635c:	1c59      	adds	r1, r3, #1
 800635e:	9103      	str	r1, [sp, #12]
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e7f0      	b.n	8006346 <__cvt+0xa6>

08006364 <__exponent>:
 8006364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006366:	4603      	mov	r3, r0
 8006368:	2900      	cmp	r1, #0
 800636a:	bfb8      	it	lt
 800636c:	4249      	neglt	r1, r1
 800636e:	f803 2b02 	strb.w	r2, [r3], #2
 8006372:	bfb4      	ite	lt
 8006374:	222d      	movlt	r2, #45	; 0x2d
 8006376:	222b      	movge	r2, #43	; 0x2b
 8006378:	2909      	cmp	r1, #9
 800637a:	7042      	strb	r2, [r0, #1]
 800637c:	dd2a      	ble.n	80063d4 <__exponent+0x70>
 800637e:	f10d 0407 	add.w	r4, sp, #7
 8006382:	46a4      	mov	ip, r4
 8006384:	270a      	movs	r7, #10
 8006386:	46a6      	mov	lr, r4
 8006388:	460a      	mov	r2, r1
 800638a:	fb91 f6f7 	sdiv	r6, r1, r7
 800638e:	fb07 1516 	mls	r5, r7, r6, r1
 8006392:	3530      	adds	r5, #48	; 0x30
 8006394:	2a63      	cmp	r2, #99	; 0x63
 8006396:	f104 34ff 	add.w	r4, r4, #4294967295
 800639a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800639e:	4631      	mov	r1, r6
 80063a0:	dcf1      	bgt.n	8006386 <__exponent+0x22>
 80063a2:	3130      	adds	r1, #48	; 0x30
 80063a4:	f1ae 0502 	sub.w	r5, lr, #2
 80063a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063ac:	1c44      	adds	r4, r0, #1
 80063ae:	4629      	mov	r1, r5
 80063b0:	4561      	cmp	r1, ip
 80063b2:	d30a      	bcc.n	80063ca <__exponent+0x66>
 80063b4:	f10d 0209 	add.w	r2, sp, #9
 80063b8:	eba2 020e 	sub.w	r2, r2, lr
 80063bc:	4565      	cmp	r5, ip
 80063be:	bf88      	it	hi
 80063c0:	2200      	movhi	r2, #0
 80063c2:	4413      	add	r3, r2
 80063c4:	1a18      	subs	r0, r3, r0
 80063c6:	b003      	add	sp, #12
 80063c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063d2:	e7ed      	b.n	80063b0 <__exponent+0x4c>
 80063d4:	2330      	movs	r3, #48	; 0x30
 80063d6:	3130      	adds	r1, #48	; 0x30
 80063d8:	7083      	strb	r3, [r0, #2]
 80063da:	70c1      	strb	r1, [r0, #3]
 80063dc:	1d03      	adds	r3, r0, #4
 80063de:	e7f1      	b.n	80063c4 <__exponent+0x60>

080063e0 <_printf_float>:
 80063e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e4:	ed2d 8b02 	vpush	{d8}
 80063e8:	b08d      	sub	sp, #52	; 0x34
 80063ea:	460c      	mov	r4, r1
 80063ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063f0:	4616      	mov	r6, r2
 80063f2:	461f      	mov	r7, r3
 80063f4:	4605      	mov	r5, r0
 80063f6:	f001 fa59 	bl	80078ac <_localeconv_r>
 80063fa:	f8d0 a000 	ldr.w	sl, [r0]
 80063fe:	4650      	mov	r0, sl
 8006400:	f7f9 fee6 	bl	80001d0 <strlen>
 8006404:	2300      	movs	r3, #0
 8006406:	930a      	str	r3, [sp, #40]	; 0x28
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	9305      	str	r3, [sp, #20]
 800640c:	f8d8 3000 	ldr.w	r3, [r8]
 8006410:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006414:	3307      	adds	r3, #7
 8006416:	f023 0307 	bic.w	r3, r3, #7
 800641a:	f103 0208 	add.w	r2, r3, #8
 800641e:	f8c8 2000 	str.w	r2, [r8]
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800642a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800642e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006432:	9307      	str	r3, [sp, #28]
 8006434:	f8cd 8018 	str.w	r8, [sp, #24]
 8006438:	ee08 0a10 	vmov	s16, r0
 800643c:	4b9f      	ldr	r3, [pc, #636]	; (80066bc <_printf_float+0x2dc>)
 800643e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006442:	f04f 32ff 	mov.w	r2, #4294967295
 8006446:	f7fa fb71 	bl	8000b2c <__aeabi_dcmpun>
 800644a:	bb88      	cbnz	r0, 80064b0 <_printf_float+0xd0>
 800644c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006450:	4b9a      	ldr	r3, [pc, #616]	; (80066bc <_printf_float+0x2dc>)
 8006452:	f04f 32ff 	mov.w	r2, #4294967295
 8006456:	f7fa fb4b 	bl	8000af0 <__aeabi_dcmple>
 800645a:	bb48      	cbnz	r0, 80064b0 <_printf_float+0xd0>
 800645c:	2200      	movs	r2, #0
 800645e:	2300      	movs	r3, #0
 8006460:	4640      	mov	r0, r8
 8006462:	4649      	mov	r1, r9
 8006464:	f7fa fb3a 	bl	8000adc <__aeabi_dcmplt>
 8006468:	b110      	cbz	r0, 8006470 <_printf_float+0x90>
 800646a:	232d      	movs	r3, #45	; 0x2d
 800646c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006470:	4b93      	ldr	r3, [pc, #588]	; (80066c0 <_printf_float+0x2e0>)
 8006472:	4894      	ldr	r0, [pc, #592]	; (80066c4 <_printf_float+0x2e4>)
 8006474:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006478:	bf94      	ite	ls
 800647a:	4698      	movls	r8, r3
 800647c:	4680      	movhi	r8, r0
 800647e:	2303      	movs	r3, #3
 8006480:	6123      	str	r3, [r4, #16]
 8006482:	9b05      	ldr	r3, [sp, #20]
 8006484:	f023 0204 	bic.w	r2, r3, #4
 8006488:	6022      	str	r2, [r4, #0]
 800648a:	f04f 0900 	mov.w	r9, #0
 800648e:	9700      	str	r7, [sp, #0]
 8006490:	4633      	mov	r3, r6
 8006492:	aa0b      	add	r2, sp, #44	; 0x2c
 8006494:	4621      	mov	r1, r4
 8006496:	4628      	mov	r0, r5
 8006498:	f000 f9d8 	bl	800684c <_printf_common>
 800649c:	3001      	adds	r0, #1
 800649e:	f040 8090 	bne.w	80065c2 <_printf_float+0x1e2>
 80064a2:	f04f 30ff 	mov.w	r0, #4294967295
 80064a6:	b00d      	add	sp, #52	; 0x34
 80064a8:	ecbd 8b02 	vpop	{d8}
 80064ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b0:	4642      	mov	r2, r8
 80064b2:	464b      	mov	r3, r9
 80064b4:	4640      	mov	r0, r8
 80064b6:	4649      	mov	r1, r9
 80064b8:	f7fa fb38 	bl	8000b2c <__aeabi_dcmpun>
 80064bc:	b140      	cbz	r0, 80064d0 <_printf_float+0xf0>
 80064be:	464b      	mov	r3, r9
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	bfbc      	itt	lt
 80064c4:	232d      	movlt	r3, #45	; 0x2d
 80064c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064ca:	487f      	ldr	r0, [pc, #508]	; (80066c8 <_printf_float+0x2e8>)
 80064cc:	4b7f      	ldr	r3, [pc, #508]	; (80066cc <_printf_float+0x2ec>)
 80064ce:	e7d1      	b.n	8006474 <_printf_float+0x94>
 80064d0:	6863      	ldr	r3, [r4, #4]
 80064d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064d6:	9206      	str	r2, [sp, #24]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	d13f      	bne.n	800655c <_printf_float+0x17c>
 80064dc:	2306      	movs	r3, #6
 80064de:	6063      	str	r3, [r4, #4]
 80064e0:	9b05      	ldr	r3, [sp, #20]
 80064e2:	6861      	ldr	r1, [r4, #4]
 80064e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064e8:	2300      	movs	r3, #0
 80064ea:	9303      	str	r3, [sp, #12]
 80064ec:	ab0a      	add	r3, sp, #40	; 0x28
 80064ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80064f2:	ab09      	add	r3, sp, #36	; 0x24
 80064f4:	ec49 8b10 	vmov	d0, r8, r9
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	6022      	str	r2, [r4, #0]
 80064fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006500:	4628      	mov	r0, r5
 8006502:	f7ff fecd 	bl	80062a0 <__cvt>
 8006506:	9b06      	ldr	r3, [sp, #24]
 8006508:	9909      	ldr	r1, [sp, #36]	; 0x24
 800650a:	2b47      	cmp	r3, #71	; 0x47
 800650c:	4680      	mov	r8, r0
 800650e:	d108      	bne.n	8006522 <_printf_float+0x142>
 8006510:	1cc8      	adds	r0, r1, #3
 8006512:	db02      	blt.n	800651a <_printf_float+0x13a>
 8006514:	6863      	ldr	r3, [r4, #4]
 8006516:	4299      	cmp	r1, r3
 8006518:	dd41      	ble.n	800659e <_printf_float+0x1be>
 800651a:	f1ab 0b02 	sub.w	fp, fp, #2
 800651e:	fa5f fb8b 	uxtb.w	fp, fp
 8006522:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006526:	d820      	bhi.n	800656a <_printf_float+0x18a>
 8006528:	3901      	subs	r1, #1
 800652a:	465a      	mov	r2, fp
 800652c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006530:	9109      	str	r1, [sp, #36]	; 0x24
 8006532:	f7ff ff17 	bl	8006364 <__exponent>
 8006536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006538:	1813      	adds	r3, r2, r0
 800653a:	2a01      	cmp	r2, #1
 800653c:	4681      	mov	r9, r0
 800653e:	6123      	str	r3, [r4, #16]
 8006540:	dc02      	bgt.n	8006548 <_printf_float+0x168>
 8006542:	6822      	ldr	r2, [r4, #0]
 8006544:	07d2      	lsls	r2, r2, #31
 8006546:	d501      	bpl.n	800654c <_printf_float+0x16c>
 8006548:	3301      	adds	r3, #1
 800654a:	6123      	str	r3, [r4, #16]
 800654c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006550:	2b00      	cmp	r3, #0
 8006552:	d09c      	beq.n	800648e <_printf_float+0xae>
 8006554:	232d      	movs	r3, #45	; 0x2d
 8006556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800655a:	e798      	b.n	800648e <_printf_float+0xae>
 800655c:	9a06      	ldr	r2, [sp, #24]
 800655e:	2a47      	cmp	r2, #71	; 0x47
 8006560:	d1be      	bne.n	80064e0 <_printf_float+0x100>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1bc      	bne.n	80064e0 <_printf_float+0x100>
 8006566:	2301      	movs	r3, #1
 8006568:	e7b9      	b.n	80064de <_printf_float+0xfe>
 800656a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800656e:	d118      	bne.n	80065a2 <_printf_float+0x1c2>
 8006570:	2900      	cmp	r1, #0
 8006572:	6863      	ldr	r3, [r4, #4]
 8006574:	dd0b      	ble.n	800658e <_printf_float+0x1ae>
 8006576:	6121      	str	r1, [r4, #16]
 8006578:	b913      	cbnz	r3, 8006580 <_printf_float+0x1a0>
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	07d0      	lsls	r0, r2, #31
 800657e:	d502      	bpl.n	8006586 <_printf_float+0x1a6>
 8006580:	3301      	adds	r3, #1
 8006582:	440b      	add	r3, r1
 8006584:	6123      	str	r3, [r4, #16]
 8006586:	65a1      	str	r1, [r4, #88]	; 0x58
 8006588:	f04f 0900 	mov.w	r9, #0
 800658c:	e7de      	b.n	800654c <_printf_float+0x16c>
 800658e:	b913      	cbnz	r3, 8006596 <_printf_float+0x1b6>
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	07d2      	lsls	r2, r2, #31
 8006594:	d501      	bpl.n	800659a <_printf_float+0x1ba>
 8006596:	3302      	adds	r3, #2
 8006598:	e7f4      	b.n	8006584 <_printf_float+0x1a4>
 800659a:	2301      	movs	r3, #1
 800659c:	e7f2      	b.n	8006584 <_printf_float+0x1a4>
 800659e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a4:	4299      	cmp	r1, r3
 80065a6:	db05      	blt.n	80065b4 <_printf_float+0x1d4>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	6121      	str	r1, [r4, #16]
 80065ac:	07d8      	lsls	r0, r3, #31
 80065ae:	d5ea      	bpl.n	8006586 <_printf_float+0x1a6>
 80065b0:	1c4b      	adds	r3, r1, #1
 80065b2:	e7e7      	b.n	8006584 <_printf_float+0x1a4>
 80065b4:	2900      	cmp	r1, #0
 80065b6:	bfd4      	ite	le
 80065b8:	f1c1 0202 	rsble	r2, r1, #2
 80065bc:	2201      	movgt	r2, #1
 80065be:	4413      	add	r3, r2
 80065c0:	e7e0      	b.n	8006584 <_printf_float+0x1a4>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	055a      	lsls	r2, r3, #21
 80065c6:	d407      	bmi.n	80065d8 <_printf_float+0x1f8>
 80065c8:	6923      	ldr	r3, [r4, #16]
 80065ca:	4642      	mov	r2, r8
 80065cc:	4631      	mov	r1, r6
 80065ce:	4628      	mov	r0, r5
 80065d0:	47b8      	blx	r7
 80065d2:	3001      	adds	r0, #1
 80065d4:	d12c      	bne.n	8006630 <_printf_float+0x250>
 80065d6:	e764      	b.n	80064a2 <_printf_float+0xc2>
 80065d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065dc:	f240 80e0 	bls.w	80067a0 <_printf_float+0x3c0>
 80065e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065e4:	2200      	movs	r2, #0
 80065e6:	2300      	movs	r3, #0
 80065e8:	f7fa fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d034      	beq.n	800665a <_printf_float+0x27a>
 80065f0:	4a37      	ldr	r2, [pc, #220]	; (80066d0 <_printf_float+0x2f0>)
 80065f2:	2301      	movs	r3, #1
 80065f4:	4631      	mov	r1, r6
 80065f6:	4628      	mov	r0, r5
 80065f8:	47b8      	blx	r7
 80065fa:	3001      	adds	r0, #1
 80065fc:	f43f af51 	beq.w	80064a2 <_printf_float+0xc2>
 8006600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006604:	429a      	cmp	r2, r3
 8006606:	db02      	blt.n	800660e <_printf_float+0x22e>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	07d8      	lsls	r0, r3, #31
 800660c:	d510      	bpl.n	8006630 <_printf_float+0x250>
 800660e:	ee18 3a10 	vmov	r3, s16
 8006612:	4652      	mov	r2, sl
 8006614:	4631      	mov	r1, r6
 8006616:	4628      	mov	r0, r5
 8006618:	47b8      	blx	r7
 800661a:	3001      	adds	r0, #1
 800661c:	f43f af41 	beq.w	80064a2 <_printf_float+0xc2>
 8006620:	f04f 0800 	mov.w	r8, #0
 8006624:	f104 091a 	add.w	r9, r4, #26
 8006628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662a:	3b01      	subs	r3, #1
 800662c:	4543      	cmp	r3, r8
 800662e:	dc09      	bgt.n	8006644 <_printf_float+0x264>
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	079b      	lsls	r3, r3, #30
 8006634:	f100 8105 	bmi.w	8006842 <_printf_float+0x462>
 8006638:	68e0      	ldr	r0, [r4, #12]
 800663a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800663c:	4298      	cmp	r0, r3
 800663e:	bfb8      	it	lt
 8006640:	4618      	movlt	r0, r3
 8006642:	e730      	b.n	80064a6 <_printf_float+0xc6>
 8006644:	2301      	movs	r3, #1
 8006646:	464a      	mov	r2, r9
 8006648:	4631      	mov	r1, r6
 800664a:	4628      	mov	r0, r5
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	f43f af27 	beq.w	80064a2 <_printf_float+0xc2>
 8006654:	f108 0801 	add.w	r8, r8, #1
 8006658:	e7e6      	b.n	8006628 <_printf_float+0x248>
 800665a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	dc39      	bgt.n	80066d4 <_printf_float+0x2f4>
 8006660:	4a1b      	ldr	r2, [pc, #108]	; (80066d0 <_printf_float+0x2f0>)
 8006662:	2301      	movs	r3, #1
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	f43f af19 	beq.w	80064a2 <_printf_float+0xc2>
 8006670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006674:	4313      	orrs	r3, r2
 8006676:	d102      	bne.n	800667e <_printf_float+0x29e>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	07d9      	lsls	r1, r3, #31
 800667c:	d5d8      	bpl.n	8006630 <_printf_float+0x250>
 800667e:	ee18 3a10 	vmov	r3, s16
 8006682:	4652      	mov	r2, sl
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	f43f af09 	beq.w	80064a2 <_printf_float+0xc2>
 8006690:	f04f 0900 	mov.w	r9, #0
 8006694:	f104 0a1a 	add.w	sl, r4, #26
 8006698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800669a:	425b      	negs	r3, r3
 800669c:	454b      	cmp	r3, r9
 800669e:	dc01      	bgt.n	80066a4 <_printf_float+0x2c4>
 80066a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a2:	e792      	b.n	80065ca <_printf_float+0x1ea>
 80066a4:	2301      	movs	r3, #1
 80066a6:	4652      	mov	r2, sl
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	f43f aef7 	beq.w	80064a2 <_printf_float+0xc2>
 80066b4:	f109 0901 	add.w	r9, r9, #1
 80066b8:	e7ee      	b.n	8006698 <_printf_float+0x2b8>
 80066ba:	bf00      	nop
 80066bc:	7fefffff 	.word	0x7fefffff
 80066c0:	08009144 	.word	0x08009144
 80066c4:	08009148 	.word	0x08009148
 80066c8:	08009150 	.word	0x08009150
 80066cc:	0800914c 	.word	0x0800914c
 80066d0:	08009154 	.word	0x08009154
 80066d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066d8:	429a      	cmp	r2, r3
 80066da:	bfa8      	it	ge
 80066dc:	461a      	movge	r2, r3
 80066de:	2a00      	cmp	r2, #0
 80066e0:	4691      	mov	r9, r2
 80066e2:	dc37      	bgt.n	8006754 <_printf_float+0x374>
 80066e4:	f04f 0b00 	mov.w	fp, #0
 80066e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066ec:	f104 021a 	add.w	r2, r4, #26
 80066f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066f2:	9305      	str	r3, [sp, #20]
 80066f4:	eba3 0309 	sub.w	r3, r3, r9
 80066f8:	455b      	cmp	r3, fp
 80066fa:	dc33      	bgt.n	8006764 <_printf_float+0x384>
 80066fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006700:	429a      	cmp	r2, r3
 8006702:	db3b      	blt.n	800677c <_printf_float+0x39c>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	07da      	lsls	r2, r3, #31
 8006708:	d438      	bmi.n	800677c <_printf_float+0x39c>
 800670a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800670c:	9a05      	ldr	r2, [sp, #20]
 800670e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006710:	1a9a      	subs	r2, r3, r2
 8006712:	eba3 0901 	sub.w	r9, r3, r1
 8006716:	4591      	cmp	r9, r2
 8006718:	bfa8      	it	ge
 800671a:	4691      	movge	r9, r2
 800671c:	f1b9 0f00 	cmp.w	r9, #0
 8006720:	dc35      	bgt.n	800678e <_printf_float+0x3ae>
 8006722:	f04f 0800 	mov.w	r8, #0
 8006726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800672a:	f104 0a1a 	add.w	sl, r4, #26
 800672e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	eba3 0309 	sub.w	r3, r3, r9
 8006738:	4543      	cmp	r3, r8
 800673a:	f77f af79 	ble.w	8006630 <_printf_float+0x250>
 800673e:	2301      	movs	r3, #1
 8006740:	4652      	mov	r2, sl
 8006742:	4631      	mov	r1, r6
 8006744:	4628      	mov	r0, r5
 8006746:	47b8      	blx	r7
 8006748:	3001      	adds	r0, #1
 800674a:	f43f aeaa 	beq.w	80064a2 <_printf_float+0xc2>
 800674e:	f108 0801 	add.w	r8, r8, #1
 8006752:	e7ec      	b.n	800672e <_printf_float+0x34e>
 8006754:	4613      	mov	r3, r2
 8006756:	4631      	mov	r1, r6
 8006758:	4642      	mov	r2, r8
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	d1c0      	bne.n	80066e4 <_printf_float+0x304>
 8006762:	e69e      	b.n	80064a2 <_printf_float+0xc2>
 8006764:	2301      	movs	r3, #1
 8006766:	4631      	mov	r1, r6
 8006768:	4628      	mov	r0, r5
 800676a:	9205      	str	r2, [sp, #20]
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	f43f ae97 	beq.w	80064a2 <_printf_float+0xc2>
 8006774:	9a05      	ldr	r2, [sp, #20]
 8006776:	f10b 0b01 	add.w	fp, fp, #1
 800677a:	e7b9      	b.n	80066f0 <_printf_float+0x310>
 800677c:	ee18 3a10 	vmov	r3, s16
 8006780:	4652      	mov	r2, sl
 8006782:	4631      	mov	r1, r6
 8006784:	4628      	mov	r0, r5
 8006786:	47b8      	blx	r7
 8006788:	3001      	adds	r0, #1
 800678a:	d1be      	bne.n	800670a <_printf_float+0x32a>
 800678c:	e689      	b.n	80064a2 <_printf_float+0xc2>
 800678e:	9a05      	ldr	r2, [sp, #20]
 8006790:	464b      	mov	r3, r9
 8006792:	4442      	add	r2, r8
 8006794:	4631      	mov	r1, r6
 8006796:	4628      	mov	r0, r5
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	d1c1      	bne.n	8006722 <_printf_float+0x342>
 800679e:	e680      	b.n	80064a2 <_printf_float+0xc2>
 80067a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067a2:	2a01      	cmp	r2, #1
 80067a4:	dc01      	bgt.n	80067aa <_printf_float+0x3ca>
 80067a6:	07db      	lsls	r3, r3, #31
 80067a8:	d538      	bpl.n	800681c <_printf_float+0x43c>
 80067aa:	2301      	movs	r3, #1
 80067ac:	4642      	mov	r2, r8
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	f43f ae74 	beq.w	80064a2 <_printf_float+0xc2>
 80067ba:	ee18 3a10 	vmov	r3, s16
 80067be:	4652      	mov	r2, sl
 80067c0:	4631      	mov	r1, r6
 80067c2:	4628      	mov	r0, r5
 80067c4:	47b8      	blx	r7
 80067c6:	3001      	adds	r0, #1
 80067c8:	f43f ae6b 	beq.w	80064a2 <_printf_float+0xc2>
 80067cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067d0:	2200      	movs	r2, #0
 80067d2:	2300      	movs	r3, #0
 80067d4:	f7fa f978 	bl	8000ac8 <__aeabi_dcmpeq>
 80067d8:	b9d8      	cbnz	r0, 8006812 <_printf_float+0x432>
 80067da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067dc:	f108 0201 	add.w	r2, r8, #1
 80067e0:	3b01      	subs	r3, #1
 80067e2:	4631      	mov	r1, r6
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b8      	blx	r7
 80067e8:	3001      	adds	r0, #1
 80067ea:	d10e      	bne.n	800680a <_printf_float+0x42a>
 80067ec:	e659      	b.n	80064a2 <_printf_float+0xc2>
 80067ee:	2301      	movs	r3, #1
 80067f0:	4652      	mov	r2, sl
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	f43f ae52 	beq.w	80064a2 <_printf_float+0xc2>
 80067fe:	f108 0801 	add.w	r8, r8, #1
 8006802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006804:	3b01      	subs	r3, #1
 8006806:	4543      	cmp	r3, r8
 8006808:	dcf1      	bgt.n	80067ee <_printf_float+0x40e>
 800680a:	464b      	mov	r3, r9
 800680c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006810:	e6dc      	b.n	80065cc <_printf_float+0x1ec>
 8006812:	f04f 0800 	mov.w	r8, #0
 8006816:	f104 0a1a 	add.w	sl, r4, #26
 800681a:	e7f2      	b.n	8006802 <_printf_float+0x422>
 800681c:	2301      	movs	r3, #1
 800681e:	4642      	mov	r2, r8
 8006820:	e7df      	b.n	80067e2 <_printf_float+0x402>
 8006822:	2301      	movs	r3, #1
 8006824:	464a      	mov	r2, r9
 8006826:	4631      	mov	r1, r6
 8006828:	4628      	mov	r0, r5
 800682a:	47b8      	blx	r7
 800682c:	3001      	adds	r0, #1
 800682e:	f43f ae38 	beq.w	80064a2 <_printf_float+0xc2>
 8006832:	f108 0801 	add.w	r8, r8, #1
 8006836:	68e3      	ldr	r3, [r4, #12]
 8006838:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800683a:	1a5b      	subs	r3, r3, r1
 800683c:	4543      	cmp	r3, r8
 800683e:	dcf0      	bgt.n	8006822 <_printf_float+0x442>
 8006840:	e6fa      	b.n	8006638 <_printf_float+0x258>
 8006842:	f04f 0800 	mov.w	r8, #0
 8006846:	f104 0919 	add.w	r9, r4, #25
 800684a:	e7f4      	b.n	8006836 <_printf_float+0x456>

0800684c <_printf_common>:
 800684c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006850:	4616      	mov	r6, r2
 8006852:	4699      	mov	r9, r3
 8006854:	688a      	ldr	r2, [r1, #8]
 8006856:	690b      	ldr	r3, [r1, #16]
 8006858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800685c:	4293      	cmp	r3, r2
 800685e:	bfb8      	it	lt
 8006860:	4613      	movlt	r3, r2
 8006862:	6033      	str	r3, [r6, #0]
 8006864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006868:	4607      	mov	r7, r0
 800686a:	460c      	mov	r4, r1
 800686c:	b10a      	cbz	r2, 8006872 <_printf_common+0x26>
 800686e:	3301      	adds	r3, #1
 8006870:	6033      	str	r3, [r6, #0]
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	0699      	lsls	r1, r3, #26
 8006876:	bf42      	ittt	mi
 8006878:	6833      	ldrmi	r3, [r6, #0]
 800687a:	3302      	addmi	r3, #2
 800687c:	6033      	strmi	r3, [r6, #0]
 800687e:	6825      	ldr	r5, [r4, #0]
 8006880:	f015 0506 	ands.w	r5, r5, #6
 8006884:	d106      	bne.n	8006894 <_printf_common+0x48>
 8006886:	f104 0a19 	add.w	sl, r4, #25
 800688a:	68e3      	ldr	r3, [r4, #12]
 800688c:	6832      	ldr	r2, [r6, #0]
 800688e:	1a9b      	subs	r3, r3, r2
 8006890:	42ab      	cmp	r3, r5
 8006892:	dc26      	bgt.n	80068e2 <_printf_common+0x96>
 8006894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006898:	1e13      	subs	r3, r2, #0
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	bf18      	it	ne
 800689e:	2301      	movne	r3, #1
 80068a0:	0692      	lsls	r2, r2, #26
 80068a2:	d42b      	bmi.n	80068fc <_printf_common+0xb0>
 80068a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068a8:	4649      	mov	r1, r9
 80068aa:	4638      	mov	r0, r7
 80068ac:	47c0      	blx	r8
 80068ae:	3001      	adds	r0, #1
 80068b0:	d01e      	beq.n	80068f0 <_printf_common+0xa4>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	68e5      	ldr	r5, [r4, #12]
 80068b6:	6832      	ldr	r2, [r6, #0]
 80068b8:	f003 0306 	and.w	r3, r3, #6
 80068bc:	2b04      	cmp	r3, #4
 80068be:	bf08      	it	eq
 80068c0:	1aad      	subeq	r5, r5, r2
 80068c2:	68a3      	ldr	r3, [r4, #8]
 80068c4:	6922      	ldr	r2, [r4, #16]
 80068c6:	bf0c      	ite	eq
 80068c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068cc:	2500      	movne	r5, #0
 80068ce:	4293      	cmp	r3, r2
 80068d0:	bfc4      	itt	gt
 80068d2:	1a9b      	subgt	r3, r3, r2
 80068d4:	18ed      	addgt	r5, r5, r3
 80068d6:	2600      	movs	r6, #0
 80068d8:	341a      	adds	r4, #26
 80068da:	42b5      	cmp	r5, r6
 80068dc:	d11a      	bne.n	8006914 <_printf_common+0xc8>
 80068de:	2000      	movs	r0, #0
 80068e0:	e008      	b.n	80068f4 <_printf_common+0xa8>
 80068e2:	2301      	movs	r3, #1
 80068e4:	4652      	mov	r2, sl
 80068e6:	4649      	mov	r1, r9
 80068e8:	4638      	mov	r0, r7
 80068ea:	47c0      	blx	r8
 80068ec:	3001      	adds	r0, #1
 80068ee:	d103      	bne.n	80068f8 <_printf_common+0xac>
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f8:	3501      	adds	r5, #1
 80068fa:	e7c6      	b.n	800688a <_printf_common+0x3e>
 80068fc:	18e1      	adds	r1, r4, r3
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	2030      	movs	r0, #48	; 0x30
 8006902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006906:	4422      	add	r2, r4
 8006908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800690c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006910:	3302      	adds	r3, #2
 8006912:	e7c7      	b.n	80068a4 <_printf_common+0x58>
 8006914:	2301      	movs	r3, #1
 8006916:	4622      	mov	r2, r4
 8006918:	4649      	mov	r1, r9
 800691a:	4638      	mov	r0, r7
 800691c:	47c0      	blx	r8
 800691e:	3001      	adds	r0, #1
 8006920:	d0e6      	beq.n	80068f0 <_printf_common+0xa4>
 8006922:	3601      	adds	r6, #1
 8006924:	e7d9      	b.n	80068da <_printf_common+0x8e>
	...

08006928 <_printf_i>:
 8006928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800692c:	7e0f      	ldrb	r7, [r1, #24]
 800692e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006930:	2f78      	cmp	r7, #120	; 0x78
 8006932:	4691      	mov	r9, r2
 8006934:	4680      	mov	r8, r0
 8006936:	460c      	mov	r4, r1
 8006938:	469a      	mov	sl, r3
 800693a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800693e:	d807      	bhi.n	8006950 <_printf_i+0x28>
 8006940:	2f62      	cmp	r7, #98	; 0x62
 8006942:	d80a      	bhi.n	800695a <_printf_i+0x32>
 8006944:	2f00      	cmp	r7, #0
 8006946:	f000 80d8 	beq.w	8006afa <_printf_i+0x1d2>
 800694a:	2f58      	cmp	r7, #88	; 0x58
 800694c:	f000 80a3 	beq.w	8006a96 <_printf_i+0x16e>
 8006950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006958:	e03a      	b.n	80069d0 <_printf_i+0xa8>
 800695a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800695e:	2b15      	cmp	r3, #21
 8006960:	d8f6      	bhi.n	8006950 <_printf_i+0x28>
 8006962:	a101      	add	r1, pc, #4	; (adr r1, 8006968 <_printf_i+0x40>)
 8006964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006968:	080069c1 	.word	0x080069c1
 800696c:	080069d5 	.word	0x080069d5
 8006970:	08006951 	.word	0x08006951
 8006974:	08006951 	.word	0x08006951
 8006978:	08006951 	.word	0x08006951
 800697c:	08006951 	.word	0x08006951
 8006980:	080069d5 	.word	0x080069d5
 8006984:	08006951 	.word	0x08006951
 8006988:	08006951 	.word	0x08006951
 800698c:	08006951 	.word	0x08006951
 8006990:	08006951 	.word	0x08006951
 8006994:	08006ae1 	.word	0x08006ae1
 8006998:	08006a05 	.word	0x08006a05
 800699c:	08006ac3 	.word	0x08006ac3
 80069a0:	08006951 	.word	0x08006951
 80069a4:	08006951 	.word	0x08006951
 80069a8:	08006b03 	.word	0x08006b03
 80069ac:	08006951 	.word	0x08006951
 80069b0:	08006a05 	.word	0x08006a05
 80069b4:	08006951 	.word	0x08006951
 80069b8:	08006951 	.word	0x08006951
 80069bc:	08006acb 	.word	0x08006acb
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	1d1a      	adds	r2, r3, #4
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	602a      	str	r2, [r5, #0]
 80069c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0a3      	b.n	8006b1c <_printf_i+0x1f4>
 80069d4:	6820      	ldr	r0, [r4, #0]
 80069d6:	6829      	ldr	r1, [r5, #0]
 80069d8:	0606      	lsls	r6, r0, #24
 80069da:	f101 0304 	add.w	r3, r1, #4
 80069de:	d50a      	bpl.n	80069f6 <_printf_i+0xce>
 80069e0:	680e      	ldr	r6, [r1, #0]
 80069e2:	602b      	str	r3, [r5, #0]
 80069e4:	2e00      	cmp	r6, #0
 80069e6:	da03      	bge.n	80069f0 <_printf_i+0xc8>
 80069e8:	232d      	movs	r3, #45	; 0x2d
 80069ea:	4276      	negs	r6, r6
 80069ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f0:	485e      	ldr	r0, [pc, #376]	; (8006b6c <_printf_i+0x244>)
 80069f2:	230a      	movs	r3, #10
 80069f4:	e019      	b.n	8006a2a <_printf_i+0x102>
 80069f6:	680e      	ldr	r6, [r1, #0]
 80069f8:	602b      	str	r3, [r5, #0]
 80069fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069fe:	bf18      	it	ne
 8006a00:	b236      	sxthne	r6, r6
 8006a02:	e7ef      	b.n	80069e4 <_printf_i+0xbc>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	6820      	ldr	r0, [r4, #0]
 8006a08:	1d19      	adds	r1, r3, #4
 8006a0a:	6029      	str	r1, [r5, #0]
 8006a0c:	0601      	lsls	r1, r0, #24
 8006a0e:	d501      	bpl.n	8006a14 <_printf_i+0xec>
 8006a10:	681e      	ldr	r6, [r3, #0]
 8006a12:	e002      	b.n	8006a1a <_printf_i+0xf2>
 8006a14:	0646      	lsls	r6, r0, #25
 8006a16:	d5fb      	bpl.n	8006a10 <_printf_i+0xe8>
 8006a18:	881e      	ldrh	r6, [r3, #0]
 8006a1a:	4854      	ldr	r0, [pc, #336]	; (8006b6c <_printf_i+0x244>)
 8006a1c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a1e:	bf0c      	ite	eq
 8006a20:	2308      	moveq	r3, #8
 8006a22:	230a      	movne	r3, #10
 8006a24:	2100      	movs	r1, #0
 8006a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a2a:	6865      	ldr	r5, [r4, #4]
 8006a2c:	60a5      	str	r5, [r4, #8]
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	bfa2      	ittt	ge
 8006a32:	6821      	ldrge	r1, [r4, #0]
 8006a34:	f021 0104 	bicge.w	r1, r1, #4
 8006a38:	6021      	strge	r1, [r4, #0]
 8006a3a:	b90e      	cbnz	r6, 8006a40 <_printf_i+0x118>
 8006a3c:	2d00      	cmp	r5, #0
 8006a3e:	d04d      	beq.n	8006adc <_printf_i+0x1b4>
 8006a40:	4615      	mov	r5, r2
 8006a42:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a46:	fb03 6711 	mls	r7, r3, r1, r6
 8006a4a:	5dc7      	ldrb	r7, [r0, r7]
 8006a4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a50:	4637      	mov	r7, r6
 8006a52:	42bb      	cmp	r3, r7
 8006a54:	460e      	mov	r6, r1
 8006a56:	d9f4      	bls.n	8006a42 <_printf_i+0x11a>
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d10b      	bne.n	8006a74 <_printf_i+0x14c>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	07de      	lsls	r6, r3, #31
 8006a60:	d508      	bpl.n	8006a74 <_printf_i+0x14c>
 8006a62:	6923      	ldr	r3, [r4, #16]
 8006a64:	6861      	ldr	r1, [r4, #4]
 8006a66:	4299      	cmp	r1, r3
 8006a68:	bfde      	ittt	le
 8006a6a:	2330      	movle	r3, #48	; 0x30
 8006a6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a74:	1b52      	subs	r2, r2, r5
 8006a76:	6122      	str	r2, [r4, #16]
 8006a78:	f8cd a000 	str.w	sl, [sp]
 8006a7c:	464b      	mov	r3, r9
 8006a7e:	aa03      	add	r2, sp, #12
 8006a80:	4621      	mov	r1, r4
 8006a82:	4640      	mov	r0, r8
 8006a84:	f7ff fee2 	bl	800684c <_printf_common>
 8006a88:	3001      	adds	r0, #1
 8006a8a:	d14c      	bne.n	8006b26 <_printf_i+0x1fe>
 8006a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a90:	b004      	add	sp, #16
 8006a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a96:	4835      	ldr	r0, [pc, #212]	; (8006b6c <_printf_i+0x244>)
 8006a98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a9c:	6829      	ldr	r1, [r5, #0]
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006aa4:	6029      	str	r1, [r5, #0]
 8006aa6:	061d      	lsls	r5, r3, #24
 8006aa8:	d514      	bpl.n	8006ad4 <_printf_i+0x1ac>
 8006aaa:	07df      	lsls	r7, r3, #31
 8006aac:	bf44      	itt	mi
 8006aae:	f043 0320 	orrmi.w	r3, r3, #32
 8006ab2:	6023      	strmi	r3, [r4, #0]
 8006ab4:	b91e      	cbnz	r6, 8006abe <_printf_i+0x196>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	f023 0320 	bic.w	r3, r3, #32
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	2310      	movs	r3, #16
 8006ac0:	e7b0      	b.n	8006a24 <_printf_i+0xfc>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	f043 0320 	orr.w	r3, r3, #32
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	2378      	movs	r3, #120	; 0x78
 8006acc:	4828      	ldr	r0, [pc, #160]	; (8006b70 <_printf_i+0x248>)
 8006ace:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ad2:	e7e3      	b.n	8006a9c <_printf_i+0x174>
 8006ad4:	0659      	lsls	r1, r3, #25
 8006ad6:	bf48      	it	mi
 8006ad8:	b2b6      	uxthmi	r6, r6
 8006ada:	e7e6      	b.n	8006aaa <_printf_i+0x182>
 8006adc:	4615      	mov	r5, r2
 8006ade:	e7bb      	b.n	8006a58 <_printf_i+0x130>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	6826      	ldr	r6, [r4, #0]
 8006ae4:	6961      	ldr	r1, [r4, #20]
 8006ae6:	1d18      	adds	r0, r3, #4
 8006ae8:	6028      	str	r0, [r5, #0]
 8006aea:	0635      	lsls	r5, r6, #24
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	d501      	bpl.n	8006af4 <_printf_i+0x1cc>
 8006af0:	6019      	str	r1, [r3, #0]
 8006af2:	e002      	b.n	8006afa <_printf_i+0x1d2>
 8006af4:	0670      	lsls	r0, r6, #25
 8006af6:	d5fb      	bpl.n	8006af0 <_printf_i+0x1c8>
 8006af8:	8019      	strh	r1, [r3, #0]
 8006afa:	2300      	movs	r3, #0
 8006afc:	6123      	str	r3, [r4, #16]
 8006afe:	4615      	mov	r5, r2
 8006b00:	e7ba      	b.n	8006a78 <_printf_i+0x150>
 8006b02:	682b      	ldr	r3, [r5, #0]
 8006b04:	1d1a      	adds	r2, r3, #4
 8006b06:	602a      	str	r2, [r5, #0]
 8006b08:	681d      	ldr	r5, [r3, #0]
 8006b0a:	6862      	ldr	r2, [r4, #4]
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f7f9 fb66 	bl	80001e0 <memchr>
 8006b14:	b108      	cbz	r0, 8006b1a <_printf_i+0x1f2>
 8006b16:	1b40      	subs	r0, r0, r5
 8006b18:	6060      	str	r0, [r4, #4]
 8006b1a:	6863      	ldr	r3, [r4, #4]
 8006b1c:	6123      	str	r3, [r4, #16]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b24:	e7a8      	b.n	8006a78 <_printf_i+0x150>
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	462a      	mov	r2, r5
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	4640      	mov	r0, r8
 8006b2e:	47d0      	blx	sl
 8006b30:	3001      	adds	r0, #1
 8006b32:	d0ab      	beq.n	8006a8c <_printf_i+0x164>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	079b      	lsls	r3, r3, #30
 8006b38:	d413      	bmi.n	8006b62 <_printf_i+0x23a>
 8006b3a:	68e0      	ldr	r0, [r4, #12]
 8006b3c:	9b03      	ldr	r3, [sp, #12]
 8006b3e:	4298      	cmp	r0, r3
 8006b40:	bfb8      	it	lt
 8006b42:	4618      	movlt	r0, r3
 8006b44:	e7a4      	b.n	8006a90 <_printf_i+0x168>
 8006b46:	2301      	movs	r3, #1
 8006b48:	4632      	mov	r2, r6
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	47d0      	blx	sl
 8006b50:	3001      	adds	r0, #1
 8006b52:	d09b      	beq.n	8006a8c <_printf_i+0x164>
 8006b54:	3501      	adds	r5, #1
 8006b56:	68e3      	ldr	r3, [r4, #12]
 8006b58:	9903      	ldr	r1, [sp, #12]
 8006b5a:	1a5b      	subs	r3, r3, r1
 8006b5c:	42ab      	cmp	r3, r5
 8006b5e:	dcf2      	bgt.n	8006b46 <_printf_i+0x21e>
 8006b60:	e7eb      	b.n	8006b3a <_printf_i+0x212>
 8006b62:	2500      	movs	r5, #0
 8006b64:	f104 0619 	add.w	r6, r4, #25
 8006b68:	e7f5      	b.n	8006b56 <_printf_i+0x22e>
 8006b6a:	bf00      	nop
 8006b6c:	08009156 	.word	0x08009156
 8006b70:	08009167 	.word	0x08009167

08006b74 <siprintf>:
 8006b74:	b40e      	push	{r1, r2, r3}
 8006b76:	b500      	push	{lr}
 8006b78:	b09c      	sub	sp, #112	; 0x70
 8006b7a:	ab1d      	add	r3, sp, #116	; 0x74
 8006b7c:	9002      	str	r0, [sp, #8]
 8006b7e:	9006      	str	r0, [sp, #24]
 8006b80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b84:	4809      	ldr	r0, [pc, #36]	; (8006bac <siprintf+0x38>)
 8006b86:	9107      	str	r1, [sp, #28]
 8006b88:	9104      	str	r1, [sp, #16]
 8006b8a:	4909      	ldr	r1, [pc, #36]	; (8006bb0 <siprintf+0x3c>)
 8006b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b90:	9105      	str	r1, [sp, #20]
 8006b92:	6800      	ldr	r0, [r0, #0]
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	a902      	add	r1, sp, #8
 8006b98:	f001 fb78 	bl	800828c <_svfiprintf_r>
 8006b9c:	9b02      	ldr	r3, [sp, #8]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	b01c      	add	sp, #112	; 0x70
 8006ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ba8:	b003      	add	sp, #12
 8006baa:	4770      	bx	lr
 8006bac:	2000000c 	.word	0x2000000c
 8006bb0:	ffff0208 	.word	0xffff0208

08006bb4 <quorem>:
 8006bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	6903      	ldr	r3, [r0, #16]
 8006bba:	690c      	ldr	r4, [r1, #16]
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	4607      	mov	r7, r0
 8006bc0:	f2c0 8081 	blt.w	8006cc6 <quorem+0x112>
 8006bc4:	3c01      	subs	r4, #1
 8006bc6:	f101 0814 	add.w	r8, r1, #20
 8006bca:	f100 0514 	add.w	r5, r0, #20
 8006bce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	429a      	cmp	r2, r3
 8006be0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006be4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006be8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bec:	d331      	bcc.n	8006c52 <quorem+0x9e>
 8006bee:	f04f 0e00 	mov.w	lr, #0
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	46ac      	mov	ip, r5
 8006bf6:	46f2      	mov	sl, lr
 8006bf8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006bfc:	b293      	uxth	r3, r2
 8006bfe:	fb06 e303 	mla	r3, r6, r3, lr
 8006c02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	ebaa 0303 	sub.w	r3, sl, r3
 8006c0c:	f8dc a000 	ldr.w	sl, [ip]
 8006c10:	0c12      	lsrs	r2, r2, #16
 8006c12:	fa13 f38a 	uxtah	r3, r3, sl
 8006c16:	fb06 e202 	mla	r2, r6, r2, lr
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	9b00      	ldr	r3, [sp, #0]
 8006c1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c22:	b292      	uxth	r2, r2
 8006c24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006c30:	4581      	cmp	r9, r0
 8006c32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c36:	f84c 3b04 	str.w	r3, [ip], #4
 8006c3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c3e:	d2db      	bcs.n	8006bf8 <quorem+0x44>
 8006c40:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c44:	b92b      	cbnz	r3, 8006c52 <quorem+0x9e>
 8006c46:	9b01      	ldr	r3, [sp, #4]
 8006c48:	3b04      	subs	r3, #4
 8006c4a:	429d      	cmp	r5, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	d32e      	bcc.n	8006cae <quorem+0xfa>
 8006c50:	613c      	str	r4, [r7, #16]
 8006c52:	4638      	mov	r0, r7
 8006c54:	f001 f8c6 	bl	8007de4 <__mcmp>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	db24      	blt.n	8006ca6 <quorem+0xf2>
 8006c5c:	3601      	adds	r6, #1
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f04f 0c00 	mov.w	ip, #0
 8006c64:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c68:	f8d0 e000 	ldr.w	lr, [r0]
 8006c6c:	b293      	uxth	r3, r2
 8006c6e:	ebac 0303 	sub.w	r3, ip, r3
 8006c72:	0c12      	lsrs	r2, r2, #16
 8006c74:	fa13 f38e 	uxtah	r3, r3, lr
 8006c78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c86:	45c1      	cmp	r9, r8
 8006c88:	f840 3b04 	str.w	r3, [r0], #4
 8006c8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c90:	d2e8      	bcs.n	8006c64 <quorem+0xb0>
 8006c92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c9a:	b922      	cbnz	r2, 8006ca6 <quorem+0xf2>
 8006c9c:	3b04      	subs	r3, #4
 8006c9e:	429d      	cmp	r5, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	d30a      	bcc.n	8006cba <quorem+0x106>
 8006ca4:	613c      	str	r4, [r7, #16]
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	b003      	add	sp, #12
 8006caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	3b04      	subs	r3, #4
 8006cb2:	2a00      	cmp	r2, #0
 8006cb4:	d1cc      	bne.n	8006c50 <quorem+0x9c>
 8006cb6:	3c01      	subs	r4, #1
 8006cb8:	e7c7      	b.n	8006c4a <quorem+0x96>
 8006cba:	6812      	ldr	r2, [r2, #0]
 8006cbc:	3b04      	subs	r3, #4
 8006cbe:	2a00      	cmp	r2, #0
 8006cc0:	d1f0      	bne.n	8006ca4 <quorem+0xf0>
 8006cc2:	3c01      	subs	r4, #1
 8006cc4:	e7eb      	b.n	8006c9e <quorem+0xea>
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e7ee      	b.n	8006ca8 <quorem+0xf4>
 8006cca:	0000      	movs	r0, r0
 8006ccc:	0000      	movs	r0, r0
	...

08006cd0 <_dtoa_r>:
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	ed2d 8b04 	vpush	{d8-d9}
 8006cd8:	ec57 6b10 	vmov	r6, r7, d0
 8006cdc:	b093      	sub	sp, #76	; 0x4c
 8006cde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ce0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ce4:	9106      	str	r1, [sp, #24]
 8006ce6:	ee10 aa10 	vmov	sl, s0
 8006cea:	4604      	mov	r4, r0
 8006cec:	9209      	str	r2, [sp, #36]	; 0x24
 8006cee:	930c      	str	r3, [sp, #48]	; 0x30
 8006cf0:	46bb      	mov	fp, r7
 8006cf2:	b975      	cbnz	r5, 8006d12 <_dtoa_r+0x42>
 8006cf4:	2010      	movs	r0, #16
 8006cf6:	f000 fddd 	bl	80078b4 <malloc>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	6260      	str	r0, [r4, #36]	; 0x24
 8006cfe:	b920      	cbnz	r0, 8006d0a <_dtoa_r+0x3a>
 8006d00:	4ba7      	ldr	r3, [pc, #668]	; (8006fa0 <_dtoa_r+0x2d0>)
 8006d02:	21ea      	movs	r1, #234	; 0xea
 8006d04:	48a7      	ldr	r0, [pc, #668]	; (8006fa4 <_dtoa_r+0x2d4>)
 8006d06:	f001 fbd1 	bl	80084ac <__assert_func>
 8006d0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d0e:	6005      	str	r5, [r0, #0]
 8006d10:	60c5      	str	r5, [r0, #12]
 8006d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d14:	6819      	ldr	r1, [r3, #0]
 8006d16:	b151      	cbz	r1, 8006d2e <_dtoa_r+0x5e>
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	604a      	str	r2, [r1, #4]
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	4093      	lsls	r3, r2
 8006d20:	608b      	str	r3, [r1, #8]
 8006d22:	4620      	mov	r0, r4
 8006d24:	f000 fe1c 	bl	8007960 <_Bfree>
 8006d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	1e3b      	subs	r3, r7, #0
 8006d30:	bfaa      	itet	ge
 8006d32:	2300      	movge	r3, #0
 8006d34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006d38:	f8c8 3000 	strge.w	r3, [r8]
 8006d3c:	4b9a      	ldr	r3, [pc, #616]	; (8006fa8 <_dtoa_r+0x2d8>)
 8006d3e:	bfbc      	itt	lt
 8006d40:	2201      	movlt	r2, #1
 8006d42:	f8c8 2000 	strlt.w	r2, [r8]
 8006d46:	ea33 030b 	bics.w	r3, r3, fp
 8006d4a:	d11b      	bne.n	8006d84 <_dtoa_r+0xb4>
 8006d4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d58:	4333      	orrs	r3, r6
 8006d5a:	f000 8592 	beq.w	8007882 <_dtoa_r+0xbb2>
 8006d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d60:	b963      	cbnz	r3, 8006d7c <_dtoa_r+0xac>
 8006d62:	4b92      	ldr	r3, [pc, #584]	; (8006fac <_dtoa_r+0x2dc>)
 8006d64:	e022      	b.n	8006dac <_dtoa_r+0xdc>
 8006d66:	4b92      	ldr	r3, [pc, #584]	; (8006fb0 <_dtoa_r+0x2e0>)
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	9801      	ldr	r0, [sp, #4]
 8006d72:	b013      	add	sp, #76	; 0x4c
 8006d74:	ecbd 8b04 	vpop	{d8-d9}
 8006d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7c:	4b8b      	ldr	r3, [pc, #556]	; (8006fac <_dtoa_r+0x2dc>)
 8006d7e:	9301      	str	r3, [sp, #4]
 8006d80:	3303      	adds	r3, #3
 8006d82:	e7f3      	b.n	8006d6c <_dtoa_r+0x9c>
 8006d84:	2200      	movs	r2, #0
 8006d86:	2300      	movs	r3, #0
 8006d88:	4650      	mov	r0, sl
 8006d8a:	4659      	mov	r1, fp
 8006d8c:	f7f9 fe9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d90:	ec4b ab19 	vmov	d9, sl, fp
 8006d94:	4680      	mov	r8, r0
 8006d96:	b158      	cbz	r0, 8006db0 <_dtoa_r+0xe0>
 8006d98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 856b 	beq.w	800787c <_dtoa_r+0xbac>
 8006da6:	4883      	ldr	r0, [pc, #524]	; (8006fb4 <_dtoa_r+0x2e4>)
 8006da8:	6018      	str	r0, [r3, #0]
 8006daa:	1e43      	subs	r3, r0, #1
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	e7df      	b.n	8006d70 <_dtoa_r+0xa0>
 8006db0:	ec4b ab10 	vmov	d0, sl, fp
 8006db4:	aa10      	add	r2, sp, #64	; 0x40
 8006db6:	a911      	add	r1, sp, #68	; 0x44
 8006db8:	4620      	mov	r0, r4
 8006dba:	f001 f8b9 	bl	8007f30 <__d2b>
 8006dbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006dc2:	ee08 0a10 	vmov	s16, r0
 8006dc6:	2d00      	cmp	r5, #0
 8006dc8:	f000 8084 	beq.w	8006ed4 <_dtoa_r+0x204>
 8006dcc:	ee19 3a90 	vmov	r3, s19
 8006dd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006dd8:	4656      	mov	r6, sl
 8006dda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006dde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006de2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006de6:	4b74      	ldr	r3, [pc, #464]	; (8006fb8 <_dtoa_r+0x2e8>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	4630      	mov	r0, r6
 8006dec:	4639      	mov	r1, r7
 8006dee:	f7f9 fa4b 	bl	8000288 <__aeabi_dsub>
 8006df2:	a365      	add	r3, pc, #404	; (adr r3, 8006f88 <_dtoa_r+0x2b8>)
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	f7f9 fbfe 	bl	80005f8 <__aeabi_dmul>
 8006dfc:	a364      	add	r3, pc, #400	; (adr r3, 8006f90 <_dtoa_r+0x2c0>)
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f7f9 fa43 	bl	800028c <__adddf3>
 8006e06:	4606      	mov	r6, r0
 8006e08:	4628      	mov	r0, r5
 8006e0a:	460f      	mov	r7, r1
 8006e0c:	f7f9 fb8a 	bl	8000524 <__aeabi_i2d>
 8006e10:	a361      	add	r3, pc, #388	; (adr r3, 8006f98 <_dtoa_r+0x2c8>)
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	f7f9 fbef 	bl	80005f8 <__aeabi_dmul>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4630      	mov	r0, r6
 8006e20:	4639      	mov	r1, r7
 8006e22:	f7f9 fa33 	bl	800028c <__adddf3>
 8006e26:	4606      	mov	r6, r0
 8006e28:	460f      	mov	r7, r1
 8006e2a:	f7f9 fe95 	bl	8000b58 <__aeabi_d2iz>
 8006e2e:	2200      	movs	r2, #0
 8006e30:	9000      	str	r0, [sp, #0]
 8006e32:	2300      	movs	r3, #0
 8006e34:	4630      	mov	r0, r6
 8006e36:	4639      	mov	r1, r7
 8006e38:	f7f9 fe50 	bl	8000adc <__aeabi_dcmplt>
 8006e3c:	b150      	cbz	r0, 8006e54 <_dtoa_r+0x184>
 8006e3e:	9800      	ldr	r0, [sp, #0]
 8006e40:	f7f9 fb70 	bl	8000524 <__aeabi_i2d>
 8006e44:	4632      	mov	r2, r6
 8006e46:	463b      	mov	r3, r7
 8006e48:	f7f9 fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e4c:	b910      	cbnz	r0, 8006e54 <_dtoa_r+0x184>
 8006e4e:	9b00      	ldr	r3, [sp, #0]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	9b00      	ldr	r3, [sp, #0]
 8006e56:	2b16      	cmp	r3, #22
 8006e58:	d85a      	bhi.n	8006f10 <_dtoa_r+0x240>
 8006e5a:	9a00      	ldr	r2, [sp, #0]
 8006e5c:	4b57      	ldr	r3, [pc, #348]	; (8006fbc <_dtoa_r+0x2ec>)
 8006e5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	ec51 0b19 	vmov	r0, r1, d9
 8006e6a:	f7f9 fe37 	bl	8000adc <__aeabi_dcmplt>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d050      	beq.n	8006f14 <_dtoa_r+0x244>
 8006e72:	9b00      	ldr	r3, [sp, #0]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e7e:	1b5d      	subs	r5, r3, r5
 8006e80:	1e6b      	subs	r3, r5, #1
 8006e82:	9305      	str	r3, [sp, #20]
 8006e84:	bf45      	ittet	mi
 8006e86:	f1c5 0301 	rsbmi	r3, r5, #1
 8006e8a:	9304      	strmi	r3, [sp, #16]
 8006e8c:	2300      	movpl	r3, #0
 8006e8e:	2300      	movmi	r3, #0
 8006e90:	bf4c      	ite	mi
 8006e92:	9305      	strmi	r3, [sp, #20]
 8006e94:	9304      	strpl	r3, [sp, #16]
 8006e96:	9b00      	ldr	r3, [sp, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	db3d      	blt.n	8006f18 <_dtoa_r+0x248>
 8006e9c:	9b05      	ldr	r3, [sp, #20]
 8006e9e:	9a00      	ldr	r2, [sp, #0]
 8006ea0:	920a      	str	r2, [sp, #40]	; 0x28
 8006ea2:	4413      	add	r3, r2
 8006ea4:	9305      	str	r3, [sp, #20]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	9307      	str	r3, [sp, #28]
 8006eaa:	9b06      	ldr	r3, [sp, #24]
 8006eac:	2b09      	cmp	r3, #9
 8006eae:	f200 8089 	bhi.w	8006fc4 <_dtoa_r+0x2f4>
 8006eb2:	2b05      	cmp	r3, #5
 8006eb4:	bfc4      	itt	gt
 8006eb6:	3b04      	subgt	r3, #4
 8006eb8:	9306      	strgt	r3, [sp, #24]
 8006eba:	9b06      	ldr	r3, [sp, #24]
 8006ebc:	f1a3 0302 	sub.w	r3, r3, #2
 8006ec0:	bfcc      	ite	gt
 8006ec2:	2500      	movgt	r5, #0
 8006ec4:	2501      	movle	r5, #1
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	f200 8087 	bhi.w	8006fda <_dtoa_r+0x30a>
 8006ecc:	e8df f003 	tbb	[pc, r3]
 8006ed0:	59383a2d 	.word	0x59383a2d
 8006ed4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ed8:	441d      	add	r5, r3
 8006eda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ede:	2b20      	cmp	r3, #32
 8006ee0:	bfc1      	itttt	gt
 8006ee2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ee6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006eea:	fa0b f303 	lslgt.w	r3, fp, r3
 8006eee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ef2:	bfda      	itte	le
 8006ef4:	f1c3 0320 	rsble	r3, r3, #32
 8006ef8:	fa06 f003 	lslle.w	r0, r6, r3
 8006efc:	4318      	orrgt	r0, r3
 8006efe:	f7f9 fb01 	bl	8000504 <__aeabi_ui2d>
 8006f02:	2301      	movs	r3, #1
 8006f04:	4606      	mov	r6, r0
 8006f06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f0a:	3d01      	subs	r5, #1
 8006f0c:	930e      	str	r3, [sp, #56]	; 0x38
 8006f0e:	e76a      	b.n	8006de6 <_dtoa_r+0x116>
 8006f10:	2301      	movs	r3, #1
 8006f12:	e7b2      	b.n	8006e7a <_dtoa_r+0x1aa>
 8006f14:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f16:	e7b1      	b.n	8006e7c <_dtoa_r+0x1ac>
 8006f18:	9b04      	ldr	r3, [sp, #16]
 8006f1a:	9a00      	ldr	r2, [sp, #0]
 8006f1c:	1a9b      	subs	r3, r3, r2
 8006f1e:	9304      	str	r3, [sp, #16]
 8006f20:	4253      	negs	r3, r2
 8006f22:	9307      	str	r3, [sp, #28]
 8006f24:	2300      	movs	r3, #0
 8006f26:	930a      	str	r3, [sp, #40]	; 0x28
 8006f28:	e7bf      	b.n	8006eaa <_dtoa_r+0x1da>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	9308      	str	r3, [sp, #32]
 8006f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	dc55      	bgt.n	8006fe0 <_dtoa_r+0x310>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f3e:	e00c      	b.n	8006f5a <_dtoa_r+0x28a>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e7f3      	b.n	8006f2c <_dtoa_r+0x25c>
 8006f44:	2300      	movs	r3, #0
 8006f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f48:	9308      	str	r3, [sp, #32]
 8006f4a:	9b00      	ldr	r3, [sp, #0]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	9302      	str	r3, [sp, #8]
 8006f50:	3301      	adds	r3, #1
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	9303      	str	r3, [sp, #12]
 8006f56:	bfb8      	it	lt
 8006f58:	2301      	movlt	r3, #1
 8006f5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	6042      	str	r2, [r0, #4]
 8006f60:	2204      	movs	r2, #4
 8006f62:	f102 0614 	add.w	r6, r2, #20
 8006f66:	429e      	cmp	r6, r3
 8006f68:	6841      	ldr	r1, [r0, #4]
 8006f6a:	d93d      	bls.n	8006fe8 <_dtoa_r+0x318>
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f000 fcb7 	bl	80078e0 <_Balloc>
 8006f72:	9001      	str	r0, [sp, #4]
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d13b      	bne.n	8006ff0 <_dtoa_r+0x320>
 8006f78:	4b11      	ldr	r3, [pc, #68]	; (8006fc0 <_dtoa_r+0x2f0>)
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f80:	e6c0      	b.n	8006d04 <_dtoa_r+0x34>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e7df      	b.n	8006f46 <_dtoa_r+0x276>
 8006f86:	bf00      	nop
 8006f88:	636f4361 	.word	0x636f4361
 8006f8c:	3fd287a7 	.word	0x3fd287a7
 8006f90:	8b60c8b3 	.word	0x8b60c8b3
 8006f94:	3fc68a28 	.word	0x3fc68a28
 8006f98:	509f79fb 	.word	0x509f79fb
 8006f9c:	3fd34413 	.word	0x3fd34413
 8006fa0:	08009185 	.word	0x08009185
 8006fa4:	0800919c 	.word	0x0800919c
 8006fa8:	7ff00000 	.word	0x7ff00000
 8006fac:	08009181 	.word	0x08009181
 8006fb0:	08009178 	.word	0x08009178
 8006fb4:	08009155 	.word	0x08009155
 8006fb8:	3ff80000 	.word	0x3ff80000
 8006fbc:	08009290 	.word	0x08009290
 8006fc0:	080091f7 	.word	0x080091f7
 8006fc4:	2501      	movs	r5, #1
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9306      	str	r3, [sp, #24]
 8006fca:	9508      	str	r5, [sp, #32]
 8006fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2312      	movs	r3, #18
 8006fd8:	e7b0      	b.n	8006f3c <_dtoa_r+0x26c>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	9308      	str	r3, [sp, #32]
 8006fde:	e7f5      	b.n	8006fcc <_dtoa_r+0x2fc>
 8006fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006fe6:	e7b8      	b.n	8006f5a <_dtoa_r+0x28a>
 8006fe8:	3101      	adds	r1, #1
 8006fea:	6041      	str	r1, [r0, #4]
 8006fec:	0052      	lsls	r2, r2, #1
 8006fee:	e7b8      	b.n	8006f62 <_dtoa_r+0x292>
 8006ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ff2:	9a01      	ldr	r2, [sp, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	2b0e      	cmp	r3, #14
 8006ffa:	f200 809d 	bhi.w	8007138 <_dtoa_r+0x468>
 8006ffe:	2d00      	cmp	r5, #0
 8007000:	f000 809a 	beq.w	8007138 <_dtoa_r+0x468>
 8007004:	9b00      	ldr	r3, [sp, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	dd32      	ble.n	8007070 <_dtoa_r+0x3a0>
 800700a:	4ab7      	ldr	r2, [pc, #732]	; (80072e8 <_dtoa_r+0x618>)
 800700c:	f003 030f 	and.w	r3, r3, #15
 8007010:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007014:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007018:	9b00      	ldr	r3, [sp, #0]
 800701a:	05d8      	lsls	r0, r3, #23
 800701c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007020:	d516      	bpl.n	8007050 <_dtoa_r+0x380>
 8007022:	4bb2      	ldr	r3, [pc, #712]	; (80072ec <_dtoa_r+0x61c>)
 8007024:	ec51 0b19 	vmov	r0, r1, d9
 8007028:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800702c:	f7f9 fc0e 	bl	800084c <__aeabi_ddiv>
 8007030:	f007 070f 	and.w	r7, r7, #15
 8007034:	4682      	mov	sl, r0
 8007036:	468b      	mov	fp, r1
 8007038:	2503      	movs	r5, #3
 800703a:	4eac      	ldr	r6, [pc, #688]	; (80072ec <_dtoa_r+0x61c>)
 800703c:	b957      	cbnz	r7, 8007054 <_dtoa_r+0x384>
 800703e:	4642      	mov	r2, r8
 8007040:	464b      	mov	r3, r9
 8007042:	4650      	mov	r0, sl
 8007044:	4659      	mov	r1, fp
 8007046:	f7f9 fc01 	bl	800084c <__aeabi_ddiv>
 800704a:	4682      	mov	sl, r0
 800704c:	468b      	mov	fp, r1
 800704e:	e028      	b.n	80070a2 <_dtoa_r+0x3d2>
 8007050:	2502      	movs	r5, #2
 8007052:	e7f2      	b.n	800703a <_dtoa_r+0x36a>
 8007054:	07f9      	lsls	r1, r7, #31
 8007056:	d508      	bpl.n	800706a <_dtoa_r+0x39a>
 8007058:	4640      	mov	r0, r8
 800705a:	4649      	mov	r1, r9
 800705c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007060:	f7f9 faca 	bl	80005f8 <__aeabi_dmul>
 8007064:	3501      	adds	r5, #1
 8007066:	4680      	mov	r8, r0
 8007068:	4689      	mov	r9, r1
 800706a:	107f      	asrs	r7, r7, #1
 800706c:	3608      	adds	r6, #8
 800706e:	e7e5      	b.n	800703c <_dtoa_r+0x36c>
 8007070:	f000 809b 	beq.w	80071aa <_dtoa_r+0x4da>
 8007074:	9b00      	ldr	r3, [sp, #0]
 8007076:	4f9d      	ldr	r7, [pc, #628]	; (80072ec <_dtoa_r+0x61c>)
 8007078:	425e      	negs	r6, r3
 800707a:	4b9b      	ldr	r3, [pc, #620]	; (80072e8 <_dtoa_r+0x618>)
 800707c:	f006 020f 	and.w	r2, r6, #15
 8007080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	ec51 0b19 	vmov	r0, r1, d9
 800708c:	f7f9 fab4 	bl	80005f8 <__aeabi_dmul>
 8007090:	1136      	asrs	r6, r6, #4
 8007092:	4682      	mov	sl, r0
 8007094:	468b      	mov	fp, r1
 8007096:	2300      	movs	r3, #0
 8007098:	2502      	movs	r5, #2
 800709a:	2e00      	cmp	r6, #0
 800709c:	d17a      	bne.n	8007194 <_dtoa_r+0x4c4>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1d3      	bne.n	800704a <_dtoa_r+0x37a>
 80070a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 8082 	beq.w	80071ae <_dtoa_r+0x4de>
 80070aa:	4b91      	ldr	r3, [pc, #580]	; (80072f0 <_dtoa_r+0x620>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	4650      	mov	r0, sl
 80070b0:	4659      	mov	r1, fp
 80070b2:	f7f9 fd13 	bl	8000adc <__aeabi_dcmplt>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d079      	beq.n	80071ae <_dtoa_r+0x4de>
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d076      	beq.n	80071ae <_dtoa_r+0x4de>
 80070c0:	9b02      	ldr	r3, [sp, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	dd36      	ble.n	8007134 <_dtoa_r+0x464>
 80070c6:	9b00      	ldr	r3, [sp, #0]
 80070c8:	4650      	mov	r0, sl
 80070ca:	4659      	mov	r1, fp
 80070cc:	1e5f      	subs	r7, r3, #1
 80070ce:	2200      	movs	r2, #0
 80070d0:	4b88      	ldr	r3, [pc, #544]	; (80072f4 <_dtoa_r+0x624>)
 80070d2:	f7f9 fa91 	bl	80005f8 <__aeabi_dmul>
 80070d6:	9e02      	ldr	r6, [sp, #8]
 80070d8:	4682      	mov	sl, r0
 80070da:	468b      	mov	fp, r1
 80070dc:	3501      	adds	r5, #1
 80070de:	4628      	mov	r0, r5
 80070e0:	f7f9 fa20 	bl	8000524 <__aeabi_i2d>
 80070e4:	4652      	mov	r2, sl
 80070e6:	465b      	mov	r3, fp
 80070e8:	f7f9 fa86 	bl	80005f8 <__aeabi_dmul>
 80070ec:	4b82      	ldr	r3, [pc, #520]	; (80072f8 <_dtoa_r+0x628>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	f7f9 f8cc 	bl	800028c <__adddf3>
 80070f4:	46d0      	mov	r8, sl
 80070f6:	46d9      	mov	r9, fp
 80070f8:	4682      	mov	sl, r0
 80070fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80070fe:	2e00      	cmp	r6, #0
 8007100:	d158      	bne.n	80071b4 <_dtoa_r+0x4e4>
 8007102:	4b7e      	ldr	r3, [pc, #504]	; (80072fc <_dtoa_r+0x62c>)
 8007104:	2200      	movs	r2, #0
 8007106:	4640      	mov	r0, r8
 8007108:	4649      	mov	r1, r9
 800710a:	f7f9 f8bd 	bl	8000288 <__aeabi_dsub>
 800710e:	4652      	mov	r2, sl
 8007110:	465b      	mov	r3, fp
 8007112:	4680      	mov	r8, r0
 8007114:	4689      	mov	r9, r1
 8007116:	f7f9 fcff 	bl	8000b18 <__aeabi_dcmpgt>
 800711a:	2800      	cmp	r0, #0
 800711c:	f040 8295 	bne.w	800764a <_dtoa_r+0x97a>
 8007120:	4652      	mov	r2, sl
 8007122:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007126:	4640      	mov	r0, r8
 8007128:	4649      	mov	r1, r9
 800712a:	f7f9 fcd7 	bl	8000adc <__aeabi_dcmplt>
 800712e:	2800      	cmp	r0, #0
 8007130:	f040 8289 	bne.w	8007646 <_dtoa_r+0x976>
 8007134:	ec5b ab19 	vmov	sl, fp, d9
 8007138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800713a:	2b00      	cmp	r3, #0
 800713c:	f2c0 8148 	blt.w	80073d0 <_dtoa_r+0x700>
 8007140:	9a00      	ldr	r2, [sp, #0]
 8007142:	2a0e      	cmp	r2, #14
 8007144:	f300 8144 	bgt.w	80073d0 <_dtoa_r+0x700>
 8007148:	4b67      	ldr	r3, [pc, #412]	; (80072e8 <_dtoa_r+0x618>)
 800714a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800714e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007154:	2b00      	cmp	r3, #0
 8007156:	f280 80d5 	bge.w	8007304 <_dtoa_r+0x634>
 800715a:	9b03      	ldr	r3, [sp, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f300 80d1 	bgt.w	8007304 <_dtoa_r+0x634>
 8007162:	f040 826f 	bne.w	8007644 <_dtoa_r+0x974>
 8007166:	4b65      	ldr	r3, [pc, #404]	; (80072fc <_dtoa_r+0x62c>)
 8007168:	2200      	movs	r2, #0
 800716a:	4640      	mov	r0, r8
 800716c:	4649      	mov	r1, r9
 800716e:	f7f9 fa43 	bl	80005f8 <__aeabi_dmul>
 8007172:	4652      	mov	r2, sl
 8007174:	465b      	mov	r3, fp
 8007176:	f7f9 fcc5 	bl	8000b04 <__aeabi_dcmpge>
 800717a:	9e03      	ldr	r6, [sp, #12]
 800717c:	4637      	mov	r7, r6
 800717e:	2800      	cmp	r0, #0
 8007180:	f040 8245 	bne.w	800760e <_dtoa_r+0x93e>
 8007184:	9d01      	ldr	r5, [sp, #4]
 8007186:	2331      	movs	r3, #49	; 0x31
 8007188:	f805 3b01 	strb.w	r3, [r5], #1
 800718c:	9b00      	ldr	r3, [sp, #0]
 800718e:	3301      	adds	r3, #1
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	e240      	b.n	8007616 <_dtoa_r+0x946>
 8007194:	07f2      	lsls	r2, r6, #31
 8007196:	d505      	bpl.n	80071a4 <_dtoa_r+0x4d4>
 8007198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800719c:	f7f9 fa2c 	bl	80005f8 <__aeabi_dmul>
 80071a0:	3501      	adds	r5, #1
 80071a2:	2301      	movs	r3, #1
 80071a4:	1076      	asrs	r6, r6, #1
 80071a6:	3708      	adds	r7, #8
 80071a8:	e777      	b.n	800709a <_dtoa_r+0x3ca>
 80071aa:	2502      	movs	r5, #2
 80071ac:	e779      	b.n	80070a2 <_dtoa_r+0x3d2>
 80071ae:	9f00      	ldr	r7, [sp, #0]
 80071b0:	9e03      	ldr	r6, [sp, #12]
 80071b2:	e794      	b.n	80070de <_dtoa_r+0x40e>
 80071b4:	9901      	ldr	r1, [sp, #4]
 80071b6:	4b4c      	ldr	r3, [pc, #304]	; (80072e8 <_dtoa_r+0x618>)
 80071b8:	4431      	add	r1, r6
 80071ba:	910d      	str	r1, [sp, #52]	; 0x34
 80071bc:	9908      	ldr	r1, [sp, #32]
 80071be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80071c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071c6:	2900      	cmp	r1, #0
 80071c8:	d043      	beq.n	8007252 <_dtoa_r+0x582>
 80071ca:	494d      	ldr	r1, [pc, #308]	; (8007300 <_dtoa_r+0x630>)
 80071cc:	2000      	movs	r0, #0
 80071ce:	f7f9 fb3d 	bl	800084c <__aeabi_ddiv>
 80071d2:	4652      	mov	r2, sl
 80071d4:	465b      	mov	r3, fp
 80071d6:	f7f9 f857 	bl	8000288 <__aeabi_dsub>
 80071da:	9d01      	ldr	r5, [sp, #4]
 80071dc:	4682      	mov	sl, r0
 80071de:	468b      	mov	fp, r1
 80071e0:	4649      	mov	r1, r9
 80071e2:	4640      	mov	r0, r8
 80071e4:	f7f9 fcb8 	bl	8000b58 <__aeabi_d2iz>
 80071e8:	4606      	mov	r6, r0
 80071ea:	f7f9 f99b 	bl	8000524 <__aeabi_i2d>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4640      	mov	r0, r8
 80071f4:	4649      	mov	r1, r9
 80071f6:	f7f9 f847 	bl	8000288 <__aeabi_dsub>
 80071fa:	3630      	adds	r6, #48	; 0x30
 80071fc:	f805 6b01 	strb.w	r6, [r5], #1
 8007200:	4652      	mov	r2, sl
 8007202:	465b      	mov	r3, fp
 8007204:	4680      	mov	r8, r0
 8007206:	4689      	mov	r9, r1
 8007208:	f7f9 fc68 	bl	8000adc <__aeabi_dcmplt>
 800720c:	2800      	cmp	r0, #0
 800720e:	d163      	bne.n	80072d8 <_dtoa_r+0x608>
 8007210:	4642      	mov	r2, r8
 8007212:	464b      	mov	r3, r9
 8007214:	4936      	ldr	r1, [pc, #216]	; (80072f0 <_dtoa_r+0x620>)
 8007216:	2000      	movs	r0, #0
 8007218:	f7f9 f836 	bl	8000288 <__aeabi_dsub>
 800721c:	4652      	mov	r2, sl
 800721e:	465b      	mov	r3, fp
 8007220:	f7f9 fc5c 	bl	8000adc <__aeabi_dcmplt>
 8007224:	2800      	cmp	r0, #0
 8007226:	f040 80b5 	bne.w	8007394 <_dtoa_r+0x6c4>
 800722a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800722c:	429d      	cmp	r5, r3
 800722e:	d081      	beq.n	8007134 <_dtoa_r+0x464>
 8007230:	4b30      	ldr	r3, [pc, #192]	; (80072f4 <_dtoa_r+0x624>)
 8007232:	2200      	movs	r2, #0
 8007234:	4650      	mov	r0, sl
 8007236:	4659      	mov	r1, fp
 8007238:	f7f9 f9de 	bl	80005f8 <__aeabi_dmul>
 800723c:	4b2d      	ldr	r3, [pc, #180]	; (80072f4 <_dtoa_r+0x624>)
 800723e:	4682      	mov	sl, r0
 8007240:	468b      	mov	fp, r1
 8007242:	4640      	mov	r0, r8
 8007244:	4649      	mov	r1, r9
 8007246:	2200      	movs	r2, #0
 8007248:	f7f9 f9d6 	bl	80005f8 <__aeabi_dmul>
 800724c:	4680      	mov	r8, r0
 800724e:	4689      	mov	r9, r1
 8007250:	e7c6      	b.n	80071e0 <_dtoa_r+0x510>
 8007252:	4650      	mov	r0, sl
 8007254:	4659      	mov	r1, fp
 8007256:	f7f9 f9cf 	bl	80005f8 <__aeabi_dmul>
 800725a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800725c:	9d01      	ldr	r5, [sp, #4]
 800725e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007260:	4682      	mov	sl, r0
 8007262:	468b      	mov	fp, r1
 8007264:	4649      	mov	r1, r9
 8007266:	4640      	mov	r0, r8
 8007268:	f7f9 fc76 	bl	8000b58 <__aeabi_d2iz>
 800726c:	4606      	mov	r6, r0
 800726e:	f7f9 f959 	bl	8000524 <__aeabi_i2d>
 8007272:	3630      	adds	r6, #48	; 0x30
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4640      	mov	r0, r8
 800727a:	4649      	mov	r1, r9
 800727c:	f7f9 f804 	bl	8000288 <__aeabi_dsub>
 8007280:	f805 6b01 	strb.w	r6, [r5], #1
 8007284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007286:	429d      	cmp	r5, r3
 8007288:	4680      	mov	r8, r0
 800728a:	4689      	mov	r9, r1
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	d124      	bne.n	80072dc <_dtoa_r+0x60c>
 8007292:	4b1b      	ldr	r3, [pc, #108]	; (8007300 <_dtoa_r+0x630>)
 8007294:	4650      	mov	r0, sl
 8007296:	4659      	mov	r1, fp
 8007298:	f7f8 fff8 	bl	800028c <__adddf3>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4640      	mov	r0, r8
 80072a2:	4649      	mov	r1, r9
 80072a4:	f7f9 fc38 	bl	8000b18 <__aeabi_dcmpgt>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d173      	bne.n	8007394 <_dtoa_r+0x6c4>
 80072ac:	4652      	mov	r2, sl
 80072ae:	465b      	mov	r3, fp
 80072b0:	4913      	ldr	r1, [pc, #76]	; (8007300 <_dtoa_r+0x630>)
 80072b2:	2000      	movs	r0, #0
 80072b4:	f7f8 ffe8 	bl	8000288 <__aeabi_dsub>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4640      	mov	r0, r8
 80072be:	4649      	mov	r1, r9
 80072c0:	f7f9 fc0c 	bl	8000adc <__aeabi_dcmplt>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	f43f af35 	beq.w	8007134 <_dtoa_r+0x464>
 80072ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80072cc:	1e6b      	subs	r3, r5, #1
 80072ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80072d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80072d4:	2b30      	cmp	r3, #48	; 0x30
 80072d6:	d0f8      	beq.n	80072ca <_dtoa_r+0x5fa>
 80072d8:	9700      	str	r7, [sp, #0]
 80072da:	e049      	b.n	8007370 <_dtoa_r+0x6a0>
 80072dc:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <_dtoa_r+0x624>)
 80072de:	f7f9 f98b 	bl	80005f8 <__aeabi_dmul>
 80072e2:	4680      	mov	r8, r0
 80072e4:	4689      	mov	r9, r1
 80072e6:	e7bd      	b.n	8007264 <_dtoa_r+0x594>
 80072e8:	08009290 	.word	0x08009290
 80072ec:	08009268 	.word	0x08009268
 80072f0:	3ff00000 	.word	0x3ff00000
 80072f4:	40240000 	.word	0x40240000
 80072f8:	401c0000 	.word	0x401c0000
 80072fc:	40140000 	.word	0x40140000
 8007300:	3fe00000 	.word	0x3fe00000
 8007304:	9d01      	ldr	r5, [sp, #4]
 8007306:	4656      	mov	r6, sl
 8007308:	465f      	mov	r7, fp
 800730a:	4642      	mov	r2, r8
 800730c:	464b      	mov	r3, r9
 800730e:	4630      	mov	r0, r6
 8007310:	4639      	mov	r1, r7
 8007312:	f7f9 fa9b 	bl	800084c <__aeabi_ddiv>
 8007316:	f7f9 fc1f 	bl	8000b58 <__aeabi_d2iz>
 800731a:	4682      	mov	sl, r0
 800731c:	f7f9 f902 	bl	8000524 <__aeabi_i2d>
 8007320:	4642      	mov	r2, r8
 8007322:	464b      	mov	r3, r9
 8007324:	f7f9 f968 	bl	80005f8 <__aeabi_dmul>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4630      	mov	r0, r6
 800732e:	4639      	mov	r1, r7
 8007330:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007334:	f7f8 ffa8 	bl	8000288 <__aeabi_dsub>
 8007338:	f805 6b01 	strb.w	r6, [r5], #1
 800733c:	9e01      	ldr	r6, [sp, #4]
 800733e:	9f03      	ldr	r7, [sp, #12]
 8007340:	1bae      	subs	r6, r5, r6
 8007342:	42b7      	cmp	r7, r6
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	d135      	bne.n	80073b6 <_dtoa_r+0x6e6>
 800734a:	f7f8 ff9f 	bl	800028c <__adddf3>
 800734e:	4642      	mov	r2, r8
 8007350:	464b      	mov	r3, r9
 8007352:	4606      	mov	r6, r0
 8007354:	460f      	mov	r7, r1
 8007356:	f7f9 fbdf 	bl	8000b18 <__aeabi_dcmpgt>
 800735a:	b9d0      	cbnz	r0, 8007392 <_dtoa_r+0x6c2>
 800735c:	4642      	mov	r2, r8
 800735e:	464b      	mov	r3, r9
 8007360:	4630      	mov	r0, r6
 8007362:	4639      	mov	r1, r7
 8007364:	f7f9 fbb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007368:	b110      	cbz	r0, 8007370 <_dtoa_r+0x6a0>
 800736a:	f01a 0f01 	tst.w	sl, #1
 800736e:	d110      	bne.n	8007392 <_dtoa_r+0x6c2>
 8007370:	4620      	mov	r0, r4
 8007372:	ee18 1a10 	vmov	r1, s16
 8007376:	f000 faf3 	bl	8007960 <_Bfree>
 800737a:	2300      	movs	r3, #0
 800737c:	9800      	ldr	r0, [sp, #0]
 800737e:	702b      	strb	r3, [r5, #0]
 8007380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007382:	3001      	adds	r0, #1
 8007384:	6018      	str	r0, [r3, #0]
 8007386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007388:	2b00      	cmp	r3, #0
 800738a:	f43f acf1 	beq.w	8006d70 <_dtoa_r+0xa0>
 800738e:	601d      	str	r5, [r3, #0]
 8007390:	e4ee      	b.n	8006d70 <_dtoa_r+0xa0>
 8007392:	9f00      	ldr	r7, [sp, #0]
 8007394:	462b      	mov	r3, r5
 8007396:	461d      	mov	r5, r3
 8007398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800739c:	2a39      	cmp	r2, #57	; 0x39
 800739e:	d106      	bne.n	80073ae <_dtoa_r+0x6de>
 80073a0:	9a01      	ldr	r2, [sp, #4]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d1f7      	bne.n	8007396 <_dtoa_r+0x6c6>
 80073a6:	9901      	ldr	r1, [sp, #4]
 80073a8:	2230      	movs	r2, #48	; 0x30
 80073aa:	3701      	adds	r7, #1
 80073ac:	700a      	strb	r2, [r1, #0]
 80073ae:	781a      	ldrb	r2, [r3, #0]
 80073b0:	3201      	adds	r2, #1
 80073b2:	701a      	strb	r2, [r3, #0]
 80073b4:	e790      	b.n	80072d8 <_dtoa_r+0x608>
 80073b6:	4ba6      	ldr	r3, [pc, #664]	; (8007650 <_dtoa_r+0x980>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	f7f9 f91d 	bl	80005f8 <__aeabi_dmul>
 80073be:	2200      	movs	r2, #0
 80073c0:	2300      	movs	r3, #0
 80073c2:	4606      	mov	r6, r0
 80073c4:	460f      	mov	r7, r1
 80073c6:	f7f9 fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d09d      	beq.n	800730a <_dtoa_r+0x63a>
 80073ce:	e7cf      	b.n	8007370 <_dtoa_r+0x6a0>
 80073d0:	9a08      	ldr	r2, [sp, #32]
 80073d2:	2a00      	cmp	r2, #0
 80073d4:	f000 80d7 	beq.w	8007586 <_dtoa_r+0x8b6>
 80073d8:	9a06      	ldr	r2, [sp, #24]
 80073da:	2a01      	cmp	r2, #1
 80073dc:	f300 80ba 	bgt.w	8007554 <_dtoa_r+0x884>
 80073e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073e2:	2a00      	cmp	r2, #0
 80073e4:	f000 80b2 	beq.w	800754c <_dtoa_r+0x87c>
 80073e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80073ec:	9e07      	ldr	r6, [sp, #28]
 80073ee:	9d04      	ldr	r5, [sp, #16]
 80073f0:	9a04      	ldr	r2, [sp, #16]
 80073f2:	441a      	add	r2, r3
 80073f4:	9204      	str	r2, [sp, #16]
 80073f6:	9a05      	ldr	r2, [sp, #20]
 80073f8:	2101      	movs	r1, #1
 80073fa:	441a      	add	r2, r3
 80073fc:	4620      	mov	r0, r4
 80073fe:	9205      	str	r2, [sp, #20]
 8007400:	f000 fb66 	bl	8007ad0 <__i2b>
 8007404:	4607      	mov	r7, r0
 8007406:	2d00      	cmp	r5, #0
 8007408:	dd0c      	ble.n	8007424 <_dtoa_r+0x754>
 800740a:	9b05      	ldr	r3, [sp, #20]
 800740c:	2b00      	cmp	r3, #0
 800740e:	dd09      	ble.n	8007424 <_dtoa_r+0x754>
 8007410:	42ab      	cmp	r3, r5
 8007412:	9a04      	ldr	r2, [sp, #16]
 8007414:	bfa8      	it	ge
 8007416:	462b      	movge	r3, r5
 8007418:	1ad2      	subs	r2, r2, r3
 800741a:	9204      	str	r2, [sp, #16]
 800741c:	9a05      	ldr	r2, [sp, #20]
 800741e:	1aed      	subs	r5, r5, r3
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	9305      	str	r3, [sp, #20]
 8007424:	9b07      	ldr	r3, [sp, #28]
 8007426:	b31b      	cbz	r3, 8007470 <_dtoa_r+0x7a0>
 8007428:	9b08      	ldr	r3, [sp, #32]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 80af 	beq.w	800758e <_dtoa_r+0x8be>
 8007430:	2e00      	cmp	r6, #0
 8007432:	dd13      	ble.n	800745c <_dtoa_r+0x78c>
 8007434:	4639      	mov	r1, r7
 8007436:	4632      	mov	r2, r6
 8007438:	4620      	mov	r0, r4
 800743a:	f000 fc09 	bl	8007c50 <__pow5mult>
 800743e:	ee18 2a10 	vmov	r2, s16
 8007442:	4601      	mov	r1, r0
 8007444:	4607      	mov	r7, r0
 8007446:	4620      	mov	r0, r4
 8007448:	f000 fb58 	bl	8007afc <__multiply>
 800744c:	ee18 1a10 	vmov	r1, s16
 8007450:	4680      	mov	r8, r0
 8007452:	4620      	mov	r0, r4
 8007454:	f000 fa84 	bl	8007960 <_Bfree>
 8007458:	ee08 8a10 	vmov	s16, r8
 800745c:	9b07      	ldr	r3, [sp, #28]
 800745e:	1b9a      	subs	r2, r3, r6
 8007460:	d006      	beq.n	8007470 <_dtoa_r+0x7a0>
 8007462:	ee18 1a10 	vmov	r1, s16
 8007466:	4620      	mov	r0, r4
 8007468:	f000 fbf2 	bl	8007c50 <__pow5mult>
 800746c:	ee08 0a10 	vmov	s16, r0
 8007470:	2101      	movs	r1, #1
 8007472:	4620      	mov	r0, r4
 8007474:	f000 fb2c 	bl	8007ad0 <__i2b>
 8007478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800747a:	2b00      	cmp	r3, #0
 800747c:	4606      	mov	r6, r0
 800747e:	f340 8088 	ble.w	8007592 <_dtoa_r+0x8c2>
 8007482:	461a      	mov	r2, r3
 8007484:	4601      	mov	r1, r0
 8007486:	4620      	mov	r0, r4
 8007488:	f000 fbe2 	bl	8007c50 <__pow5mult>
 800748c:	9b06      	ldr	r3, [sp, #24]
 800748e:	2b01      	cmp	r3, #1
 8007490:	4606      	mov	r6, r0
 8007492:	f340 8081 	ble.w	8007598 <_dtoa_r+0x8c8>
 8007496:	f04f 0800 	mov.w	r8, #0
 800749a:	6933      	ldr	r3, [r6, #16]
 800749c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80074a0:	6918      	ldr	r0, [r3, #16]
 80074a2:	f000 fac5 	bl	8007a30 <__hi0bits>
 80074a6:	f1c0 0020 	rsb	r0, r0, #32
 80074aa:	9b05      	ldr	r3, [sp, #20]
 80074ac:	4418      	add	r0, r3
 80074ae:	f010 001f 	ands.w	r0, r0, #31
 80074b2:	f000 8092 	beq.w	80075da <_dtoa_r+0x90a>
 80074b6:	f1c0 0320 	rsb	r3, r0, #32
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	f340 808a 	ble.w	80075d4 <_dtoa_r+0x904>
 80074c0:	f1c0 001c 	rsb	r0, r0, #28
 80074c4:	9b04      	ldr	r3, [sp, #16]
 80074c6:	4403      	add	r3, r0
 80074c8:	9304      	str	r3, [sp, #16]
 80074ca:	9b05      	ldr	r3, [sp, #20]
 80074cc:	4403      	add	r3, r0
 80074ce:	4405      	add	r5, r0
 80074d0:	9305      	str	r3, [sp, #20]
 80074d2:	9b04      	ldr	r3, [sp, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dd07      	ble.n	80074e8 <_dtoa_r+0x818>
 80074d8:	ee18 1a10 	vmov	r1, s16
 80074dc:	461a      	mov	r2, r3
 80074de:	4620      	mov	r0, r4
 80074e0:	f000 fc10 	bl	8007d04 <__lshift>
 80074e4:	ee08 0a10 	vmov	s16, r0
 80074e8:	9b05      	ldr	r3, [sp, #20]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	dd05      	ble.n	80074fa <_dtoa_r+0x82a>
 80074ee:	4631      	mov	r1, r6
 80074f0:	461a      	mov	r2, r3
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 fc06 	bl	8007d04 <__lshift>
 80074f8:	4606      	mov	r6, r0
 80074fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d06e      	beq.n	80075de <_dtoa_r+0x90e>
 8007500:	ee18 0a10 	vmov	r0, s16
 8007504:	4631      	mov	r1, r6
 8007506:	f000 fc6d 	bl	8007de4 <__mcmp>
 800750a:	2800      	cmp	r0, #0
 800750c:	da67      	bge.n	80075de <_dtoa_r+0x90e>
 800750e:	9b00      	ldr	r3, [sp, #0]
 8007510:	3b01      	subs	r3, #1
 8007512:	ee18 1a10 	vmov	r1, s16
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	220a      	movs	r2, #10
 800751a:	2300      	movs	r3, #0
 800751c:	4620      	mov	r0, r4
 800751e:	f000 fa41 	bl	80079a4 <__multadd>
 8007522:	9b08      	ldr	r3, [sp, #32]
 8007524:	ee08 0a10 	vmov	s16, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 81b1 	beq.w	8007890 <_dtoa_r+0xbc0>
 800752e:	2300      	movs	r3, #0
 8007530:	4639      	mov	r1, r7
 8007532:	220a      	movs	r2, #10
 8007534:	4620      	mov	r0, r4
 8007536:	f000 fa35 	bl	80079a4 <__multadd>
 800753a:	9b02      	ldr	r3, [sp, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	4607      	mov	r7, r0
 8007540:	f300 808e 	bgt.w	8007660 <_dtoa_r+0x990>
 8007544:	9b06      	ldr	r3, [sp, #24]
 8007546:	2b02      	cmp	r3, #2
 8007548:	dc51      	bgt.n	80075ee <_dtoa_r+0x91e>
 800754a:	e089      	b.n	8007660 <_dtoa_r+0x990>
 800754c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800754e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007552:	e74b      	b.n	80073ec <_dtoa_r+0x71c>
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	1e5e      	subs	r6, r3, #1
 8007558:	9b07      	ldr	r3, [sp, #28]
 800755a:	42b3      	cmp	r3, r6
 800755c:	bfbf      	itttt	lt
 800755e:	9b07      	ldrlt	r3, [sp, #28]
 8007560:	9607      	strlt	r6, [sp, #28]
 8007562:	1af2      	sublt	r2, r6, r3
 8007564:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007566:	bfb6      	itet	lt
 8007568:	189b      	addlt	r3, r3, r2
 800756a:	1b9e      	subge	r6, r3, r6
 800756c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800756e:	9b03      	ldr	r3, [sp, #12]
 8007570:	bfb8      	it	lt
 8007572:	2600      	movlt	r6, #0
 8007574:	2b00      	cmp	r3, #0
 8007576:	bfb7      	itett	lt
 8007578:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800757c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007580:	1a9d      	sublt	r5, r3, r2
 8007582:	2300      	movlt	r3, #0
 8007584:	e734      	b.n	80073f0 <_dtoa_r+0x720>
 8007586:	9e07      	ldr	r6, [sp, #28]
 8007588:	9d04      	ldr	r5, [sp, #16]
 800758a:	9f08      	ldr	r7, [sp, #32]
 800758c:	e73b      	b.n	8007406 <_dtoa_r+0x736>
 800758e:	9a07      	ldr	r2, [sp, #28]
 8007590:	e767      	b.n	8007462 <_dtoa_r+0x792>
 8007592:	9b06      	ldr	r3, [sp, #24]
 8007594:	2b01      	cmp	r3, #1
 8007596:	dc18      	bgt.n	80075ca <_dtoa_r+0x8fa>
 8007598:	f1ba 0f00 	cmp.w	sl, #0
 800759c:	d115      	bne.n	80075ca <_dtoa_r+0x8fa>
 800759e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075a2:	b993      	cbnz	r3, 80075ca <_dtoa_r+0x8fa>
 80075a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80075a8:	0d1b      	lsrs	r3, r3, #20
 80075aa:	051b      	lsls	r3, r3, #20
 80075ac:	b183      	cbz	r3, 80075d0 <_dtoa_r+0x900>
 80075ae:	9b04      	ldr	r3, [sp, #16]
 80075b0:	3301      	adds	r3, #1
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	9b05      	ldr	r3, [sp, #20]
 80075b6:	3301      	adds	r3, #1
 80075b8:	9305      	str	r3, [sp, #20]
 80075ba:	f04f 0801 	mov.w	r8, #1
 80075be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f47f af6a 	bne.w	800749a <_dtoa_r+0x7ca>
 80075c6:	2001      	movs	r0, #1
 80075c8:	e76f      	b.n	80074aa <_dtoa_r+0x7da>
 80075ca:	f04f 0800 	mov.w	r8, #0
 80075ce:	e7f6      	b.n	80075be <_dtoa_r+0x8ee>
 80075d0:	4698      	mov	r8, r3
 80075d2:	e7f4      	b.n	80075be <_dtoa_r+0x8ee>
 80075d4:	f43f af7d 	beq.w	80074d2 <_dtoa_r+0x802>
 80075d8:	4618      	mov	r0, r3
 80075da:	301c      	adds	r0, #28
 80075dc:	e772      	b.n	80074c4 <_dtoa_r+0x7f4>
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dc37      	bgt.n	8007654 <_dtoa_r+0x984>
 80075e4:	9b06      	ldr	r3, [sp, #24]
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	dd34      	ble.n	8007654 <_dtoa_r+0x984>
 80075ea:	9b03      	ldr	r3, [sp, #12]
 80075ec:	9302      	str	r3, [sp, #8]
 80075ee:	9b02      	ldr	r3, [sp, #8]
 80075f0:	b96b      	cbnz	r3, 800760e <_dtoa_r+0x93e>
 80075f2:	4631      	mov	r1, r6
 80075f4:	2205      	movs	r2, #5
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 f9d4 	bl	80079a4 <__multadd>
 80075fc:	4601      	mov	r1, r0
 80075fe:	4606      	mov	r6, r0
 8007600:	ee18 0a10 	vmov	r0, s16
 8007604:	f000 fbee 	bl	8007de4 <__mcmp>
 8007608:	2800      	cmp	r0, #0
 800760a:	f73f adbb 	bgt.w	8007184 <_dtoa_r+0x4b4>
 800760e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007610:	9d01      	ldr	r5, [sp, #4]
 8007612:	43db      	mvns	r3, r3
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	f04f 0800 	mov.w	r8, #0
 800761a:	4631      	mov	r1, r6
 800761c:	4620      	mov	r0, r4
 800761e:	f000 f99f 	bl	8007960 <_Bfree>
 8007622:	2f00      	cmp	r7, #0
 8007624:	f43f aea4 	beq.w	8007370 <_dtoa_r+0x6a0>
 8007628:	f1b8 0f00 	cmp.w	r8, #0
 800762c:	d005      	beq.n	800763a <_dtoa_r+0x96a>
 800762e:	45b8      	cmp	r8, r7
 8007630:	d003      	beq.n	800763a <_dtoa_r+0x96a>
 8007632:	4641      	mov	r1, r8
 8007634:	4620      	mov	r0, r4
 8007636:	f000 f993 	bl	8007960 <_Bfree>
 800763a:	4639      	mov	r1, r7
 800763c:	4620      	mov	r0, r4
 800763e:	f000 f98f 	bl	8007960 <_Bfree>
 8007642:	e695      	b.n	8007370 <_dtoa_r+0x6a0>
 8007644:	2600      	movs	r6, #0
 8007646:	4637      	mov	r7, r6
 8007648:	e7e1      	b.n	800760e <_dtoa_r+0x93e>
 800764a:	9700      	str	r7, [sp, #0]
 800764c:	4637      	mov	r7, r6
 800764e:	e599      	b.n	8007184 <_dtoa_r+0x4b4>
 8007650:	40240000 	.word	0x40240000
 8007654:	9b08      	ldr	r3, [sp, #32]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 80ca 	beq.w	80077f0 <_dtoa_r+0xb20>
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	9302      	str	r3, [sp, #8]
 8007660:	2d00      	cmp	r5, #0
 8007662:	dd05      	ble.n	8007670 <_dtoa_r+0x9a0>
 8007664:	4639      	mov	r1, r7
 8007666:	462a      	mov	r2, r5
 8007668:	4620      	mov	r0, r4
 800766a:	f000 fb4b 	bl	8007d04 <__lshift>
 800766e:	4607      	mov	r7, r0
 8007670:	f1b8 0f00 	cmp.w	r8, #0
 8007674:	d05b      	beq.n	800772e <_dtoa_r+0xa5e>
 8007676:	6879      	ldr	r1, [r7, #4]
 8007678:	4620      	mov	r0, r4
 800767a:	f000 f931 	bl	80078e0 <_Balloc>
 800767e:	4605      	mov	r5, r0
 8007680:	b928      	cbnz	r0, 800768e <_dtoa_r+0x9be>
 8007682:	4b87      	ldr	r3, [pc, #540]	; (80078a0 <_dtoa_r+0xbd0>)
 8007684:	4602      	mov	r2, r0
 8007686:	f240 21ea 	movw	r1, #746	; 0x2ea
 800768a:	f7ff bb3b 	b.w	8006d04 <_dtoa_r+0x34>
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	3202      	adds	r2, #2
 8007692:	0092      	lsls	r2, r2, #2
 8007694:	f107 010c 	add.w	r1, r7, #12
 8007698:	300c      	adds	r0, #12
 800769a:	f000 f913 	bl	80078c4 <memcpy>
 800769e:	2201      	movs	r2, #1
 80076a0:	4629      	mov	r1, r5
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 fb2e 	bl	8007d04 <__lshift>
 80076a8:	9b01      	ldr	r3, [sp, #4]
 80076aa:	f103 0901 	add.w	r9, r3, #1
 80076ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80076b2:	4413      	add	r3, r2
 80076b4:	9305      	str	r3, [sp, #20]
 80076b6:	f00a 0301 	and.w	r3, sl, #1
 80076ba:	46b8      	mov	r8, r7
 80076bc:	9304      	str	r3, [sp, #16]
 80076be:	4607      	mov	r7, r0
 80076c0:	4631      	mov	r1, r6
 80076c2:	ee18 0a10 	vmov	r0, s16
 80076c6:	f7ff fa75 	bl	8006bb4 <quorem>
 80076ca:	4641      	mov	r1, r8
 80076cc:	9002      	str	r0, [sp, #8]
 80076ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80076d2:	ee18 0a10 	vmov	r0, s16
 80076d6:	f000 fb85 	bl	8007de4 <__mcmp>
 80076da:	463a      	mov	r2, r7
 80076dc:	9003      	str	r0, [sp, #12]
 80076de:	4631      	mov	r1, r6
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 fb9b 	bl	8007e1c <__mdiff>
 80076e6:	68c2      	ldr	r2, [r0, #12]
 80076e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80076ec:	4605      	mov	r5, r0
 80076ee:	bb02      	cbnz	r2, 8007732 <_dtoa_r+0xa62>
 80076f0:	4601      	mov	r1, r0
 80076f2:	ee18 0a10 	vmov	r0, s16
 80076f6:	f000 fb75 	bl	8007de4 <__mcmp>
 80076fa:	4602      	mov	r2, r0
 80076fc:	4629      	mov	r1, r5
 80076fe:	4620      	mov	r0, r4
 8007700:	9207      	str	r2, [sp, #28]
 8007702:	f000 f92d 	bl	8007960 <_Bfree>
 8007706:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800770a:	ea43 0102 	orr.w	r1, r3, r2
 800770e:	9b04      	ldr	r3, [sp, #16]
 8007710:	430b      	orrs	r3, r1
 8007712:	464d      	mov	r5, r9
 8007714:	d10f      	bne.n	8007736 <_dtoa_r+0xa66>
 8007716:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800771a:	d02a      	beq.n	8007772 <_dtoa_r+0xaa2>
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	dd02      	ble.n	8007728 <_dtoa_r+0xa58>
 8007722:	9b02      	ldr	r3, [sp, #8]
 8007724:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007728:	f88b a000 	strb.w	sl, [fp]
 800772c:	e775      	b.n	800761a <_dtoa_r+0x94a>
 800772e:	4638      	mov	r0, r7
 8007730:	e7ba      	b.n	80076a8 <_dtoa_r+0x9d8>
 8007732:	2201      	movs	r2, #1
 8007734:	e7e2      	b.n	80076fc <_dtoa_r+0xa2c>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	db04      	blt.n	8007746 <_dtoa_r+0xa76>
 800773c:	9906      	ldr	r1, [sp, #24]
 800773e:	430b      	orrs	r3, r1
 8007740:	9904      	ldr	r1, [sp, #16]
 8007742:	430b      	orrs	r3, r1
 8007744:	d122      	bne.n	800778c <_dtoa_r+0xabc>
 8007746:	2a00      	cmp	r2, #0
 8007748:	ddee      	ble.n	8007728 <_dtoa_r+0xa58>
 800774a:	ee18 1a10 	vmov	r1, s16
 800774e:	2201      	movs	r2, #1
 8007750:	4620      	mov	r0, r4
 8007752:	f000 fad7 	bl	8007d04 <__lshift>
 8007756:	4631      	mov	r1, r6
 8007758:	ee08 0a10 	vmov	s16, r0
 800775c:	f000 fb42 	bl	8007de4 <__mcmp>
 8007760:	2800      	cmp	r0, #0
 8007762:	dc03      	bgt.n	800776c <_dtoa_r+0xa9c>
 8007764:	d1e0      	bne.n	8007728 <_dtoa_r+0xa58>
 8007766:	f01a 0f01 	tst.w	sl, #1
 800776a:	d0dd      	beq.n	8007728 <_dtoa_r+0xa58>
 800776c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007770:	d1d7      	bne.n	8007722 <_dtoa_r+0xa52>
 8007772:	2339      	movs	r3, #57	; 0x39
 8007774:	f88b 3000 	strb.w	r3, [fp]
 8007778:	462b      	mov	r3, r5
 800777a:	461d      	mov	r5, r3
 800777c:	3b01      	subs	r3, #1
 800777e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007782:	2a39      	cmp	r2, #57	; 0x39
 8007784:	d071      	beq.n	800786a <_dtoa_r+0xb9a>
 8007786:	3201      	adds	r2, #1
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	e746      	b.n	800761a <_dtoa_r+0x94a>
 800778c:	2a00      	cmp	r2, #0
 800778e:	dd07      	ble.n	80077a0 <_dtoa_r+0xad0>
 8007790:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007794:	d0ed      	beq.n	8007772 <_dtoa_r+0xaa2>
 8007796:	f10a 0301 	add.w	r3, sl, #1
 800779a:	f88b 3000 	strb.w	r3, [fp]
 800779e:	e73c      	b.n	800761a <_dtoa_r+0x94a>
 80077a0:	9b05      	ldr	r3, [sp, #20]
 80077a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80077a6:	4599      	cmp	r9, r3
 80077a8:	d047      	beq.n	800783a <_dtoa_r+0xb6a>
 80077aa:	ee18 1a10 	vmov	r1, s16
 80077ae:	2300      	movs	r3, #0
 80077b0:	220a      	movs	r2, #10
 80077b2:	4620      	mov	r0, r4
 80077b4:	f000 f8f6 	bl	80079a4 <__multadd>
 80077b8:	45b8      	cmp	r8, r7
 80077ba:	ee08 0a10 	vmov	s16, r0
 80077be:	f04f 0300 	mov.w	r3, #0
 80077c2:	f04f 020a 	mov.w	r2, #10
 80077c6:	4641      	mov	r1, r8
 80077c8:	4620      	mov	r0, r4
 80077ca:	d106      	bne.n	80077da <_dtoa_r+0xb0a>
 80077cc:	f000 f8ea 	bl	80079a4 <__multadd>
 80077d0:	4680      	mov	r8, r0
 80077d2:	4607      	mov	r7, r0
 80077d4:	f109 0901 	add.w	r9, r9, #1
 80077d8:	e772      	b.n	80076c0 <_dtoa_r+0x9f0>
 80077da:	f000 f8e3 	bl	80079a4 <__multadd>
 80077de:	4639      	mov	r1, r7
 80077e0:	4680      	mov	r8, r0
 80077e2:	2300      	movs	r3, #0
 80077e4:	220a      	movs	r2, #10
 80077e6:	4620      	mov	r0, r4
 80077e8:	f000 f8dc 	bl	80079a4 <__multadd>
 80077ec:	4607      	mov	r7, r0
 80077ee:	e7f1      	b.n	80077d4 <_dtoa_r+0xb04>
 80077f0:	9b03      	ldr	r3, [sp, #12]
 80077f2:	9302      	str	r3, [sp, #8]
 80077f4:	9d01      	ldr	r5, [sp, #4]
 80077f6:	ee18 0a10 	vmov	r0, s16
 80077fa:	4631      	mov	r1, r6
 80077fc:	f7ff f9da 	bl	8006bb4 <quorem>
 8007800:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007804:	9b01      	ldr	r3, [sp, #4]
 8007806:	f805 ab01 	strb.w	sl, [r5], #1
 800780a:	1aea      	subs	r2, r5, r3
 800780c:	9b02      	ldr	r3, [sp, #8]
 800780e:	4293      	cmp	r3, r2
 8007810:	dd09      	ble.n	8007826 <_dtoa_r+0xb56>
 8007812:	ee18 1a10 	vmov	r1, s16
 8007816:	2300      	movs	r3, #0
 8007818:	220a      	movs	r2, #10
 800781a:	4620      	mov	r0, r4
 800781c:	f000 f8c2 	bl	80079a4 <__multadd>
 8007820:	ee08 0a10 	vmov	s16, r0
 8007824:	e7e7      	b.n	80077f6 <_dtoa_r+0xb26>
 8007826:	9b02      	ldr	r3, [sp, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	bfc8      	it	gt
 800782c:	461d      	movgt	r5, r3
 800782e:	9b01      	ldr	r3, [sp, #4]
 8007830:	bfd8      	it	le
 8007832:	2501      	movle	r5, #1
 8007834:	441d      	add	r5, r3
 8007836:	f04f 0800 	mov.w	r8, #0
 800783a:	ee18 1a10 	vmov	r1, s16
 800783e:	2201      	movs	r2, #1
 8007840:	4620      	mov	r0, r4
 8007842:	f000 fa5f 	bl	8007d04 <__lshift>
 8007846:	4631      	mov	r1, r6
 8007848:	ee08 0a10 	vmov	s16, r0
 800784c:	f000 faca 	bl	8007de4 <__mcmp>
 8007850:	2800      	cmp	r0, #0
 8007852:	dc91      	bgt.n	8007778 <_dtoa_r+0xaa8>
 8007854:	d102      	bne.n	800785c <_dtoa_r+0xb8c>
 8007856:	f01a 0f01 	tst.w	sl, #1
 800785a:	d18d      	bne.n	8007778 <_dtoa_r+0xaa8>
 800785c:	462b      	mov	r3, r5
 800785e:	461d      	mov	r5, r3
 8007860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007864:	2a30      	cmp	r2, #48	; 0x30
 8007866:	d0fa      	beq.n	800785e <_dtoa_r+0xb8e>
 8007868:	e6d7      	b.n	800761a <_dtoa_r+0x94a>
 800786a:	9a01      	ldr	r2, [sp, #4]
 800786c:	429a      	cmp	r2, r3
 800786e:	d184      	bne.n	800777a <_dtoa_r+0xaaa>
 8007870:	9b00      	ldr	r3, [sp, #0]
 8007872:	3301      	adds	r3, #1
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	2331      	movs	r3, #49	; 0x31
 8007878:	7013      	strb	r3, [r2, #0]
 800787a:	e6ce      	b.n	800761a <_dtoa_r+0x94a>
 800787c:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <_dtoa_r+0xbd4>)
 800787e:	f7ff ba95 	b.w	8006dac <_dtoa_r+0xdc>
 8007882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007884:	2b00      	cmp	r3, #0
 8007886:	f47f aa6e 	bne.w	8006d66 <_dtoa_r+0x96>
 800788a:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <_dtoa_r+0xbd8>)
 800788c:	f7ff ba8e 	b.w	8006dac <_dtoa_r+0xdc>
 8007890:	9b02      	ldr	r3, [sp, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	dcae      	bgt.n	80077f4 <_dtoa_r+0xb24>
 8007896:	9b06      	ldr	r3, [sp, #24]
 8007898:	2b02      	cmp	r3, #2
 800789a:	f73f aea8 	bgt.w	80075ee <_dtoa_r+0x91e>
 800789e:	e7a9      	b.n	80077f4 <_dtoa_r+0xb24>
 80078a0:	080091f7 	.word	0x080091f7
 80078a4:	08009154 	.word	0x08009154
 80078a8:	08009178 	.word	0x08009178

080078ac <_localeconv_r>:
 80078ac:	4800      	ldr	r0, [pc, #0]	; (80078b0 <_localeconv_r+0x4>)
 80078ae:	4770      	bx	lr
 80078b0:	20000160 	.word	0x20000160

080078b4 <malloc>:
 80078b4:	4b02      	ldr	r3, [pc, #8]	; (80078c0 <malloc+0xc>)
 80078b6:	4601      	mov	r1, r0
 80078b8:	6818      	ldr	r0, [r3, #0]
 80078ba:	f000 bc17 	b.w	80080ec <_malloc_r>
 80078be:	bf00      	nop
 80078c0:	2000000c 	.word	0x2000000c

080078c4 <memcpy>:
 80078c4:	440a      	add	r2, r1
 80078c6:	4291      	cmp	r1, r2
 80078c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078cc:	d100      	bne.n	80078d0 <memcpy+0xc>
 80078ce:	4770      	bx	lr
 80078d0:	b510      	push	{r4, lr}
 80078d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078da:	4291      	cmp	r1, r2
 80078dc:	d1f9      	bne.n	80078d2 <memcpy+0xe>
 80078de:	bd10      	pop	{r4, pc}

080078e0 <_Balloc>:
 80078e0:	b570      	push	{r4, r5, r6, lr}
 80078e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078e4:	4604      	mov	r4, r0
 80078e6:	460d      	mov	r5, r1
 80078e8:	b976      	cbnz	r6, 8007908 <_Balloc+0x28>
 80078ea:	2010      	movs	r0, #16
 80078ec:	f7ff ffe2 	bl	80078b4 <malloc>
 80078f0:	4602      	mov	r2, r0
 80078f2:	6260      	str	r0, [r4, #36]	; 0x24
 80078f4:	b920      	cbnz	r0, 8007900 <_Balloc+0x20>
 80078f6:	4b18      	ldr	r3, [pc, #96]	; (8007958 <_Balloc+0x78>)
 80078f8:	4818      	ldr	r0, [pc, #96]	; (800795c <_Balloc+0x7c>)
 80078fa:	2166      	movs	r1, #102	; 0x66
 80078fc:	f000 fdd6 	bl	80084ac <__assert_func>
 8007900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007904:	6006      	str	r6, [r0, #0]
 8007906:	60c6      	str	r6, [r0, #12]
 8007908:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800790a:	68f3      	ldr	r3, [r6, #12]
 800790c:	b183      	cbz	r3, 8007930 <_Balloc+0x50>
 800790e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007916:	b9b8      	cbnz	r0, 8007948 <_Balloc+0x68>
 8007918:	2101      	movs	r1, #1
 800791a:	fa01 f605 	lsl.w	r6, r1, r5
 800791e:	1d72      	adds	r2, r6, #5
 8007920:	0092      	lsls	r2, r2, #2
 8007922:	4620      	mov	r0, r4
 8007924:	f000 fb60 	bl	8007fe8 <_calloc_r>
 8007928:	b160      	cbz	r0, 8007944 <_Balloc+0x64>
 800792a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800792e:	e00e      	b.n	800794e <_Balloc+0x6e>
 8007930:	2221      	movs	r2, #33	; 0x21
 8007932:	2104      	movs	r1, #4
 8007934:	4620      	mov	r0, r4
 8007936:	f000 fb57 	bl	8007fe8 <_calloc_r>
 800793a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800793c:	60f0      	str	r0, [r6, #12]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e4      	bne.n	800790e <_Balloc+0x2e>
 8007944:	2000      	movs	r0, #0
 8007946:	bd70      	pop	{r4, r5, r6, pc}
 8007948:	6802      	ldr	r2, [r0, #0]
 800794a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800794e:	2300      	movs	r3, #0
 8007950:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007954:	e7f7      	b.n	8007946 <_Balloc+0x66>
 8007956:	bf00      	nop
 8007958:	08009185 	.word	0x08009185
 800795c:	08009208 	.word	0x08009208

08007960 <_Bfree>:
 8007960:	b570      	push	{r4, r5, r6, lr}
 8007962:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007964:	4605      	mov	r5, r0
 8007966:	460c      	mov	r4, r1
 8007968:	b976      	cbnz	r6, 8007988 <_Bfree+0x28>
 800796a:	2010      	movs	r0, #16
 800796c:	f7ff ffa2 	bl	80078b4 <malloc>
 8007970:	4602      	mov	r2, r0
 8007972:	6268      	str	r0, [r5, #36]	; 0x24
 8007974:	b920      	cbnz	r0, 8007980 <_Bfree+0x20>
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <_Bfree+0x3c>)
 8007978:	4809      	ldr	r0, [pc, #36]	; (80079a0 <_Bfree+0x40>)
 800797a:	218a      	movs	r1, #138	; 0x8a
 800797c:	f000 fd96 	bl	80084ac <__assert_func>
 8007980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007984:	6006      	str	r6, [r0, #0]
 8007986:	60c6      	str	r6, [r0, #12]
 8007988:	b13c      	cbz	r4, 800799a <_Bfree+0x3a>
 800798a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800798c:	6862      	ldr	r2, [r4, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007994:	6021      	str	r1, [r4, #0]
 8007996:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	08009185 	.word	0x08009185
 80079a0:	08009208 	.word	0x08009208

080079a4 <__multadd>:
 80079a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a8:	690d      	ldr	r5, [r1, #16]
 80079aa:	4607      	mov	r7, r0
 80079ac:	460c      	mov	r4, r1
 80079ae:	461e      	mov	r6, r3
 80079b0:	f101 0c14 	add.w	ip, r1, #20
 80079b4:	2000      	movs	r0, #0
 80079b6:	f8dc 3000 	ldr.w	r3, [ip]
 80079ba:	b299      	uxth	r1, r3
 80079bc:	fb02 6101 	mla	r1, r2, r1, r6
 80079c0:	0c1e      	lsrs	r6, r3, #16
 80079c2:	0c0b      	lsrs	r3, r1, #16
 80079c4:	fb02 3306 	mla	r3, r2, r6, r3
 80079c8:	b289      	uxth	r1, r1
 80079ca:	3001      	adds	r0, #1
 80079cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079d0:	4285      	cmp	r5, r0
 80079d2:	f84c 1b04 	str.w	r1, [ip], #4
 80079d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079da:	dcec      	bgt.n	80079b6 <__multadd+0x12>
 80079dc:	b30e      	cbz	r6, 8007a22 <__multadd+0x7e>
 80079de:	68a3      	ldr	r3, [r4, #8]
 80079e0:	42ab      	cmp	r3, r5
 80079e2:	dc19      	bgt.n	8007a18 <__multadd+0x74>
 80079e4:	6861      	ldr	r1, [r4, #4]
 80079e6:	4638      	mov	r0, r7
 80079e8:	3101      	adds	r1, #1
 80079ea:	f7ff ff79 	bl	80078e0 <_Balloc>
 80079ee:	4680      	mov	r8, r0
 80079f0:	b928      	cbnz	r0, 80079fe <__multadd+0x5a>
 80079f2:	4602      	mov	r2, r0
 80079f4:	4b0c      	ldr	r3, [pc, #48]	; (8007a28 <__multadd+0x84>)
 80079f6:	480d      	ldr	r0, [pc, #52]	; (8007a2c <__multadd+0x88>)
 80079f8:	21b5      	movs	r1, #181	; 0xb5
 80079fa:	f000 fd57 	bl	80084ac <__assert_func>
 80079fe:	6922      	ldr	r2, [r4, #16]
 8007a00:	3202      	adds	r2, #2
 8007a02:	f104 010c 	add.w	r1, r4, #12
 8007a06:	0092      	lsls	r2, r2, #2
 8007a08:	300c      	adds	r0, #12
 8007a0a:	f7ff ff5b 	bl	80078c4 <memcpy>
 8007a0e:	4621      	mov	r1, r4
 8007a10:	4638      	mov	r0, r7
 8007a12:	f7ff ffa5 	bl	8007960 <_Bfree>
 8007a16:	4644      	mov	r4, r8
 8007a18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a1c:	3501      	adds	r5, #1
 8007a1e:	615e      	str	r6, [r3, #20]
 8007a20:	6125      	str	r5, [r4, #16]
 8007a22:	4620      	mov	r0, r4
 8007a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a28:	080091f7 	.word	0x080091f7
 8007a2c:	08009208 	.word	0x08009208

08007a30 <__hi0bits>:
 8007a30:	0c03      	lsrs	r3, r0, #16
 8007a32:	041b      	lsls	r3, r3, #16
 8007a34:	b9d3      	cbnz	r3, 8007a6c <__hi0bits+0x3c>
 8007a36:	0400      	lsls	r0, r0, #16
 8007a38:	2310      	movs	r3, #16
 8007a3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a3e:	bf04      	itt	eq
 8007a40:	0200      	lsleq	r0, r0, #8
 8007a42:	3308      	addeq	r3, #8
 8007a44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a48:	bf04      	itt	eq
 8007a4a:	0100      	lsleq	r0, r0, #4
 8007a4c:	3304      	addeq	r3, #4
 8007a4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a52:	bf04      	itt	eq
 8007a54:	0080      	lsleq	r0, r0, #2
 8007a56:	3302      	addeq	r3, #2
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	db05      	blt.n	8007a68 <__hi0bits+0x38>
 8007a5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a60:	f103 0301 	add.w	r3, r3, #1
 8007a64:	bf08      	it	eq
 8007a66:	2320      	moveq	r3, #32
 8007a68:	4618      	mov	r0, r3
 8007a6a:	4770      	bx	lr
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e7e4      	b.n	8007a3a <__hi0bits+0xa>

08007a70 <__lo0bits>:
 8007a70:	6803      	ldr	r3, [r0, #0]
 8007a72:	f013 0207 	ands.w	r2, r3, #7
 8007a76:	4601      	mov	r1, r0
 8007a78:	d00b      	beq.n	8007a92 <__lo0bits+0x22>
 8007a7a:	07da      	lsls	r2, r3, #31
 8007a7c:	d423      	bmi.n	8007ac6 <__lo0bits+0x56>
 8007a7e:	0798      	lsls	r0, r3, #30
 8007a80:	bf49      	itett	mi
 8007a82:	085b      	lsrmi	r3, r3, #1
 8007a84:	089b      	lsrpl	r3, r3, #2
 8007a86:	2001      	movmi	r0, #1
 8007a88:	600b      	strmi	r3, [r1, #0]
 8007a8a:	bf5c      	itt	pl
 8007a8c:	600b      	strpl	r3, [r1, #0]
 8007a8e:	2002      	movpl	r0, #2
 8007a90:	4770      	bx	lr
 8007a92:	b298      	uxth	r0, r3
 8007a94:	b9a8      	cbnz	r0, 8007ac2 <__lo0bits+0x52>
 8007a96:	0c1b      	lsrs	r3, r3, #16
 8007a98:	2010      	movs	r0, #16
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	b90a      	cbnz	r2, 8007aa2 <__lo0bits+0x32>
 8007a9e:	3008      	adds	r0, #8
 8007aa0:	0a1b      	lsrs	r3, r3, #8
 8007aa2:	071a      	lsls	r2, r3, #28
 8007aa4:	bf04      	itt	eq
 8007aa6:	091b      	lsreq	r3, r3, #4
 8007aa8:	3004      	addeq	r0, #4
 8007aaa:	079a      	lsls	r2, r3, #30
 8007aac:	bf04      	itt	eq
 8007aae:	089b      	lsreq	r3, r3, #2
 8007ab0:	3002      	addeq	r0, #2
 8007ab2:	07da      	lsls	r2, r3, #31
 8007ab4:	d403      	bmi.n	8007abe <__lo0bits+0x4e>
 8007ab6:	085b      	lsrs	r3, r3, #1
 8007ab8:	f100 0001 	add.w	r0, r0, #1
 8007abc:	d005      	beq.n	8007aca <__lo0bits+0x5a>
 8007abe:	600b      	str	r3, [r1, #0]
 8007ac0:	4770      	bx	lr
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	e7e9      	b.n	8007a9a <__lo0bits+0x2a>
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	4770      	bx	lr
 8007aca:	2020      	movs	r0, #32
 8007acc:	4770      	bx	lr
	...

08007ad0 <__i2b>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	f7ff ff03 	bl	80078e0 <_Balloc>
 8007ada:	4602      	mov	r2, r0
 8007adc:	b928      	cbnz	r0, 8007aea <__i2b+0x1a>
 8007ade:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <__i2b+0x24>)
 8007ae0:	4805      	ldr	r0, [pc, #20]	; (8007af8 <__i2b+0x28>)
 8007ae2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ae6:	f000 fce1 	bl	80084ac <__assert_func>
 8007aea:	2301      	movs	r3, #1
 8007aec:	6144      	str	r4, [r0, #20]
 8007aee:	6103      	str	r3, [r0, #16]
 8007af0:	bd10      	pop	{r4, pc}
 8007af2:	bf00      	nop
 8007af4:	080091f7 	.word	0x080091f7
 8007af8:	08009208 	.word	0x08009208

08007afc <__multiply>:
 8007afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b00:	4691      	mov	r9, r2
 8007b02:	690a      	ldr	r2, [r1, #16]
 8007b04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	bfb8      	it	lt
 8007b0c:	460b      	movlt	r3, r1
 8007b0e:	460c      	mov	r4, r1
 8007b10:	bfbc      	itt	lt
 8007b12:	464c      	movlt	r4, r9
 8007b14:	4699      	movlt	r9, r3
 8007b16:	6927      	ldr	r7, [r4, #16]
 8007b18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b1c:	68a3      	ldr	r3, [r4, #8]
 8007b1e:	6861      	ldr	r1, [r4, #4]
 8007b20:	eb07 060a 	add.w	r6, r7, sl
 8007b24:	42b3      	cmp	r3, r6
 8007b26:	b085      	sub	sp, #20
 8007b28:	bfb8      	it	lt
 8007b2a:	3101      	addlt	r1, #1
 8007b2c:	f7ff fed8 	bl	80078e0 <_Balloc>
 8007b30:	b930      	cbnz	r0, 8007b40 <__multiply+0x44>
 8007b32:	4602      	mov	r2, r0
 8007b34:	4b44      	ldr	r3, [pc, #272]	; (8007c48 <__multiply+0x14c>)
 8007b36:	4845      	ldr	r0, [pc, #276]	; (8007c4c <__multiply+0x150>)
 8007b38:	f240 115d 	movw	r1, #349	; 0x15d
 8007b3c:	f000 fcb6 	bl	80084ac <__assert_func>
 8007b40:	f100 0514 	add.w	r5, r0, #20
 8007b44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b48:	462b      	mov	r3, r5
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	4543      	cmp	r3, r8
 8007b4e:	d321      	bcc.n	8007b94 <__multiply+0x98>
 8007b50:	f104 0314 	add.w	r3, r4, #20
 8007b54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b58:	f109 0314 	add.w	r3, r9, #20
 8007b5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b60:	9202      	str	r2, [sp, #8]
 8007b62:	1b3a      	subs	r2, r7, r4
 8007b64:	3a15      	subs	r2, #21
 8007b66:	f022 0203 	bic.w	r2, r2, #3
 8007b6a:	3204      	adds	r2, #4
 8007b6c:	f104 0115 	add.w	r1, r4, #21
 8007b70:	428f      	cmp	r7, r1
 8007b72:	bf38      	it	cc
 8007b74:	2204      	movcc	r2, #4
 8007b76:	9201      	str	r2, [sp, #4]
 8007b78:	9a02      	ldr	r2, [sp, #8]
 8007b7a:	9303      	str	r3, [sp, #12]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d80c      	bhi.n	8007b9a <__multiply+0x9e>
 8007b80:	2e00      	cmp	r6, #0
 8007b82:	dd03      	ble.n	8007b8c <__multiply+0x90>
 8007b84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d05a      	beq.n	8007c42 <__multiply+0x146>
 8007b8c:	6106      	str	r6, [r0, #16]
 8007b8e:	b005      	add	sp, #20
 8007b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b94:	f843 2b04 	str.w	r2, [r3], #4
 8007b98:	e7d8      	b.n	8007b4c <__multiply+0x50>
 8007b9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b9e:	f1ba 0f00 	cmp.w	sl, #0
 8007ba2:	d024      	beq.n	8007bee <__multiply+0xf2>
 8007ba4:	f104 0e14 	add.w	lr, r4, #20
 8007ba8:	46a9      	mov	r9, r5
 8007baa:	f04f 0c00 	mov.w	ip, #0
 8007bae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007bb2:	f8d9 1000 	ldr.w	r1, [r9]
 8007bb6:	fa1f fb82 	uxth.w	fp, r2
 8007bba:	b289      	uxth	r1, r1
 8007bbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007bc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007bc4:	f8d9 2000 	ldr.w	r2, [r9]
 8007bc8:	4461      	add	r1, ip
 8007bca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007bce:	fb0a c20b 	mla	r2, sl, fp, ip
 8007bd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007bd6:	b289      	uxth	r1, r1
 8007bd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007bdc:	4577      	cmp	r7, lr
 8007bde:	f849 1b04 	str.w	r1, [r9], #4
 8007be2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007be6:	d8e2      	bhi.n	8007bae <__multiply+0xb2>
 8007be8:	9a01      	ldr	r2, [sp, #4]
 8007bea:	f845 c002 	str.w	ip, [r5, r2]
 8007bee:	9a03      	ldr	r2, [sp, #12]
 8007bf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	f1b9 0f00 	cmp.w	r9, #0
 8007bfa:	d020      	beq.n	8007c3e <__multiply+0x142>
 8007bfc:	6829      	ldr	r1, [r5, #0]
 8007bfe:	f104 0c14 	add.w	ip, r4, #20
 8007c02:	46ae      	mov	lr, r5
 8007c04:	f04f 0a00 	mov.w	sl, #0
 8007c08:	f8bc b000 	ldrh.w	fp, [ip]
 8007c0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c10:	fb09 220b 	mla	r2, r9, fp, r2
 8007c14:	4492      	add	sl, r2
 8007c16:	b289      	uxth	r1, r1
 8007c18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007c1c:	f84e 1b04 	str.w	r1, [lr], #4
 8007c20:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c24:	f8be 1000 	ldrh.w	r1, [lr]
 8007c28:	0c12      	lsrs	r2, r2, #16
 8007c2a:	fb09 1102 	mla	r1, r9, r2, r1
 8007c2e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007c32:	4567      	cmp	r7, ip
 8007c34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c38:	d8e6      	bhi.n	8007c08 <__multiply+0x10c>
 8007c3a:	9a01      	ldr	r2, [sp, #4]
 8007c3c:	50a9      	str	r1, [r5, r2]
 8007c3e:	3504      	adds	r5, #4
 8007c40:	e79a      	b.n	8007b78 <__multiply+0x7c>
 8007c42:	3e01      	subs	r6, #1
 8007c44:	e79c      	b.n	8007b80 <__multiply+0x84>
 8007c46:	bf00      	nop
 8007c48:	080091f7 	.word	0x080091f7
 8007c4c:	08009208 	.word	0x08009208

08007c50 <__pow5mult>:
 8007c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c54:	4615      	mov	r5, r2
 8007c56:	f012 0203 	ands.w	r2, r2, #3
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	460f      	mov	r7, r1
 8007c5e:	d007      	beq.n	8007c70 <__pow5mult+0x20>
 8007c60:	4c25      	ldr	r4, [pc, #148]	; (8007cf8 <__pow5mult+0xa8>)
 8007c62:	3a01      	subs	r2, #1
 8007c64:	2300      	movs	r3, #0
 8007c66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c6a:	f7ff fe9b 	bl	80079a4 <__multadd>
 8007c6e:	4607      	mov	r7, r0
 8007c70:	10ad      	asrs	r5, r5, #2
 8007c72:	d03d      	beq.n	8007cf0 <__pow5mult+0xa0>
 8007c74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c76:	b97c      	cbnz	r4, 8007c98 <__pow5mult+0x48>
 8007c78:	2010      	movs	r0, #16
 8007c7a:	f7ff fe1b 	bl	80078b4 <malloc>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	6270      	str	r0, [r6, #36]	; 0x24
 8007c82:	b928      	cbnz	r0, 8007c90 <__pow5mult+0x40>
 8007c84:	4b1d      	ldr	r3, [pc, #116]	; (8007cfc <__pow5mult+0xac>)
 8007c86:	481e      	ldr	r0, [pc, #120]	; (8007d00 <__pow5mult+0xb0>)
 8007c88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c8c:	f000 fc0e 	bl	80084ac <__assert_func>
 8007c90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c94:	6004      	str	r4, [r0, #0]
 8007c96:	60c4      	str	r4, [r0, #12]
 8007c98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ca0:	b94c      	cbnz	r4, 8007cb6 <__pow5mult+0x66>
 8007ca2:	f240 2171 	movw	r1, #625	; 0x271
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f7ff ff12 	bl	8007ad0 <__i2b>
 8007cac:	2300      	movs	r3, #0
 8007cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	6003      	str	r3, [r0, #0]
 8007cb6:	f04f 0900 	mov.w	r9, #0
 8007cba:	07eb      	lsls	r3, r5, #31
 8007cbc:	d50a      	bpl.n	8007cd4 <__pow5mult+0x84>
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	4622      	mov	r2, r4
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f7ff ff1a 	bl	8007afc <__multiply>
 8007cc8:	4639      	mov	r1, r7
 8007cca:	4680      	mov	r8, r0
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7ff fe47 	bl	8007960 <_Bfree>
 8007cd2:	4647      	mov	r7, r8
 8007cd4:	106d      	asrs	r5, r5, #1
 8007cd6:	d00b      	beq.n	8007cf0 <__pow5mult+0xa0>
 8007cd8:	6820      	ldr	r0, [r4, #0]
 8007cda:	b938      	cbnz	r0, 8007cec <__pow5mult+0x9c>
 8007cdc:	4622      	mov	r2, r4
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f7ff ff0b 	bl	8007afc <__multiply>
 8007ce6:	6020      	str	r0, [r4, #0]
 8007ce8:	f8c0 9000 	str.w	r9, [r0]
 8007cec:	4604      	mov	r4, r0
 8007cee:	e7e4      	b.n	8007cba <__pow5mult+0x6a>
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cf6:	bf00      	nop
 8007cf8:	08009358 	.word	0x08009358
 8007cfc:	08009185 	.word	0x08009185
 8007d00:	08009208 	.word	0x08009208

08007d04 <__lshift>:
 8007d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d08:	460c      	mov	r4, r1
 8007d0a:	6849      	ldr	r1, [r1, #4]
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d12:	68a3      	ldr	r3, [r4, #8]
 8007d14:	4607      	mov	r7, r0
 8007d16:	4691      	mov	r9, r2
 8007d18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d1c:	f108 0601 	add.w	r6, r8, #1
 8007d20:	42b3      	cmp	r3, r6
 8007d22:	db0b      	blt.n	8007d3c <__lshift+0x38>
 8007d24:	4638      	mov	r0, r7
 8007d26:	f7ff fddb 	bl	80078e0 <_Balloc>
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	b948      	cbnz	r0, 8007d42 <__lshift+0x3e>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	4b2a      	ldr	r3, [pc, #168]	; (8007ddc <__lshift+0xd8>)
 8007d32:	482b      	ldr	r0, [pc, #172]	; (8007de0 <__lshift+0xdc>)
 8007d34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d38:	f000 fbb8 	bl	80084ac <__assert_func>
 8007d3c:	3101      	adds	r1, #1
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	e7ee      	b.n	8007d20 <__lshift+0x1c>
 8007d42:	2300      	movs	r3, #0
 8007d44:	f100 0114 	add.w	r1, r0, #20
 8007d48:	f100 0210 	add.w	r2, r0, #16
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	4553      	cmp	r3, sl
 8007d50:	db37      	blt.n	8007dc2 <__lshift+0xbe>
 8007d52:	6920      	ldr	r0, [r4, #16]
 8007d54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d58:	f104 0314 	add.w	r3, r4, #20
 8007d5c:	f019 091f 	ands.w	r9, r9, #31
 8007d60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007d68:	d02f      	beq.n	8007dca <__lshift+0xc6>
 8007d6a:	f1c9 0e20 	rsb	lr, r9, #32
 8007d6e:	468a      	mov	sl, r1
 8007d70:	f04f 0c00 	mov.w	ip, #0
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	fa02 f209 	lsl.w	r2, r2, r9
 8007d7a:	ea42 020c 	orr.w	r2, r2, ip
 8007d7e:	f84a 2b04 	str.w	r2, [sl], #4
 8007d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d86:	4298      	cmp	r0, r3
 8007d88:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007d8c:	d8f2      	bhi.n	8007d74 <__lshift+0x70>
 8007d8e:	1b03      	subs	r3, r0, r4
 8007d90:	3b15      	subs	r3, #21
 8007d92:	f023 0303 	bic.w	r3, r3, #3
 8007d96:	3304      	adds	r3, #4
 8007d98:	f104 0215 	add.w	r2, r4, #21
 8007d9c:	4290      	cmp	r0, r2
 8007d9e:	bf38      	it	cc
 8007da0:	2304      	movcc	r3, #4
 8007da2:	f841 c003 	str.w	ip, [r1, r3]
 8007da6:	f1bc 0f00 	cmp.w	ip, #0
 8007daa:	d001      	beq.n	8007db0 <__lshift+0xac>
 8007dac:	f108 0602 	add.w	r6, r8, #2
 8007db0:	3e01      	subs	r6, #1
 8007db2:	4638      	mov	r0, r7
 8007db4:	612e      	str	r6, [r5, #16]
 8007db6:	4621      	mov	r1, r4
 8007db8:	f7ff fdd2 	bl	8007960 <_Bfree>
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	e7c1      	b.n	8007d4e <__lshift+0x4a>
 8007dca:	3904      	subs	r1, #4
 8007dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dd4:	4298      	cmp	r0, r3
 8007dd6:	d8f9      	bhi.n	8007dcc <__lshift+0xc8>
 8007dd8:	e7ea      	b.n	8007db0 <__lshift+0xac>
 8007dda:	bf00      	nop
 8007ddc:	080091f7 	.word	0x080091f7
 8007de0:	08009208 	.word	0x08009208

08007de4 <__mcmp>:
 8007de4:	b530      	push	{r4, r5, lr}
 8007de6:	6902      	ldr	r2, [r0, #16]
 8007de8:	690c      	ldr	r4, [r1, #16]
 8007dea:	1b12      	subs	r2, r2, r4
 8007dec:	d10e      	bne.n	8007e0c <__mcmp+0x28>
 8007dee:	f100 0314 	add.w	r3, r0, #20
 8007df2:	3114      	adds	r1, #20
 8007df4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007df8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007dfc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e04:	42a5      	cmp	r5, r4
 8007e06:	d003      	beq.n	8007e10 <__mcmp+0x2c>
 8007e08:	d305      	bcc.n	8007e16 <__mcmp+0x32>
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	bd30      	pop	{r4, r5, pc}
 8007e10:	4283      	cmp	r3, r0
 8007e12:	d3f3      	bcc.n	8007dfc <__mcmp+0x18>
 8007e14:	e7fa      	b.n	8007e0c <__mcmp+0x28>
 8007e16:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1a:	e7f7      	b.n	8007e0c <__mcmp+0x28>

08007e1c <__mdiff>:
 8007e1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e20:	460c      	mov	r4, r1
 8007e22:	4606      	mov	r6, r0
 8007e24:	4611      	mov	r1, r2
 8007e26:	4620      	mov	r0, r4
 8007e28:	4690      	mov	r8, r2
 8007e2a:	f7ff ffdb 	bl	8007de4 <__mcmp>
 8007e2e:	1e05      	subs	r5, r0, #0
 8007e30:	d110      	bne.n	8007e54 <__mdiff+0x38>
 8007e32:	4629      	mov	r1, r5
 8007e34:	4630      	mov	r0, r6
 8007e36:	f7ff fd53 	bl	80078e0 <_Balloc>
 8007e3a:	b930      	cbnz	r0, 8007e4a <__mdiff+0x2e>
 8007e3c:	4b3a      	ldr	r3, [pc, #232]	; (8007f28 <__mdiff+0x10c>)
 8007e3e:	4602      	mov	r2, r0
 8007e40:	f240 2132 	movw	r1, #562	; 0x232
 8007e44:	4839      	ldr	r0, [pc, #228]	; (8007f2c <__mdiff+0x110>)
 8007e46:	f000 fb31 	bl	80084ac <__assert_func>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e54:	bfa4      	itt	ge
 8007e56:	4643      	movge	r3, r8
 8007e58:	46a0      	movge	r8, r4
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e60:	bfa6      	itte	ge
 8007e62:	461c      	movge	r4, r3
 8007e64:	2500      	movge	r5, #0
 8007e66:	2501      	movlt	r5, #1
 8007e68:	f7ff fd3a 	bl	80078e0 <_Balloc>
 8007e6c:	b920      	cbnz	r0, 8007e78 <__mdiff+0x5c>
 8007e6e:	4b2e      	ldr	r3, [pc, #184]	; (8007f28 <__mdiff+0x10c>)
 8007e70:	4602      	mov	r2, r0
 8007e72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e76:	e7e5      	b.n	8007e44 <__mdiff+0x28>
 8007e78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e7c:	6926      	ldr	r6, [r4, #16]
 8007e7e:	60c5      	str	r5, [r0, #12]
 8007e80:	f104 0914 	add.w	r9, r4, #20
 8007e84:	f108 0514 	add.w	r5, r8, #20
 8007e88:	f100 0e14 	add.w	lr, r0, #20
 8007e8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e94:	f108 0210 	add.w	r2, r8, #16
 8007e98:	46f2      	mov	sl, lr
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ea0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ea4:	fa1f f883 	uxth.w	r8, r3
 8007ea8:	fa11 f18b 	uxtah	r1, r1, fp
 8007eac:	0c1b      	lsrs	r3, r3, #16
 8007eae:	eba1 0808 	sub.w	r8, r1, r8
 8007eb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007eb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007eba:	fa1f f888 	uxth.w	r8, r8
 8007ebe:	1419      	asrs	r1, r3, #16
 8007ec0:	454e      	cmp	r6, r9
 8007ec2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ec6:	f84a 3b04 	str.w	r3, [sl], #4
 8007eca:	d8e7      	bhi.n	8007e9c <__mdiff+0x80>
 8007ecc:	1b33      	subs	r3, r6, r4
 8007ece:	3b15      	subs	r3, #21
 8007ed0:	f023 0303 	bic.w	r3, r3, #3
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	3415      	adds	r4, #21
 8007ed8:	42a6      	cmp	r6, r4
 8007eda:	bf38      	it	cc
 8007edc:	2304      	movcc	r3, #4
 8007ede:	441d      	add	r5, r3
 8007ee0:	4473      	add	r3, lr
 8007ee2:	469e      	mov	lr, r3
 8007ee4:	462e      	mov	r6, r5
 8007ee6:	4566      	cmp	r6, ip
 8007ee8:	d30e      	bcc.n	8007f08 <__mdiff+0xec>
 8007eea:	f10c 0203 	add.w	r2, ip, #3
 8007eee:	1b52      	subs	r2, r2, r5
 8007ef0:	f022 0203 	bic.w	r2, r2, #3
 8007ef4:	3d03      	subs	r5, #3
 8007ef6:	45ac      	cmp	ip, r5
 8007ef8:	bf38      	it	cc
 8007efa:	2200      	movcc	r2, #0
 8007efc:	441a      	add	r2, r3
 8007efe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f02:	b17b      	cbz	r3, 8007f24 <__mdiff+0x108>
 8007f04:	6107      	str	r7, [r0, #16]
 8007f06:	e7a3      	b.n	8007e50 <__mdiff+0x34>
 8007f08:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f0c:	fa11 f288 	uxtah	r2, r1, r8
 8007f10:	1414      	asrs	r4, r2, #16
 8007f12:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f16:	b292      	uxth	r2, r2
 8007f18:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f1c:	f84e 2b04 	str.w	r2, [lr], #4
 8007f20:	1421      	asrs	r1, r4, #16
 8007f22:	e7e0      	b.n	8007ee6 <__mdiff+0xca>
 8007f24:	3f01      	subs	r7, #1
 8007f26:	e7ea      	b.n	8007efe <__mdiff+0xe2>
 8007f28:	080091f7 	.word	0x080091f7
 8007f2c:	08009208 	.word	0x08009208

08007f30 <__d2b>:
 8007f30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f34:	4689      	mov	r9, r1
 8007f36:	2101      	movs	r1, #1
 8007f38:	ec57 6b10 	vmov	r6, r7, d0
 8007f3c:	4690      	mov	r8, r2
 8007f3e:	f7ff fccf 	bl	80078e0 <_Balloc>
 8007f42:	4604      	mov	r4, r0
 8007f44:	b930      	cbnz	r0, 8007f54 <__d2b+0x24>
 8007f46:	4602      	mov	r2, r0
 8007f48:	4b25      	ldr	r3, [pc, #148]	; (8007fe0 <__d2b+0xb0>)
 8007f4a:	4826      	ldr	r0, [pc, #152]	; (8007fe4 <__d2b+0xb4>)
 8007f4c:	f240 310a 	movw	r1, #778	; 0x30a
 8007f50:	f000 faac 	bl	80084ac <__assert_func>
 8007f54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007f58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f5c:	bb35      	cbnz	r5, 8007fac <__d2b+0x7c>
 8007f5e:	2e00      	cmp	r6, #0
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	d028      	beq.n	8007fb6 <__d2b+0x86>
 8007f64:	4668      	mov	r0, sp
 8007f66:	9600      	str	r6, [sp, #0]
 8007f68:	f7ff fd82 	bl	8007a70 <__lo0bits>
 8007f6c:	9900      	ldr	r1, [sp, #0]
 8007f6e:	b300      	cbz	r0, 8007fb2 <__d2b+0x82>
 8007f70:	9a01      	ldr	r2, [sp, #4]
 8007f72:	f1c0 0320 	rsb	r3, r0, #32
 8007f76:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7a:	430b      	orrs	r3, r1
 8007f7c:	40c2      	lsrs	r2, r0
 8007f7e:	6163      	str	r3, [r4, #20]
 8007f80:	9201      	str	r2, [sp, #4]
 8007f82:	9b01      	ldr	r3, [sp, #4]
 8007f84:	61a3      	str	r3, [r4, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	bf14      	ite	ne
 8007f8a:	2202      	movne	r2, #2
 8007f8c:	2201      	moveq	r2, #1
 8007f8e:	6122      	str	r2, [r4, #16]
 8007f90:	b1d5      	cbz	r5, 8007fc8 <__d2b+0x98>
 8007f92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f96:	4405      	add	r5, r0
 8007f98:	f8c9 5000 	str.w	r5, [r9]
 8007f9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fa0:	f8c8 0000 	str.w	r0, [r8]
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	b003      	add	sp, #12
 8007fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fb0:	e7d5      	b.n	8007f5e <__d2b+0x2e>
 8007fb2:	6161      	str	r1, [r4, #20]
 8007fb4:	e7e5      	b.n	8007f82 <__d2b+0x52>
 8007fb6:	a801      	add	r0, sp, #4
 8007fb8:	f7ff fd5a 	bl	8007a70 <__lo0bits>
 8007fbc:	9b01      	ldr	r3, [sp, #4]
 8007fbe:	6163      	str	r3, [r4, #20]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	6122      	str	r2, [r4, #16]
 8007fc4:	3020      	adds	r0, #32
 8007fc6:	e7e3      	b.n	8007f90 <__d2b+0x60>
 8007fc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007fd0:	f8c9 0000 	str.w	r0, [r9]
 8007fd4:	6918      	ldr	r0, [r3, #16]
 8007fd6:	f7ff fd2b 	bl	8007a30 <__hi0bits>
 8007fda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fde:	e7df      	b.n	8007fa0 <__d2b+0x70>
 8007fe0:	080091f7 	.word	0x080091f7
 8007fe4:	08009208 	.word	0x08009208

08007fe8 <_calloc_r>:
 8007fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fea:	fba1 2402 	umull	r2, r4, r1, r2
 8007fee:	b94c      	cbnz	r4, 8008004 <_calloc_r+0x1c>
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	9201      	str	r2, [sp, #4]
 8007ff4:	f000 f87a 	bl	80080ec <_malloc_r>
 8007ff8:	9a01      	ldr	r2, [sp, #4]
 8007ffa:	4605      	mov	r5, r0
 8007ffc:	b930      	cbnz	r0, 800800c <_calloc_r+0x24>
 8007ffe:	4628      	mov	r0, r5
 8008000:	b003      	add	sp, #12
 8008002:	bd30      	pop	{r4, r5, pc}
 8008004:	220c      	movs	r2, #12
 8008006:	6002      	str	r2, [r0, #0]
 8008008:	2500      	movs	r5, #0
 800800a:	e7f8      	b.n	8007ffe <_calloc_r+0x16>
 800800c:	4621      	mov	r1, r4
 800800e:	f7fe f93f 	bl	8006290 <memset>
 8008012:	e7f4      	b.n	8007ffe <_calloc_r+0x16>

08008014 <_free_r>:
 8008014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008016:	2900      	cmp	r1, #0
 8008018:	d044      	beq.n	80080a4 <_free_r+0x90>
 800801a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800801e:	9001      	str	r0, [sp, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f1a1 0404 	sub.w	r4, r1, #4
 8008026:	bfb8      	it	lt
 8008028:	18e4      	addlt	r4, r4, r3
 800802a:	f000 fa9b 	bl	8008564 <__malloc_lock>
 800802e:	4a1e      	ldr	r2, [pc, #120]	; (80080a8 <_free_r+0x94>)
 8008030:	9801      	ldr	r0, [sp, #4]
 8008032:	6813      	ldr	r3, [r2, #0]
 8008034:	b933      	cbnz	r3, 8008044 <_free_r+0x30>
 8008036:	6063      	str	r3, [r4, #4]
 8008038:	6014      	str	r4, [r2, #0]
 800803a:	b003      	add	sp, #12
 800803c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008040:	f000 ba96 	b.w	8008570 <__malloc_unlock>
 8008044:	42a3      	cmp	r3, r4
 8008046:	d908      	bls.n	800805a <_free_r+0x46>
 8008048:	6825      	ldr	r5, [r4, #0]
 800804a:	1961      	adds	r1, r4, r5
 800804c:	428b      	cmp	r3, r1
 800804e:	bf01      	itttt	eq
 8008050:	6819      	ldreq	r1, [r3, #0]
 8008052:	685b      	ldreq	r3, [r3, #4]
 8008054:	1949      	addeq	r1, r1, r5
 8008056:	6021      	streq	r1, [r4, #0]
 8008058:	e7ed      	b.n	8008036 <_free_r+0x22>
 800805a:	461a      	mov	r2, r3
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	b10b      	cbz	r3, 8008064 <_free_r+0x50>
 8008060:	42a3      	cmp	r3, r4
 8008062:	d9fa      	bls.n	800805a <_free_r+0x46>
 8008064:	6811      	ldr	r1, [r2, #0]
 8008066:	1855      	adds	r5, r2, r1
 8008068:	42a5      	cmp	r5, r4
 800806a:	d10b      	bne.n	8008084 <_free_r+0x70>
 800806c:	6824      	ldr	r4, [r4, #0]
 800806e:	4421      	add	r1, r4
 8008070:	1854      	adds	r4, r2, r1
 8008072:	42a3      	cmp	r3, r4
 8008074:	6011      	str	r1, [r2, #0]
 8008076:	d1e0      	bne.n	800803a <_free_r+0x26>
 8008078:	681c      	ldr	r4, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	6053      	str	r3, [r2, #4]
 800807e:	4421      	add	r1, r4
 8008080:	6011      	str	r1, [r2, #0]
 8008082:	e7da      	b.n	800803a <_free_r+0x26>
 8008084:	d902      	bls.n	800808c <_free_r+0x78>
 8008086:	230c      	movs	r3, #12
 8008088:	6003      	str	r3, [r0, #0]
 800808a:	e7d6      	b.n	800803a <_free_r+0x26>
 800808c:	6825      	ldr	r5, [r4, #0]
 800808e:	1961      	adds	r1, r4, r5
 8008090:	428b      	cmp	r3, r1
 8008092:	bf04      	itt	eq
 8008094:	6819      	ldreq	r1, [r3, #0]
 8008096:	685b      	ldreq	r3, [r3, #4]
 8008098:	6063      	str	r3, [r4, #4]
 800809a:	bf04      	itt	eq
 800809c:	1949      	addeq	r1, r1, r5
 800809e:	6021      	streq	r1, [r4, #0]
 80080a0:	6054      	str	r4, [r2, #4]
 80080a2:	e7ca      	b.n	800803a <_free_r+0x26>
 80080a4:	b003      	add	sp, #12
 80080a6:	bd30      	pop	{r4, r5, pc}
 80080a8:	20000340 	.word	0x20000340

080080ac <sbrk_aligned>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4e0e      	ldr	r6, [pc, #56]	; (80080e8 <sbrk_aligned+0x3c>)
 80080b0:	460c      	mov	r4, r1
 80080b2:	6831      	ldr	r1, [r6, #0]
 80080b4:	4605      	mov	r5, r0
 80080b6:	b911      	cbnz	r1, 80080be <sbrk_aligned+0x12>
 80080b8:	f000 f9e8 	bl	800848c <_sbrk_r>
 80080bc:	6030      	str	r0, [r6, #0]
 80080be:	4621      	mov	r1, r4
 80080c0:	4628      	mov	r0, r5
 80080c2:	f000 f9e3 	bl	800848c <_sbrk_r>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	d00a      	beq.n	80080e0 <sbrk_aligned+0x34>
 80080ca:	1cc4      	adds	r4, r0, #3
 80080cc:	f024 0403 	bic.w	r4, r4, #3
 80080d0:	42a0      	cmp	r0, r4
 80080d2:	d007      	beq.n	80080e4 <sbrk_aligned+0x38>
 80080d4:	1a21      	subs	r1, r4, r0
 80080d6:	4628      	mov	r0, r5
 80080d8:	f000 f9d8 	bl	800848c <_sbrk_r>
 80080dc:	3001      	adds	r0, #1
 80080de:	d101      	bne.n	80080e4 <sbrk_aligned+0x38>
 80080e0:	f04f 34ff 	mov.w	r4, #4294967295
 80080e4:	4620      	mov	r0, r4
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	20000344 	.word	0x20000344

080080ec <_malloc_r>:
 80080ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f0:	1ccd      	adds	r5, r1, #3
 80080f2:	f025 0503 	bic.w	r5, r5, #3
 80080f6:	3508      	adds	r5, #8
 80080f8:	2d0c      	cmp	r5, #12
 80080fa:	bf38      	it	cc
 80080fc:	250c      	movcc	r5, #12
 80080fe:	2d00      	cmp	r5, #0
 8008100:	4607      	mov	r7, r0
 8008102:	db01      	blt.n	8008108 <_malloc_r+0x1c>
 8008104:	42a9      	cmp	r1, r5
 8008106:	d905      	bls.n	8008114 <_malloc_r+0x28>
 8008108:	230c      	movs	r3, #12
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	2600      	movs	r6, #0
 800810e:	4630      	mov	r0, r6
 8008110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008114:	4e2e      	ldr	r6, [pc, #184]	; (80081d0 <_malloc_r+0xe4>)
 8008116:	f000 fa25 	bl	8008564 <__malloc_lock>
 800811a:	6833      	ldr	r3, [r6, #0]
 800811c:	461c      	mov	r4, r3
 800811e:	bb34      	cbnz	r4, 800816e <_malloc_r+0x82>
 8008120:	4629      	mov	r1, r5
 8008122:	4638      	mov	r0, r7
 8008124:	f7ff ffc2 	bl	80080ac <sbrk_aligned>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	4604      	mov	r4, r0
 800812c:	d14d      	bne.n	80081ca <_malloc_r+0xde>
 800812e:	6834      	ldr	r4, [r6, #0]
 8008130:	4626      	mov	r6, r4
 8008132:	2e00      	cmp	r6, #0
 8008134:	d140      	bne.n	80081b8 <_malloc_r+0xcc>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	4631      	mov	r1, r6
 800813a:	4638      	mov	r0, r7
 800813c:	eb04 0803 	add.w	r8, r4, r3
 8008140:	f000 f9a4 	bl	800848c <_sbrk_r>
 8008144:	4580      	cmp	r8, r0
 8008146:	d13a      	bne.n	80081be <_malloc_r+0xd2>
 8008148:	6821      	ldr	r1, [r4, #0]
 800814a:	3503      	adds	r5, #3
 800814c:	1a6d      	subs	r5, r5, r1
 800814e:	f025 0503 	bic.w	r5, r5, #3
 8008152:	3508      	adds	r5, #8
 8008154:	2d0c      	cmp	r5, #12
 8008156:	bf38      	it	cc
 8008158:	250c      	movcc	r5, #12
 800815a:	4629      	mov	r1, r5
 800815c:	4638      	mov	r0, r7
 800815e:	f7ff ffa5 	bl	80080ac <sbrk_aligned>
 8008162:	3001      	adds	r0, #1
 8008164:	d02b      	beq.n	80081be <_malloc_r+0xd2>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	442b      	add	r3, r5
 800816a:	6023      	str	r3, [r4, #0]
 800816c:	e00e      	b.n	800818c <_malloc_r+0xa0>
 800816e:	6822      	ldr	r2, [r4, #0]
 8008170:	1b52      	subs	r2, r2, r5
 8008172:	d41e      	bmi.n	80081b2 <_malloc_r+0xc6>
 8008174:	2a0b      	cmp	r2, #11
 8008176:	d916      	bls.n	80081a6 <_malloc_r+0xba>
 8008178:	1961      	adds	r1, r4, r5
 800817a:	42a3      	cmp	r3, r4
 800817c:	6025      	str	r5, [r4, #0]
 800817e:	bf18      	it	ne
 8008180:	6059      	strne	r1, [r3, #4]
 8008182:	6863      	ldr	r3, [r4, #4]
 8008184:	bf08      	it	eq
 8008186:	6031      	streq	r1, [r6, #0]
 8008188:	5162      	str	r2, [r4, r5]
 800818a:	604b      	str	r3, [r1, #4]
 800818c:	4638      	mov	r0, r7
 800818e:	f104 060b 	add.w	r6, r4, #11
 8008192:	f000 f9ed 	bl	8008570 <__malloc_unlock>
 8008196:	f026 0607 	bic.w	r6, r6, #7
 800819a:	1d23      	adds	r3, r4, #4
 800819c:	1af2      	subs	r2, r6, r3
 800819e:	d0b6      	beq.n	800810e <_malloc_r+0x22>
 80081a0:	1b9b      	subs	r3, r3, r6
 80081a2:	50a3      	str	r3, [r4, r2]
 80081a4:	e7b3      	b.n	800810e <_malloc_r+0x22>
 80081a6:	6862      	ldr	r2, [r4, #4]
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	bf0c      	ite	eq
 80081ac:	6032      	streq	r2, [r6, #0]
 80081ae:	605a      	strne	r2, [r3, #4]
 80081b0:	e7ec      	b.n	800818c <_malloc_r+0xa0>
 80081b2:	4623      	mov	r3, r4
 80081b4:	6864      	ldr	r4, [r4, #4]
 80081b6:	e7b2      	b.n	800811e <_malloc_r+0x32>
 80081b8:	4634      	mov	r4, r6
 80081ba:	6876      	ldr	r6, [r6, #4]
 80081bc:	e7b9      	b.n	8008132 <_malloc_r+0x46>
 80081be:	230c      	movs	r3, #12
 80081c0:	603b      	str	r3, [r7, #0]
 80081c2:	4638      	mov	r0, r7
 80081c4:	f000 f9d4 	bl	8008570 <__malloc_unlock>
 80081c8:	e7a1      	b.n	800810e <_malloc_r+0x22>
 80081ca:	6025      	str	r5, [r4, #0]
 80081cc:	e7de      	b.n	800818c <_malloc_r+0xa0>
 80081ce:	bf00      	nop
 80081d0:	20000340 	.word	0x20000340

080081d4 <__ssputs_r>:
 80081d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	688e      	ldr	r6, [r1, #8]
 80081da:	429e      	cmp	r6, r3
 80081dc:	4682      	mov	sl, r0
 80081de:	460c      	mov	r4, r1
 80081e0:	4690      	mov	r8, r2
 80081e2:	461f      	mov	r7, r3
 80081e4:	d838      	bhi.n	8008258 <__ssputs_r+0x84>
 80081e6:	898a      	ldrh	r2, [r1, #12]
 80081e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081ec:	d032      	beq.n	8008254 <__ssputs_r+0x80>
 80081ee:	6825      	ldr	r5, [r4, #0]
 80081f0:	6909      	ldr	r1, [r1, #16]
 80081f2:	eba5 0901 	sub.w	r9, r5, r1
 80081f6:	6965      	ldr	r5, [r4, #20]
 80081f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008200:	3301      	adds	r3, #1
 8008202:	444b      	add	r3, r9
 8008204:	106d      	asrs	r5, r5, #1
 8008206:	429d      	cmp	r5, r3
 8008208:	bf38      	it	cc
 800820a:	461d      	movcc	r5, r3
 800820c:	0553      	lsls	r3, r2, #21
 800820e:	d531      	bpl.n	8008274 <__ssputs_r+0xa0>
 8008210:	4629      	mov	r1, r5
 8008212:	f7ff ff6b 	bl	80080ec <_malloc_r>
 8008216:	4606      	mov	r6, r0
 8008218:	b950      	cbnz	r0, 8008230 <__ssputs_r+0x5c>
 800821a:	230c      	movs	r3, #12
 800821c:	f8ca 3000 	str.w	r3, [sl]
 8008220:	89a3      	ldrh	r3, [r4, #12]
 8008222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008226:	81a3      	strh	r3, [r4, #12]
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008230:	6921      	ldr	r1, [r4, #16]
 8008232:	464a      	mov	r2, r9
 8008234:	f7ff fb46 	bl	80078c4 <memcpy>
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800823e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008242:	81a3      	strh	r3, [r4, #12]
 8008244:	6126      	str	r6, [r4, #16]
 8008246:	6165      	str	r5, [r4, #20]
 8008248:	444e      	add	r6, r9
 800824a:	eba5 0509 	sub.w	r5, r5, r9
 800824e:	6026      	str	r6, [r4, #0]
 8008250:	60a5      	str	r5, [r4, #8]
 8008252:	463e      	mov	r6, r7
 8008254:	42be      	cmp	r6, r7
 8008256:	d900      	bls.n	800825a <__ssputs_r+0x86>
 8008258:	463e      	mov	r6, r7
 800825a:	6820      	ldr	r0, [r4, #0]
 800825c:	4632      	mov	r2, r6
 800825e:	4641      	mov	r1, r8
 8008260:	f000 f966 	bl	8008530 <memmove>
 8008264:	68a3      	ldr	r3, [r4, #8]
 8008266:	1b9b      	subs	r3, r3, r6
 8008268:	60a3      	str	r3, [r4, #8]
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	4433      	add	r3, r6
 800826e:	6023      	str	r3, [r4, #0]
 8008270:	2000      	movs	r0, #0
 8008272:	e7db      	b.n	800822c <__ssputs_r+0x58>
 8008274:	462a      	mov	r2, r5
 8008276:	f000 f981 	bl	800857c <_realloc_r>
 800827a:	4606      	mov	r6, r0
 800827c:	2800      	cmp	r0, #0
 800827e:	d1e1      	bne.n	8008244 <__ssputs_r+0x70>
 8008280:	6921      	ldr	r1, [r4, #16]
 8008282:	4650      	mov	r0, sl
 8008284:	f7ff fec6 	bl	8008014 <_free_r>
 8008288:	e7c7      	b.n	800821a <__ssputs_r+0x46>
	...

0800828c <_svfiprintf_r>:
 800828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	4698      	mov	r8, r3
 8008292:	898b      	ldrh	r3, [r1, #12]
 8008294:	061b      	lsls	r3, r3, #24
 8008296:	b09d      	sub	sp, #116	; 0x74
 8008298:	4607      	mov	r7, r0
 800829a:	460d      	mov	r5, r1
 800829c:	4614      	mov	r4, r2
 800829e:	d50e      	bpl.n	80082be <_svfiprintf_r+0x32>
 80082a0:	690b      	ldr	r3, [r1, #16]
 80082a2:	b963      	cbnz	r3, 80082be <_svfiprintf_r+0x32>
 80082a4:	2140      	movs	r1, #64	; 0x40
 80082a6:	f7ff ff21 	bl	80080ec <_malloc_r>
 80082aa:	6028      	str	r0, [r5, #0]
 80082ac:	6128      	str	r0, [r5, #16]
 80082ae:	b920      	cbnz	r0, 80082ba <_svfiprintf_r+0x2e>
 80082b0:	230c      	movs	r3, #12
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	f04f 30ff 	mov.w	r0, #4294967295
 80082b8:	e0d1      	b.n	800845e <_svfiprintf_r+0x1d2>
 80082ba:	2340      	movs	r3, #64	; 0x40
 80082bc:	616b      	str	r3, [r5, #20]
 80082be:	2300      	movs	r3, #0
 80082c0:	9309      	str	r3, [sp, #36]	; 0x24
 80082c2:	2320      	movs	r3, #32
 80082c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80082cc:	2330      	movs	r3, #48	; 0x30
 80082ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008478 <_svfiprintf_r+0x1ec>
 80082d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082d6:	f04f 0901 	mov.w	r9, #1
 80082da:	4623      	mov	r3, r4
 80082dc:	469a      	mov	sl, r3
 80082de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082e2:	b10a      	cbz	r2, 80082e8 <_svfiprintf_r+0x5c>
 80082e4:	2a25      	cmp	r2, #37	; 0x25
 80082e6:	d1f9      	bne.n	80082dc <_svfiprintf_r+0x50>
 80082e8:	ebba 0b04 	subs.w	fp, sl, r4
 80082ec:	d00b      	beq.n	8008306 <_svfiprintf_r+0x7a>
 80082ee:	465b      	mov	r3, fp
 80082f0:	4622      	mov	r2, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	4638      	mov	r0, r7
 80082f6:	f7ff ff6d 	bl	80081d4 <__ssputs_r>
 80082fa:	3001      	adds	r0, #1
 80082fc:	f000 80aa 	beq.w	8008454 <_svfiprintf_r+0x1c8>
 8008300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008302:	445a      	add	r2, fp
 8008304:	9209      	str	r2, [sp, #36]	; 0x24
 8008306:	f89a 3000 	ldrb.w	r3, [sl]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 80a2 	beq.w	8008454 <_svfiprintf_r+0x1c8>
 8008310:	2300      	movs	r3, #0
 8008312:	f04f 32ff 	mov.w	r2, #4294967295
 8008316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800831a:	f10a 0a01 	add.w	sl, sl, #1
 800831e:	9304      	str	r3, [sp, #16]
 8008320:	9307      	str	r3, [sp, #28]
 8008322:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008326:	931a      	str	r3, [sp, #104]	; 0x68
 8008328:	4654      	mov	r4, sl
 800832a:	2205      	movs	r2, #5
 800832c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008330:	4851      	ldr	r0, [pc, #324]	; (8008478 <_svfiprintf_r+0x1ec>)
 8008332:	f7f7 ff55 	bl	80001e0 <memchr>
 8008336:	9a04      	ldr	r2, [sp, #16]
 8008338:	b9d8      	cbnz	r0, 8008372 <_svfiprintf_r+0xe6>
 800833a:	06d0      	lsls	r0, r2, #27
 800833c:	bf44      	itt	mi
 800833e:	2320      	movmi	r3, #32
 8008340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008344:	0711      	lsls	r1, r2, #28
 8008346:	bf44      	itt	mi
 8008348:	232b      	movmi	r3, #43	; 0x2b
 800834a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800834e:	f89a 3000 	ldrb.w	r3, [sl]
 8008352:	2b2a      	cmp	r3, #42	; 0x2a
 8008354:	d015      	beq.n	8008382 <_svfiprintf_r+0xf6>
 8008356:	9a07      	ldr	r2, [sp, #28]
 8008358:	4654      	mov	r4, sl
 800835a:	2000      	movs	r0, #0
 800835c:	f04f 0c0a 	mov.w	ip, #10
 8008360:	4621      	mov	r1, r4
 8008362:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008366:	3b30      	subs	r3, #48	; 0x30
 8008368:	2b09      	cmp	r3, #9
 800836a:	d94e      	bls.n	800840a <_svfiprintf_r+0x17e>
 800836c:	b1b0      	cbz	r0, 800839c <_svfiprintf_r+0x110>
 800836e:	9207      	str	r2, [sp, #28]
 8008370:	e014      	b.n	800839c <_svfiprintf_r+0x110>
 8008372:	eba0 0308 	sub.w	r3, r0, r8
 8008376:	fa09 f303 	lsl.w	r3, r9, r3
 800837a:	4313      	orrs	r3, r2
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	46a2      	mov	sl, r4
 8008380:	e7d2      	b.n	8008328 <_svfiprintf_r+0x9c>
 8008382:	9b03      	ldr	r3, [sp, #12]
 8008384:	1d19      	adds	r1, r3, #4
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	9103      	str	r1, [sp, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	bfbb      	ittet	lt
 800838e:	425b      	neglt	r3, r3
 8008390:	f042 0202 	orrlt.w	r2, r2, #2
 8008394:	9307      	strge	r3, [sp, #28]
 8008396:	9307      	strlt	r3, [sp, #28]
 8008398:	bfb8      	it	lt
 800839a:	9204      	strlt	r2, [sp, #16]
 800839c:	7823      	ldrb	r3, [r4, #0]
 800839e:	2b2e      	cmp	r3, #46	; 0x2e
 80083a0:	d10c      	bne.n	80083bc <_svfiprintf_r+0x130>
 80083a2:	7863      	ldrb	r3, [r4, #1]
 80083a4:	2b2a      	cmp	r3, #42	; 0x2a
 80083a6:	d135      	bne.n	8008414 <_svfiprintf_r+0x188>
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	1d1a      	adds	r2, r3, #4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	9203      	str	r2, [sp, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bfb8      	it	lt
 80083b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80083b8:	3402      	adds	r4, #2
 80083ba:	9305      	str	r3, [sp, #20]
 80083bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008488 <_svfiprintf_r+0x1fc>
 80083c0:	7821      	ldrb	r1, [r4, #0]
 80083c2:	2203      	movs	r2, #3
 80083c4:	4650      	mov	r0, sl
 80083c6:	f7f7 ff0b 	bl	80001e0 <memchr>
 80083ca:	b140      	cbz	r0, 80083de <_svfiprintf_r+0x152>
 80083cc:	2340      	movs	r3, #64	; 0x40
 80083ce:	eba0 000a 	sub.w	r0, r0, sl
 80083d2:	fa03 f000 	lsl.w	r0, r3, r0
 80083d6:	9b04      	ldr	r3, [sp, #16]
 80083d8:	4303      	orrs	r3, r0
 80083da:	3401      	adds	r4, #1
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e2:	4826      	ldr	r0, [pc, #152]	; (800847c <_svfiprintf_r+0x1f0>)
 80083e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083e8:	2206      	movs	r2, #6
 80083ea:	f7f7 fef9 	bl	80001e0 <memchr>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d038      	beq.n	8008464 <_svfiprintf_r+0x1d8>
 80083f2:	4b23      	ldr	r3, [pc, #140]	; (8008480 <_svfiprintf_r+0x1f4>)
 80083f4:	bb1b      	cbnz	r3, 800843e <_svfiprintf_r+0x1b2>
 80083f6:	9b03      	ldr	r3, [sp, #12]
 80083f8:	3307      	adds	r3, #7
 80083fa:	f023 0307 	bic.w	r3, r3, #7
 80083fe:	3308      	adds	r3, #8
 8008400:	9303      	str	r3, [sp, #12]
 8008402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008404:	4433      	add	r3, r6
 8008406:	9309      	str	r3, [sp, #36]	; 0x24
 8008408:	e767      	b.n	80082da <_svfiprintf_r+0x4e>
 800840a:	fb0c 3202 	mla	r2, ip, r2, r3
 800840e:	460c      	mov	r4, r1
 8008410:	2001      	movs	r0, #1
 8008412:	e7a5      	b.n	8008360 <_svfiprintf_r+0xd4>
 8008414:	2300      	movs	r3, #0
 8008416:	3401      	adds	r4, #1
 8008418:	9305      	str	r3, [sp, #20]
 800841a:	4619      	mov	r1, r3
 800841c:	f04f 0c0a 	mov.w	ip, #10
 8008420:	4620      	mov	r0, r4
 8008422:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008426:	3a30      	subs	r2, #48	; 0x30
 8008428:	2a09      	cmp	r2, #9
 800842a:	d903      	bls.n	8008434 <_svfiprintf_r+0x1a8>
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0c5      	beq.n	80083bc <_svfiprintf_r+0x130>
 8008430:	9105      	str	r1, [sp, #20]
 8008432:	e7c3      	b.n	80083bc <_svfiprintf_r+0x130>
 8008434:	fb0c 2101 	mla	r1, ip, r1, r2
 8008438:	4604      	mov	r4, r0
 800843a:	2301      	movs	r3, #1
 800843c:	e7f0      	b.n	8008420 <_svfiprintf_r+0x194>
 800843e:	ab03      	add	r3, sp, #12
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	462a      	mov	r2, r5
 8008444:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <_svfiprintf_r+0x1f8>)
 8008446:	a904      	add	r1, sp, #16
 8008448:	4638      	mov	r0, r7
 800844a:	f7fd ffc9 	bl	80063e0 <_printf_float>
 800844e:	1c42      	adds	r2, r0, #1
 8008450:	4606      	mov	r6, r0
 8008452:	d1d6      	bne.n	8008402 <_svfiprintf_r+0x176>
 8008454:	89ab      	ldrh	r3, [r5, #12]
 8008456:	065b      	lsls	r3, r3, #25
 8008458:	f53f af2c 	bmi.w	80082b4 <_svfiprintf_r+0x28>
 800845c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800845e:	b01d      	add	sp, #116	; 0x74
 8008460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008464:	ab03      	add	r3, sp, #12
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	462a      	mov	r2, r5
 800846a:	4b06      	ldr	r3, [pc, #24]	; (8008484 <_svfiprintf_r+0x1f8>)
 800846c:	a904      	add	r1, sp, #16
 800846e:	4638      	mov	r0, r7
 8008470:	f7fe fa5a 	bl	8006928 <_printf_i>
 8008474:	e7eb      	b.n	800844e <_svfiprintf_r+0x1c2>
 8008476:	bf00      	nop
 8008478:	08009364 	.word	0x08009364
 800847c:	0800936e 	.word	0x0800936e
 8008480:	080063e1 	.word	0x080063e1
 8008484:	080081d5 	.word	0x080081d5
 8008488:	0800936a 	.word	0x0800936a

0800848c <_sbrk_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d06      	ldr	r5, [pc, #24]	; (80084a8 <_sbrk_r+0x1c>)
 8008490:	2300      	movs	r3, #0
 8008492:	4604      	mov	r4, r0
 8008494:	4608      	mov	r0, r1
 8008496:	602b      	str	r3, [r5, #0]
 8008498:	f7f9 fc48 	bl	8001d2c <_sbrk>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_sbrk_r+0x1a>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_sbrk_r+0x1a>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	20000348 	.word	0x20000348

080084ac <__assert_func>:
 80084ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ae:	4614      	mov	r4, r2
 80084b0:	461a      	mov	r2, r3
 80084b2:	4b09      	ldr	r3, [pc, #36]	; (80084d8 <__assert_func+0x2c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4605      	mov	r5, r0
 80084b8:	68d8      	ldr	r0, [r3, #12]
 80084ba:	b14c      	cbz	r4, 80084d0 <__assert_func+0x24>
 80084bc:	4b07      	ldr	r3, [pc, #28]	; (80084dc <__assert_func+0x30>)
 80084be:	9100      	str	r1, [sp, #0]
 80084c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084c4:	4906      	ldr	r1, [pc, #24]	; (80084e0 <__assert_func+0x34>)
 80084c6:	462b      	mov	r3, r5
 80084c8:	f000 f80e 	bl	80084e8 <fiprintf>
 80084cc:	f000 faac 	bl	8008a28 <abort>
 80084d0:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <__assert_func+0x38>)
 80084d2:	461c      	mov	r4, r3
 80084d4:	e7f3      	b.n	80084be <__assert_func+0x12>
 80084d6:	bf00      	nop
 80084d8:	2000000c 	.word	0x2000000c
 80084dc:	08009375 	.word	0x08009375
 80084e0:	08009382 	.word	0x08009382
 80084e4:	080093b0 	.word	0x080093b0

080084e8 <fiprintf>:
 80084e8:	b40e      	push	{r1, r2, r3}
 80084ea:	b503      	push	{r0, r1, lr}
 80084ec:	4601      	mov	r1, r0
 80084ee:	ab03      	add	r3, sp, #12
 80084f0:	4805      	ldr	r0, [pc, #20]	; (8008508 <fiprintf+0x20>)
 80084f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f6:	6800      	ldr	r0, [r0, #0]
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	f000 f897 	bl	800862c <_vfiprintf_r>
 80084fe:	b002      	add	sp, #8
 8008500:	f85d eb04 	ldr.w	lr, [sp], #4
 8008504:	b003      	add	sp, #12
 8008506:	4770      	bx	lr
 8008508:	2000000c 	.word	0x2000000c

0800850c <__ascii_mbtowc>:
 800850c:	b082      	sub	sp, #8
 800850e:	b901      	cbnz	r1, 8008512 <__ascii_mbtowc+0x6>
 8008510:	a901      	add	r1, sp, #4
 8008512:	b142      	cbz	r2, 8008526 <__ascii_mbtowc+0x1a>
 8008514:	b14b      	cbz	r3, 800852a <__ascii_mbtowc+0x1e>
 8008516:	7813      	ldrb	r3, [r2, #0]
 8008518:	600b      	str	r3, [r1, #0]
 800851a:	7812      	ldrb	r2, [r2, #0]
 800851c:	1e10      	subs	r0, r2, #0
 800851e:	bf18      	it	ne
 8008520:	2001      	movne	r0, #1
 8008522:	b002      	add	sp, #8
 8008524:	4770      	bx	lr
 8008526:	4610      	mov	r0, r2
 8008528:	e7fb      	b.n	8008522 <__ascii_mbtowc+0x16>
 800852a:	f06f 0001 	mvn.w	r0, #1
 800852e:	e7f8      	b.n	8008522 <__ascii_mbtowc+0x16>

08008530 <memmove>:
 8008530:	4288      	cmp	r0, r1
 8008532:	b510      	push	{r4, lr}
 8008534:	eb01 0402 	add.w	r4, r1, r2
 8008538:	d902      	bls.n	8008540 <memmove+0x10>
 800853a:	4284      	cmp	r4, r0
 800853c:	4623      	mov	r3, r4
 800853e:	d807      	bhi.n	8008550 <memmove+0x20>
 8008540:	1e43      	subs	r3, r0, #1
 8008542:	42a1      	cmp	r1, r4
 8008544:	d008      	beq.n	8008558 <memmove+0x28>
 8008546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800854a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800854e:	e7f8      	b.n	8008542 <memmove+0x12>
 8008550:	4402      	add	r2, r0
 8008552:	4601      	mov	r1, r0
 8008554:	428a      	cmp	r2, r1
 8008556:	d100      	bne.n	800855a <memmove+0x2a>
 8008558:	bd10      	pop	{r4, pc}
 800855a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800855e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008562:	e7f7      	b.n	8008554 <memmove+0x24>

08008564 <__malloc_lock>:
 8008564:	4801      	ldr	r0, [pc, #4]	; (800856c <__malloc_lock+0x8>)
 8008566:	f000 bc1f 	b.w	8008da8 <__retarget_lock_acquire_recursive>
 800856a:	bf00      	nop
 800856c:	2000034c 	.word	0x2000034c

08008570 <__malloc_unlock>:
 8008570:	4801      	ldr	r0, [pc, #4]	; (8008578 <__malloc_unlock+0x8>)
 8008572:	f000 bc1a 	b.w	8008daa <__retarget_lock_release_recursive>
 8008576:	bf00      	nop
 8008578:	2000034c 	.word	0x2000034c

0800857c <_realloc_r>:
 800857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	4680      	mov	r8, r0
 8008582:	4614      	mov	r4, r2
 8008584:	460e      	mov	r6, r1
 8008586:	b921      	cbnz	r1, 8008592 <_realloc_r+0x16>
 8008588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800858c:	4611      	mov	r1, r2
 800858e:	f7ff bdad 	b.w	80080ec <_malloc_r>
 8008592:	b92a      	cbnz	r2, 80085a0 <_realloc_r+0x24>
 8008594:	f7ff fd3e 	bl	8008014 <_free_r>
 8008598:	4625      	mov	r5, r4
 800859a:	4628      	mov	r0, r5
 800859c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a0:	f000 fc6a 	bl	8008e78 <_malloc_usable_size_r>
 80085a4:	4284      	cmp	r4, r0
 80085a6:	4607      	mov	r7, r0
 80085a8:	d802      	bhi.n	80085b0 <_realloc_r+0x34>
 80085aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085ae:	d812      	bhi.n	80085d6 <_realloc_r+0x5a>
 80085b0:	4621      	mov	r1, r4
 80085b2:	4640      	mov	r0, r8
 80085b4:	f7ff fd9a 	bl	80080ec <_malloc_r>
 80085b8:	4605      	mov	r5, r0
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d0ed      	beq.n	800859a <_realloc_r+0x1e>
 80085be:	42bc      	cmp	r4, r7
 80085c0:	4622      	mov	r2, r4
 80085c2:	4631      	mov	r1, r6
 80085c4:	bf28      	it	cs
 80085c6:	463a      	movcs	r2, r7
 80085c8:	f7ff f97c 	bl	80078c4 <memcpy>
 80085cc:	4631      	mov	r1, r6
 80085ce:	4640      	mov	r0, r8
 80085d0:	f7ff fd20 	bl	8008014 <_free_r>
 80085d4:	e7e1      	b.n	800859a <_realloc_r+0x1e>
 80085d6:	4635      	mov	r5, r6
 80085d8:	e7df      	b.n	800859a <_realloc_r+0x1e>

080085da <__sfputc_r>:
 80085da:	6893      	ldr	r3, [r2, #8]
 80085dc:	3b01      	subs	r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	b410      	push	{r4}
 80085e2:	6093      	str	r3, [r2, #8]
 80085e4:	da08      	bge.n	80085f8 <__sfputc_r+0x1e>
 80085e6:	6994      	ldr	r4, [r2, #24]
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	db01      	blt.n	80085f0 <__sfputc_r+0x16>
 80085ec:	290a      	cmp	r1, #10
 80085ee:	d103      	bne.n	80085f8 <__sfputc_r+0x1e>
 80085f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085f4:	f000 b94a 	b.w	800888c <__swbuf_r>
 80085f8:	6813      	ldr	r3, [r2, #0]
 80085fa:	1c58      	adds	r0, r3, #1
 80085fc:	6010      	str	r0, [r2, #0]
 80085fe:	7019      	strb	r1, [r3, #0]
 8008600:	4608      	mov	r0, r1
 8008602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008606:	4770      	bx	lr

08008608 <__sfputs_r>:
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860a:	4606      	mov	r6, r0
 800860c:	460f      	mov	r7, r1
 800860e:	4614      	mov	r4, r2
 8008610:	18d5      	adds	r5, r2, r3
 8008612:	42ac      	cmp	r4, r5
 8008614:	d101      	bne.n	800861a <__sfputs_r+0x12>
 8008616:	2000      	movs	r0, #0
 8008618:	e007      	b.n	800862a <__sfputs_r+0x22>
 800861a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800861e:	463a      	mov	r2, r7
 8008620:	4630      	mov	r0, r6
 8008622:	f7ff ffda 	bl	80085da <__sfputc_r>
 8008626:	1c43      	adds	r3, r0, #1
 8008628:	d1f3      	bne.n	8008612 <__sfputs_r+0xa>
 800862a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800862c <_vfiprintf_r>:
 800862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008630:	460d      	mov	r5, r1
 8008632:	b09d      	sub	sp, #116	; 0x74
 8008634:	4614      	mov	r4, r2
 8008636:	4698      	mov	r8, r3
 8008638:	4606      	mov	r6, r0
 800863a:	b118      	cbz	r0, 8008644 <_vfiprintf_r+0x18>
 800863c:	6983      	ldr	r3, [r0, #24]
 800863e:	b90b      	cbnz	r3, 8008644 <_vfiprintf_r+0x18>
 8008640:	f000 fb14 	bl	8008c6c <__sinit>
 8008644:	4b89      	ldr	r3, [pc, #548]	; (800886c <_vfiprintf_r+0x240>)
 8008646:	429d      	cmp	r5, r3
 8008648:	d11b      	bne.n	8008682 <_vfiprintf_r+0x56>
 800864a:	6875      	ldr	r5, [r6, #4]
 800864c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800864e:	07d9      	lsls	r1, r3, #31
 8008650:	d405      	bmi.n	800865e <_vfiprintf_r+0x32>
 8008652:	89ab      	ldrh	r3, [r5, #12]
 8008654:	059a      	lsls	r2, r3, #22
 8008656:	d402      	bmi.n	800865e <_vfiprintf_r+0x32>
 8008658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800865a:	f000 fba5 	bl	8008da8 <__retarget_lock_acquire_recursive>
 800865e:	89ab      	ldrh	r3, [r5, #12]
 8008660:	071b      	lsls	r3, r3, #28
 8008662:	d501      	bpl.n	8008668 <_vfiprintf_r+0x3c>
 8008664:	692b      	ldr	r3, [r5, #16]
 8008666:	b9eb      	cbnz	r3, 80086a4 <_vfiprintf_r+0x78>
 8008668:	4629      	mov	r1, r5
 800866a:	4630      	mov	r0, r6
 800866c:	f000 f96e 	bl	800894c <__swsetup_r>
 8008670:	b1c0      	cbz	r0, 80086a4 <_vfiprintf_r+0x78>
 8008672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008674:	07dc      	lsls	r4, r3, #31
 8008676:	d50e      	bpl.n	8008696 <_vfiprintf_r+0x6a>
 8008678:	f04f 30ff 	mov.w	r0, #4294967295
 800867c:	b01d      	add	sp, #116	; 0x74
 800867e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008682:	4b7b      	ldr	r3, [pc, #492]	; (8008870 <_vfiprintf_r+0x244>)
 8008684:	429d      	cmp	r5, r3
 8008686:	d101      	bne.n	800868c <_vfiprintf_r+0x60>
 8008688:	68b5      	ldr	r5, [r6, #8]
 800868a:	e7df      	b.n	800864c <_vfiprintf_r+0x20>
 800868c:	4b79      	ldr	r3, [pc, #484]	; (8008874 <_vfiprintf_r+0x248>)
 800868e:	429d      	cmp	r5, r3
 8008690:	bf08      	it	eq
 8008692:	68f5      	ldreq	r5, [r6, #12]
 8008694:	e7da      	b.n	800864c <_vfiprintf_r+0x20>
 8008696:	89ab      	ldrh	r3, [r5, #12]
 8008698:	0598      	lsls	r0, r3, #22
 800869a:	d4ed      	bmi.n	8008678 <_vfiprintf_r+0x4c>
 800869c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800869e:	f000 fb84 	bl	8008daa <__retarget_lock_release_recursive>
 80086a2:	e7e9      	b.n	8008678 <_vfiprintf_r+0x4c>
 80086a4:	2300      	movs	r3, #0
 80086a6:	9309      	str	r3, [sp, #36]	; 0x24
 80086a8:	2320      	movs	r3, #32
 80086aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80086b2:	2330      	movs	r3, #48	; 0x30
 80086b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008878 <_vfiprintf_r+0x24c>
 80086b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086bc:	f04f 0901 	mov.w	r9, #1
 80086c0:	4623      	mov	r3, r4
 80086c2:	469a      	mov	sl, r3
 80086c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086c8:	b10a      	cbz	r2, 80086ce <_vfiprintf_r+0xa2>
 80086ca:	2a25      	cmp	r2, #37	; 0x25
 80086cc:	d1f9      	bne.n	80086c2 <_vfiprintf_r+0x96>
 80086ce:	ebba 0b04 	subs.w	fp, sl, r4
 80086d2:	d00b      	beq.n	80086ec <_vfiprintf_r+0xc0>
 80086d4:	465b      	mov	r3, fp
 80086d6:	4622      	mov	r2, r4
 80086d8:	4629      	mov	r1, r5
 80086da:	4630      	mov	r0, r6
 80086dc:	f7ff ff94 	bl	8008608 <__sfputs_r>
 80086e0:	3001      	adds	r0, #1
 80086e2:	f000 80aa 	beq.w	800883a <_vfiprintf_r+0x20e>
 80086e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086e8:	445a      	add	r2, fp
 80086ea:	9209      	str	r2, [sp, #36]	; 0x24
 80086ec:	f89a 3000 	ldrb.w	r3, [sl]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 80a2 	beq.w	800883a <_vfiprintf_r+0x20e>
 80086f6:	2300      	movs	r3, #0
 80086f8:	f04f 32ff 	mov.w	r2, #4294967295
 80086fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008700:	f10a 0a01 	add.w	sl, sl, #1
 8008704:	9304      	str	r3, [sp, #16]
 8008706:	9307      	str	r3, [sp, #28]
 8008708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800870c:	931a      	str	r3, [sp, #104]	; 0x68
 800870e:	4654      	mov	r4, sl
 8008710:	2205      	movs	r2, #5
 8008712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008716:	4858      	ldr	r0, [pc, #352]	; (8008878 <_vfiprintf_r+0x24c>)
 8008718:	f7f7 fd62 	bl	80001e0 <memchr>
 800871c:	9a04      	ldr	r2, [sp, #16]
 800871e:	b9d8      	cbnz	r0, 8008758 <_vfiprintf_r+0x12c>
 8008720:	06d1      	lsls	r1, r2, #27
 8008722:	bf44      	itt	mi
 8008724:	2320      	movmi	r3, #32
 8008726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800872a:	0713      	lsls	r3, r2, #28
 800872c:	bf44      	itt	mi
 800872e:	232b      	movmi	r3, #43	; 0x2b
 8008730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008734:	f89a 3000 	ldrb.w	r3, [sl]
 8008738:	2b2a      	cmp	r3, #42	; 0x2a
 800873a:	d015      	beq.n	8008768 <_vfiprintf_r+0x13c>
 800873c:	9a07      	ldr	r2, [sp, #28]
 800873e:	4654      	mov	r4, sl
 8008740:	2000      	movs	r0, #0
 8008742:	f04f 0c0a 	mov.w	ip, #10
 8008746:	4621      	mov	r1, r4
 8008748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800874c:	3b30      	subs	r3, #48	; 0x30
 800874e:	2b09      	cmp	r3, #9
 8008750:	d94e      	bls.n	80087f0 <_vfiprintf_r+0x1c4>
 8008752:	b1b0      	cbz	r0, 8008782 <_vfiprintf_r+0x156>
 8008754:	9207      	str	r2, [sp, #28]
 8008756:	e014      	b.n	8008782 <_vfiprintf_r+0x156>
 8008758:	eba0 0308 	sub.w	r3, r0, r8
 800875c:	fa09 f303 	lsl.w	r3, r9, r3
 8008760:	4313      	orrs	r3, r2
 8008762:	9304      	str	r3, [sp, #16]
 8008764:	46a2      	mov	sl, r4
 8008766:	e7d2      	b.n	800870e <_vfiprintf_r+0xe2>
 8008768:	9b03      	ldr	r3, [sp, #12]
 800876a:	1d19      	adds	r1, r3, #4
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	9103      	str	r1, [sp, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	bfbb      	ittet	lt
 8008774:	425b      	neglt	r3, r3
 8008776:	f042 0202 	orrlt.w	r2, r2, #2
 800877a:	9307      	strge	r3, [sp, #28]
 800877c:	9307      	strlt	r3, [sp, #28]
 800877e:	bfb8      	it	lt
 8008780:	9204      	strlt	r2, [sp, #16]
 8008782:	7823      	ldrb	r3, [r4, #0]
 8008784:	2b2e      	cmp	r3, #46	; 0x2e
 8008786:	d10c      	bne.n	80087a2 <_vfiprintf_r+0x176>
 8008788:	7863      	ldrb	r3, [r4, #1]
 800878a:	2b2a      	cmp	r3, #42	; 0x2a
 800878c:	d135      	bne.n	80087fa <_vfiprintf_r+0x1ce>
 800878e:	9b03      	ldr	r3, [sp, #12]
 8008790:	1d1a      	adds	r2, r3, #4
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	9203      	str	r2, [sp, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	bfb8      	it	lt
 800879a:	f04f 33ff 	movlt.w	r3, #4294967295
 800879e:	3402      	adds	r4, #2
 80087a0:	9305      	str	r3, [sp, #20]
 80087a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008888 <_vfiprintf_r+0x25c>
 80087a6:	7821      	ldrb	r1, [r4, #0]
 80087a8:	2203      	movs	r2, #3
 80087aa:	4650      	mov	r0, sl
 80087ac:	f7f7 fd18 	bl	80001e0 <memchr>
 80087b0:	b140      	cbz	r0, 80087c4 <_vfiprintf_r+0x198>
 80087b2:	2340      	movs	r3, #64	; 0x40
 80087b4:	eba0 000a 	sub.w	r0, r0, sl
 80087b8:	fa03 f000 	lsl.w	r0, r3, r0
 80087bc:	9b04      	ldr	r3, [sp, #16]
 80087be:	4303      	orrs	r3, r0
 80087c0:	3401      	adds	r4, #1
 80087c2:	9304      	str	r3, [sp, #16]
 80087c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c8:	482c      	ldr	r0, [pc, #176]	; (800887c <_vfiprintf_r+0x250>)
 80087ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087ce:	2206      	movs	r2, #6
 80087d0:	f7f7 fd06 	bl	80001e0 <memchr>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d03f      	beq.n	8008858 <_vfiprintf_r+0x22c>
 80087d8:	4b29      	ldr	r3, [pc, #164]	; (8008880 <_vfiprintf_r+0x254>)
 80087da:	bb1b      	cbnz	r3, 8008824 <_vfiprintf_r+0x1f8>
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	3307      	adds	r3, #7
 80087e0:	f023 0307 	bic.w	r3, r3, #7
 80087e4:	3308      	adds	r3, #8
 80087e6:	9303      	str	r3, [sp, #12]
 80087e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ea:	443b      	add	r3, r7
 80087ec:	9309      	str	r3, [sp, #36]	; 0x24
 80087ee:	e767      	b.n	80086c0 <_vfiprintf_r+0x94>
 80087f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80087f4:	460c      	mov	r4, r1
 80087f6:	2001      	movs	r0, #1
 80087f8:	e7a5      	b.n	8008746 <_vfiprintf_r+0x11a>
 80087fa:	2300      	movs	r3, #0
 80087fc:	3401      	adds	r4, #1
 80087fe:	9305      	str	r3, [sp, #20]
 8008800:	4619      	mov	r1, r3
 8008802:	f04f 0c0a 	mov.w	ip, #10
 8008806:	4620      	mov	r0, r4
 8008808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800880c:	3a30      	subs	r2, #48	; 0x30
 800880e:	2a09      	cmp	r2, #9
 8008810:	d903      	bls.n	800881a <_vfiprintf_r+0x1ee>
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0c5      	beq.n	80087a2 <_vfiprintf_r+0x176>
 8008816:	9105      	str	r1, [sp, #20]
 8008818:	e7c3      	b.n	80087a2 <_vfiprintf_r+0x176>
 800881a:	fb0c 2101 	mla	r1, ip, r1, r2
 800881e:	4604      	mov	r4, r0
 8008820:	2301      	movs	r3, #1
 8008822:	e7f0      	b.n	8008806 <_vfiprintf_r+0x1da>
 8008824:	ab03      	add	r3, sp, #12
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	462a      	mov	r2, r5
 800882a:	4b16      	ldr	r3, [pc, #88]	; (8008884 <_vfiprintf_r+0x258>)
 800882c:	a904      	add	r1, sp, #16
 800882e:	4630      	mov	r0, r6
 8008830:	f7fd fdd6 	bl	80063e0 <_printf_float>
 8008834:	4607      	mov	r7, r0
 8008836:	1c78      	adds	r0, r7, #1
 8008838:	d1d6      	bne.n	80087e8 <_vfiprintf_r+0x1bc>
 800883a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800883c:	07d9      	lsls	r1, r3, #31
 800883e:	d405      	bmi.n	800884c <_vfiprintf_r+0x220>
 8008840:	89ab      	ldrh	r3, [r5, #12]
 8008842:	059a      	lsls	r2, r3, #22
 8008844:	d402      	bmi.n	800884c <_vfiprintf_r+0x220>
 8008846:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008848:	f000 faaf 	bl	8008daa <__retarget_lock_release_recursive>
 800884c:	89ab      	ldrh	r3, [r5, #12]
 800884e:	065b      	lsls	r3, r3, #25
 8008850:	f53f af12 	bmi.w	8008678 <_vfiprintf_r+0x4c>
 8008854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008856:	e711      	b.n	800867c <_vfiprintf_r+0x50>
 8008858:	ab03      	add	r3, sp, #12
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	462a      	mov	r2, r5
 800885e:	4b09      	ldr	r3, [pc, #36]	; (8008884 <_vfiprintf_r+0x258>)
 8008860:	a904      	add	r1, sp, #16
 8008862:	4630      	mov	r0, r6
 8008864:	f7fe f860 	bl	8006928 <_printf_i>
 8008868:	e7e4      	b.n	8008834 <_vfiprintf_r+0x208>
 800886a:	bf00      	nop
 800886c:	080094dc 	.word	0x080094dc
 8008870:	080094fc 	.word	0x080094fc
 8008874:	080094bc 	.word	0x080094bc
 8008878:	08009364 	.word	0x08009364
 800887c:	0800936e 	.word	0x0800936e
 8008880:	080063e1 	.word	0x080063e1
 8008884:	08008609 	.word	0x08008609
 8008888:	0800936a 	.word	0x0800936a

0800888c <__swbuf_r>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	460e      	mov	r6, r1
 8008890:	4614      	mov	r4, r2
 8008892:	4605      	mov	r5, r0
 8008894:	b118      	cbz	r0, 800889e <__swbuf_r+0x12>
 8008896:	6983      	ldr	r3, [r0, #24]
 8008898:	b90b      	cbnz	r3, 800889e <__swbuf_r+0x12>
 800889a:	f000 f9e7 	bl	8008c6c <__sinit>
 800889e:	4b21      	ldr	r3, [pc, #132]	; (8008924 <__swbuf_r+0x98>)
 80088a0:	429c      	cmp	r4, r3
 80088a2:	d12b      	bne.n	80088fc <__swbuf_r+0x70>
 80088a4:	686c      	ldr	r4, [r5, #4]
 80088a6:	69a3      	ldr	r3, [r4, #24]
 80088a8:	60a3      	str	r3, [r4, #8]
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	071a      	lsls	r2, r3, #28
 80088ae:	d52f      	bpl.n	8008910 <__swbuf_r+0x84>
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	b36b      	cbz	r3, 8008910 <__swbuf_r+0x84>
 80088b4:	6923      	ldr	r3, [r4, #16]
 80088b6:	6820      	ldr	r0, [r4, #0]
 80088b8:	1ac0      	subs	r0, r0, r3
 80088ba:	6963      	ldr	r3, [r4, #20]
 80088bc:	b2f6      	uxtb	r6, r6
 80088be:	4283      	cmp	r3, r0
 80088c0:	4637      	mov	r7, r6
 80088c2:	dc04      	bgt.n	80088ce <__swbuf_r+0x42>
 80088c4:	4621      	mov	r1, r4
 80088c6:	4628      	mov	r0, r5
 80088c8:	f000 f93c 	bl	8008b44 <_fflush_r>
 80088cc:	bb30      	cbnz	r0, 800891c <__swbuf_r+0x90>
 80088ce:	68a3      	ldr	r3, [r4, #8]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	60a3      	str	r3, [r4, #8]
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	6022      	str	r2, [r4, #0]
 80088da:	701e      	strb	r6, [r3, #0]
 80088dc:	6963      	ldr	r3, [r4, #20]
 80088de:	3001      	adds	r0, #1
 80088e0:	4283      	cmp	r3, r0
 80088e2:	d004      	beq.n	80088ee <__swbuf_r+0x62>
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	07db      	lsls	r3, r3, #31
 80088e8:	d506      	bpl.n	80088f8 <__swbuf_r+0x6c>
 80088ea:	2e0a      	cmp	r6, #10
 80088ec:	d104      	bne.n	80088f8 <__swbuf_r+0x6c>
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	f000 f927 	bl	8008b44 <_fflush_r>
 80088f6:	b988      	cbnz	r0, 800891c <__swbuf_r+0x90>
 80088f8:	4638      	mov	r0, r7
 80088fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088fc:	4b0a      	ldr	r3, [pc, #40]	; (8008928 <__swbuf_r+0x9c>)
 80088fe:	429c      	cmp	r4, r3
 8008900:	d101      	bne.n	8008906 <__swbuf_r+0x7a>
 8008902:	68ac      	ldr	r4, [r5, #8]
 8008904:	e7cf      	b.n	80088a6 <__swbuf_r+0x1a>
 8008906:	4b09      	ldr	r3, [pc, #36]	; (800892c <__swbuf_r+0xa0>)
 8008908:	429c      	cmp	r4, r3
 800890a:	bf08      	it	eq
 800890c:	68ec      	ldreq	r4, [r5, #12]
 800890e:	e7ca      	b.n	80088a6 <__swbuf_r+0x1a>
 8008910:	4621      	mov	r1, r4
 8008912:	4628      	mov	r0, r5
 8008914:	f000 f81a 	bl	800894c <__swsetup_r>
 8008918:	2800      	cmp	r0, #0
 800891a:	d0cb      	beq.n	80088b4 <__swbuf_r+0x28>
 800891c:	f04f 37ff 	mov.w	r7, #4294967295
 8008920:	e7ea      	b.n	80088f8 <__swbuf_r+0x6c>
 8008922:	bf00      	nop
 8008924:	080094dc 	.word	0x080094dc
 8008928:	080094fc 	.word	0x080094fc
 800892c:	080094bc 	.word	0x080094bc

08008930 <__ascii_wctomb>:
 8008930:	b149      	cbz	r1, 8008946 <__ascii_wctomb+0x16>
 8008932:	2aff      	cmp	r2, #255	; 0xff
 8008934:	bf85      	ittet	hi
 8008936:	238a      	movhi	r3, #138	; 0x8a
 8008938:	6003      	strhi	r3, [r0, #0]
 800893a:	700a      	strbls	r2, [r1, #0]
 800893c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008940:	bf98      	it	ls
 8008942:	2001      	movls	r0, #1
 8008944:	4770      	bx	lr
 8008946:	4608      	mov	r0, r1
 8008948:	4770      	bx	lr
	...

0800894c <__swsetup_r>:
 800894c:	4b32      	ldr	r3, [pc, #200]	; (8008a18 <__swsetup_r+0xcc>)
 800894e:	b570      	push	{r4, r5, r6, lr}
 8008950:	681d      	ldr	r5, [r3, #0]
 8008952:	4606      	mov	r6, r0
 8008954:	460c      	mov	r4, r1
 8008956:	b125      	cbz	r5, 8008962 <__swsetup_r+0x16>
 8008958:	69ab      	ldr	r3, [r5, #24]
 800895a:	b913      	cbnz	r3, 8008962 <__swsetup_r+0x16>
 800895c:	4628      	mov	r0, r5
 800895e:	f000 f985 	bl	8008c6c <__sinit>
 8008962:	4b2e      	ldr	r3, [pc, #184]	; (8008a1c <__swsetup_r+0xd0>)
 8008964:	429c      	cmp	r4, r3
 8008966:	d10f      	bne.n	8008988 <__swsetup_r+0x3c>
 8008968:	686c      	ldr	r4, [r5, #4]
 800896a:	89a3      	ldrh	r3, [r4, #12]
 800896c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008970:	0719      	lsls	r1, r3, #28
 8008972:	d42c      	bmi.n	80089ce <__swsetup_r+0x82>
 8008974:	06dd      	lsls	r5, r3, #27
 8008976:	d411      	bmi.n	800899c <__swsetup_r+0x50>
 8008978:	2309      	movs	r3, #9
 800897a:	6033      	str	r3, [r6, #0]
 800897c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008980:	81a3      	strh	r3, [r4, #12]
 8008982:	f04f 30ff 	mov.w	r0, #4294967295
 8008986:	e03e      	b.n	8008a06 <__swsetup_r+0xba>
 8008988:	4b25      	ldr	r3, [pc, #148]	; (8008a20 <__swsetup_r+0xd4>)
 800898a:	429c      	cmp	r4, r3
 800898c:	d101      	bne.n	8008992 <__swsetup_r+0x46>
 800898e:	68ac      	ldr	r4, [r5, #8]
 8008990:	e7eb      	b.n	800896a <__swsetup_r+0x1e>
 8008992:	4b24      	ldr	r3, [pc, #144]	; (8008a24 <__swsetup_r+0xd8>)
 8008994:	429c      	cmp	r4, r3
 8008996:	bf08      	it	eq
 8008998:	68ec      	ldreq	r4, [r5, #12]
 800899a:	e7e6      	b.n	800896a <__swsetup_r+0x1e>
 800899c:	0758      	lsls	r0, r3, #29
 800899e:	d512      	bpl.n	80089c6 <__swsetup_r+0x7a>
 80089a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089a2:	b141      	cbz	r1, 80089b6 <__swsetup_r+0x6a>
 80089a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089a8:	4299      	cmp	r1, r3
 80089aa:	d002      	beq.n	80089b2 <__swsetup_r+0x66>
 80089ac:	4630      	mov	r0, r6
 80089ae:	f7ff fb31 	bl	8008014 <_free_r>
 80089b2:	2300      	movs	r3, #0
 80089b4:	6363      	str	r3, [r4, #52]	; 0x34
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089bc:	81a3      	strh	r3, [r4, #12]
 80089be:	2300      	movs	r3, #0
 80089c0:	6063      	str	r3, [r4, #4]
 80089c2:	6923      	ldr	r3, [r4, #16]
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	f043 0308 	orr.w	r3, r3, #8
 80089cc:	81a3      	strh	r3, [r4, #12]
 80089ce:	6923      	ldr	r3, [r4, #16]
 80089d0:	b94b      	cbnz	r3, 80089e6 <__swsetup_r+0x9a>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089dc:	d003      	beq.n	80089e6 <__swsetup_r+0x9a>
 80089de:	4621      	mov	r1, r4
 80089e0:	4630      	mov	r0, r6
 80089e2:	f000 fa09 	bl	8008df8 <__smakebuf_r>
 80089e6:	89a0      	ldrh	r0, [r4, #12]
 80089e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089ec:	f010 0301 	ands.w	r3, r0, #1
 80089f0:	d00a      	beq.n	8008a08 <__swsetup_r+0xbc>
 80089f2:	2300      	movs	r3, #0
 80089f4:	60a3      	str	r3, [r4, #8]
 80089f6:	6963      	ldr	r3, [r4, #20]
 80089f8:	425b      	negs	r3, r3
 80089fa:	61a3      	str	r3, [r4, #24]
 80089fc:	6923      	ldr	r3, [r4, #16]
 80089fe:	b943      	cbnz	r3, 8008a12 <__swsetup_r+0xc6>
 8008a00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a04:	d1ba      	bne.n	800897c <__swsetup_r+0x30>
 8008a06:	bd70      	pop	{r4, r5, r6, pc}
 8008a08:	0781      	lsls	r1, r0, #30
 8008a0a:	bf58      	it	pl
 8008a0c:	6963      	ldrpl	r3, [r4, #20]
 8008a0e:	60a3      	str	r3, [r4, #8]
 8008a10:	e7f4      	b.n	80089fc <__swsetup_r+0xb0>
 8008a12:	2000      	movs	r0, #0
 8008a14:	e7f7      	b.n	8008a06 <__swsetup_r+0xba>
 8008a16:	bf00      	nop
 8008a18:	2000000c 	.word	0x2000000c
 8008a1c:	080094dc 	.word	0x080094dc
 8008a20:	080094fc 	.word	0x080094fc
 8008a24:	080094bc 	.word	0x080094bc

08008a28 <abort>:
 8008a28:	b508      	push	{r3, lr}
 8008a2a:	2006      	movs	r0, #6
 8008a2c:	f000 fa54 	bl	8008ed8 <raise>
 8008a30:	2001      	movs	r0, #1
 8008a32:	f7f9 f903 	bl	8001c3c <_exit>
	...

08008a38 <__sflush_r>:
 8008a38:	898a      	ldrh	r2, [r1, #12]
 8008a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3e:	4605      	mov	r5, r0
 8008a40:	0710      	lsls	r0, r2, #28
 8008a42:	460c      	mov	r4, r1
 8008a44:	d458      	bmi.n	8008af8 <__sflush_r+0xc0>
 8008a46:	684b      	ldr	r3, [r1, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	dc05      	bgt.n	8008a58 <__sflush_r+0x20>
 8008a4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	dc02      	bgt.n	8008a58 <__sflush_r+0x20>
 8008a52:	2000      	movs	r0, #0
 8008a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a5a:	2e00      	cmp	r6, #0
 8008a5c:	d0f9      	beq.n	8008a52 <__sflush_r+0x1a>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a64:	682f      	ldr	r7, [r5, #0]
 8008a66:	602b      	str	r3, [r5, #0]
 8008a68:	d032      	beq.n	8008ad0 <__sflush_r+0x98>
 8008a6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	075a      	lsls	r2, r3, #29
 8008a70:	d505      	bpl.n	8008a7e <__sflush_r+0x46>
 8008a72:	6863      	ldr	r3, [r4, #4]
 8008a74:	1ac0      	subs	r0, r0, r3
 8008a76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a78:	b10b      	cbz	r3, 8008a7e <__sflush_r+0x46>
 8008a7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a7c:	1ac0      	subs	r0, r0, r3
 8008a7e:	2300      	movs	r3, #0
 8008a80:	4602      	mov	r2, r0
 8008a82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a84:	6a21      	ldr	r1, [r4, #32]
 8008a86:	4628      	mov	r0, r5
 8008a88:	47b0      	blx	r6
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	d106      	bne.n	8008a9e <__sflush_r+0x66>
 8008a90:	6829      	ldr	r1, [r5, #0]
 8008a92:	291d      	cmp	r1, #29
 8008a94:	d82c      	bhi.n	8008af0 <__sflush_r+0xb8>
 8008a96:	4a2a      	ldr	r2, [pc, #168]	; (8008b40 <__sflush_r+0x108>)
 8008a98:	40ca      	lsrs	r2, r1
 8008a9a:	07d6      	lsls	r6, r2, #31
 8008a9c:	d528      	bpl.n	8008af0 <__sflush_r+0xb8>
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	6062      	str	r2, [r4, #4]
 8008aa2:	04d9      	lsls	r1, r3, #19
 8008aa4:	6922      	ldr	r2, [r4, #16]
 8008aa6:	6022      	str	r2, [r4, #0]
 8008aa8:	d504      	bpl.n	8008ab4 <__sflush_r+0x7c>
 8008aaa:	1c42      	adds	r2, r0, #1
 8008aac:	d101      	bne.n	8008ab2 <__sflush_r+0x7a>
 8008aae:	682b      	ldr	r3, [r5, #0]
 8008ab0:	b903      	cbnz	r3, 8008ab4 <__sflush_r+0x7c>
 8008ab2:	6560      	str	r0, [r4, #84]	; 0x54
 8008ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ab6:	602f      	str	r7, [r5, #0]
 8008ab8:	2900      	cmp	r1, #0
 8008aba:	d0ca      	beq.n	8008a52 <__sflush_r+0x1a>
 8008abc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ac0:	4299      	cmp	r1, r3
 8008ac2:	d002      	beq.n	8008aca <__sflush_r+0x92>
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f7ff faa5 	bl	8008014 <_free_r>
 8008aca:	2000      	movs	r0, #0
 8008acc:	6360      	str	r0, [r4, #52]	; 0x34
 8008ace:	e7c1      	b.n	8008a54 <__sflush_r+0x1c>
 8008ad0:	6a21      	ldr	r1, [r4, #32]
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b0      	blx	r6
 8008ad8:	1c41      	adds	r1, r0, #1
 8008ada:	d1c7      	bne.n	8008a6c <__sflush_r+0x34>
 8008adc:	682b      	ldr	r3, [r5, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d0c4      	beq.n	8008a6c <__sflush_r+0x34>
 8008ae2:	2b1d      	cmp	r3, #29
 8008ae4:	d001      	beq.n	8008aea <__sflush_r+0xb2>
 8008ae6:	2b16      	cmp	r3, #22
 8008ae8:	d101      	bne.n	8008aee <__sflush_r+0xb6>
 8008aea:	602f      	str	r7, [r5, #0]
 8008aec:	e7b1      	b.n	8008a52 <__sflush_r+0x1a>
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008af4:	81a3      	strh	r3, [r4, #12]
 8008af6:	e7ad      	b.n	8008a54 <__sflush_r+0x1c>
 8008af8:	690f      	ldr	r7, [r1, #16]
 8008afa:	2f00      	cmp	r7, #0
 8008afc:	d0a9      	beq.n	8008a52 <__sflush_r+0x1a>
 8008afe:	0793      	lsls	r3, r2, #30
 8008b00:	680e      	ldr	r6, [r1, #0]
 8008b02:	bf08      	it	eq
 8008b04:	694b      	ldreq	r3, [r1, #20]
 8008b06:	600f      	str	r7, [r1, #0]
 8008b08:	bf18      	it	ne
 8008b0a:	2300      	movne	r3, #0
 8008b0c:	eba6 0807 	sub.w	r8, r6, r7
 8008b10:	608b      	str	r3, [r1, #8]
 8008b12:	f1b8 0f00 	cmp.w	r8, #0
 8008b16:	dd9c      	ble.n	8008a52 <__sflush_r+0x1a>
 8008b18:	6a21      	ldr	r1, [r4, #32]
 8008b1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b1c:	4643      	mov	r3, r8
 8008b1e:	463a      	mov	r2, r7
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b0      	blx	r6
 8008b24:	2800      	cmp	r0, #0
 8008b26:	dc06      	bgt.n	8008b36 <__sflush_r+0xfe>
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b2e:	81a3      	strh	r3, [r4, #12]
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	e78e      	b.n	8008a54 <__sflush_r+0x1c>
 8008b36:	4407      	add	r7, r0
 8008b38:	eba8 0800 	sub.w	r8, r8, r0
 8008b3c:	e7e9      	b.n	8008b12 <__sflush_r+0xda>
 8008b3e:	bf00      	nop
 8008b40:	20400001 	.word	0x20400001

08008b44 <_fflush_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	690b      	ldr	r3, [r1, #16]
 8008b48:	4605      	mov	r5, r0
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	b913      	cbnz	r3, 8008b54 <_fflush_r+0x10>
 8008b4e:	2500      	movs	r5, #0
 8008b50:	4628      	mov	r0, r5
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	b118      	cbz	r0, 8008b5e <_fflush_r+0x1a>
 8008b56:	6983      	ldr	r3, [r0, #24]
 8008b58:	b90b      	cbnz	r3, 8008b5e <_fflush_r+0x1a>
 8008b5a:	f000 f887 	bl	8008c6c <__sinit>
 8008b5e:	4b14      	ldr	r3, [pc, #80]	; (8008bb0 <_fflush_r+0x6c>)
 8008b60:	429c      	cmp	r4, r3
 8008b62:	d11b      	bne.n	8008b9c <_fflush_r+0x58>
 8008b64:	686c      	ldr	r4, [r5, #4]
 8008b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0ef      	beq.n	8008b4e <_fflush_r+0xa>
 8008b6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b70:	07d0      	lsls	r0, r2, #31
 8008b72:	d404      	bmi.n	8008b7e <_fflush_r+0x3a>
 8008b74:	0599      	lsls	r1, r3, #22
 8008b76:	d402      	bmi.n	8008b7e <_fflush_r+0x3a>
 8008b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b7a:	f000 f915 	bl	8008da8 <__retarget_lock_acquire_recursive>
 8008b7e:	4628      	mov	r0, r5
 8008b80:	4621      	mov	r1, r4
 8008b82:	f7ff ff59 	bl	8008a38 <__sflush_r>
 8008b86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b88:	07da      	lsls	r2, r3, #31
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	d4e0      	bmi.n	8008b50 <_fflush_r+0xc>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	059b      	lsls	r3, r3, #22
 8008b92:	d4dd      	bmi.n	8008b50 <_fflush_r+0xc>
 8008b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b96:	f000 f908 	bl	8008daa <__retarget_lock_release_recursive>
 8008b9a:	e7d9      	b.n	8008b50 <_fflush_r+0xc>
 8008b9c:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <_fflush_r+0x70>)
 8008b9e:	429c      	cmp	r4, r3
 8008ba0:	d101      	bne.n	8008ba6 <_fflush_r+0x62>
 8008ba2:	68ac      	ldr	r4, [r5, #8]
 8008ba4:	e7df      	b.n	8008b66 <_fflush_r+0x22>
 8008ba6:	4b04      	ldr	r3, [pc, #16]	; (8008bb8 <_fflush_r+0x74>)
 8008ba8:	429c      	cmp	r4, r3
 8008baa:	bf08      	it	eq
 8008bac:	68ec      	ldreq	r4, [r5, #12]
 8008bae:	e7da      	b.n	8008b66 <_fflush_r+0x22>
 8008bb0:	080094dc 	.word	0x080094dc
 8008bb4:	080094fc 	.word	0x080094fc
 8008bb8:	080094bc 	.word	0x080094bc

08008bbc <std>:
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	b510      	push	{r4, lr}
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	e9c0 3300 	strd	r3, r3, [r0]
 8008bc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bca:	6083      	str	r3, [r0, #8]
 8008bcc:	8181      	strh	r1, [r0, #12]
 8008bce:	6643      	str	r3, [r0, #100]	; 0x64
 8008bd0:	81c2      	strh	r2, [r0, #14]
 8008bd2:	6183      	str	r3, [r0, #24]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	2208      	movs	r2, #8
 8008bd8:	305c      	adds	r0, #92	; 0x5c
 8008bda:	f7fd fb59 	bl	8006290 <memset>
 8008bde:	4b05      	ldr	r3, [pc, #20]	; (8008bf4 <std+0x38>)
 8008be0:	6263      	str	r3, [r4, #36]	; 0x24
 8008be2:	4b05      	ldr	r3, [pc, #20]	; (8008bf8 <std+0x3c>)
 8008be4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008be6:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <std+0x40>)
 8008be8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bea:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <std+0x44>)
 8008bec:	6224      	str	r4, [r4, #32]
 8008bee:	6323      	str	r3, [r4, #48]	; 0x30
 8008bf0:	bd10      	pop	{r4, pc}
 8008bf2:	bf00      	nop
 8008bf4:	08008f11 	.word	0x08008f11
 8008bf8:	08008f33 	.word	0x08008f33
 8008bfc:	08008f6b 	.word	0x08008f6b
 8008c00:	08008f8f 	.word	0x08008f8f

08008c04 <_cleanup_r>:
 8008c04:	4901      	ldr	r1, [pc, #4]	; (8008c0c <_cleanup_r+0x8>)
 8008c06:	f000 b8af 	b.w	8008d68 <_fwalk_reent>
 8008c0a:	bf00      	nop
 8008c0c:	08008b45 	.word	0x08008b45

08008c10 <__sfmoreglue>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	2268      	movs	r2, #104	; 0x68
 8008c14:	1e4d      	subs	r5, r1, #1
 8008c16:	4355      	muls	r5, r2
 8008c18:	460e      	mov	r6, r1
 8008c1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c1e:	f7ff fa65 	bl	80080ec <_malloc_r>
 8008c22:	4604      	mov	r4, r0
 8008c24:	b140      	cbz	r0, 8008c38 <__sfmoreglue+0x28>
 8008c26:	2100      	movs	r1, #0
 8008c28:	e9c0 1600 	strd	r1, r6, [r0]
 8008c2c:	300c      	adds	r0, #12
 8008c2e:	60a0      	str	r0, [r4, #8]
 8008c30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c34:	f7fd fb2c 	bl	8006290 <memset>
 8008c38:	4620      	mov	r0, r4
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}

08008c3c <__sfp_lock_acquire>:
 8008c3c:	4801      	ldr	r0, [pc, #4]	; (8008c44 <__sfp_lock_acquire+0x8>)
 8008c3e:	f000 b8b3 	b.w	8008da8 <__retarget_lock_acquire_recursive>
 8008c42:	bf00      	nop
 8008c44:	2000034d 	.word	0x2000034d

08008c48 <__sfp_lock_release>:
 8008c48:	4801      	ldr	r0, [pc, #4]	; (8008c50 <__sfp_lock_release+0x8>)
 8008c4a:	f000 b8ae 	b.w	8008daa <__retarget_lock_release_recursive>
 8008c4e:	bf00      	nop
 8008c50:	2000034d 	.word	0x2000034d

08008c54 <__sinit_lock_acquire>:
 8008c54:	4801      	ldr	r0, [pc, #4]	; (8008c5c <__sinit_lock_acquire+0x8>)
 8008c56:	f000 b8a7 	b.w	8008da8 <__retarget_lock_acquire_recursive>
 8008c5a:	bf00      	nop
 8008c5c:	2000034e 	.word	0x2000034e

08008c60 <__sinit_lock_release>:
 8008c60:	4801      	ldr	r0, [pc, #4]	; (8008c68 <__sinit_lock_release+0x8>)
 8008c62:	f000 b8a2 	b.w	8008daa <__retarget_lock_release_recursive>
 8008c66:	bf00      	nop
 8008c68:	2000034e 	.word	0x2000034e

08008c6c <__sinit>:
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	4604      	mov	r4, r0
 8008c70:	f7ff fff0 	bl	8008c54 <__sinit_lock_acquire>
 8008c74:	69a3      	ldr	r3, [r4, #24]
 8008c76:	b11b      	cbz	r3, 8008c80 <__sinit+0x14>
 8008c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c7c:	f7ff bff0 	b.w	8008c60 <__sinit_lock_release>
 8008c80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c84:	6523      	str	r3, [r4, #80]	; 0x50
 8008c86:	4b13      	ldr	r3, [pc, #76]	; (8008cd4 <__sinit+0x68>)
 8008c88:	4a13      	ldr	r2, [pc, #76]	; (8008cd8 <__sinit+0x6c>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c8e:	42a3      	cmp	r3, r4
 8008c90:	bf04      	itt	eq
 8008c92:	2301      	moveq	r3, #1
 8008c94:	61a3      	streq	r3, [r4, #24]
 8008c96:	4620      	mov	r0, r4
 8008c98:	f000 f820 	bl	8008cdc <__sfp>
 8008c9c:	6060      	str	r0, [r4, #4]
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f000 f81c 	bl	8008cdc <__sfp>
 8008ca4:	60a0      	str	r0, [r4, #8]
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f000 f818 	bl	8008cdc <__sfp>
 8008cac:	2200      	movs	r2, #0
 8008cae:	60e0      	str	r0, [r4, #12]
 8008cb0:	2104      	movs	r1, #4
 8008cb2:	6860      	ldr	r0, [r4, #4]
 8008cb4:	f7ff ff82 	bl	8008bbc <std>
 8008cb8:	68a0      	ldr	r0, [r4, #8]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	2109      	movs	r1, #9
 8008cbe:	f7ff ff7d 	bl	8008bbc <std>
 8008cc2:	68e0      	ldr	r0, [r4, #12]
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	2112      	movs	r1, #18
 8008cc8:	f7ff ff78 	bl	8008bbc <std>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	61a3      	str	r3, [r4, #24]
 8008cd0:	e7d2      	b.n	8008c78 <__sinit+0xc>
 8008cd2:	bf00      	nop
 8008cd4:	08009140 	.word	0x08009140
 8008cd8:	08008c05 	.word	0x08008c05

08008cdc <__sfp>:
 8008cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cde:	4607      	mov	r7, r0
 8008ce0:	f7ff ffac 	bl	8008c3c <__sfp_lock_acquire>
 8008ce4:	4b1e      	ldr	r3, [pc, #120]	; (8008d60 <__sfp+0x84>)
 8008ce6:	681e      	ldr	r6, [r3, #0]
 8008ce8:	69b3      	ldr	r3, [r6, #24]
 8008cea:	b913      	cbnz	r3, 8008cf2 <__sfp+0x16>
 8008cec:	4630      	mov	r0, r6
 8008cee:	f7ff ffbd 	bl	8008c6c <__sinit>
 8008cf2:	3648      	adds	r6, #72	; 0x48
 8008cf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	d503      	bpl.n	8008d04 <__sfp+0x28>
 8008cfc:	6833      	ldr	r3, [r6, #0]
 8008cfe:	b30b      	cbz	r3, 8008d44 <__sfp+0x68>
 8008d00:	6836      	ldr	r6, [r6, #0]
 8008d02:	e7f7      	b.n	8008cf4 <__sfp+0x18>
 8008d04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d08:	b9d5      	cbnz	r5, 8008d40 <__sfp+0x64>
 8008d0a:	4b16      	ldr	r3, [pc, #88]	; (8008d64 <__sfp+0x88>)
 8008d0c:	60e3      	str	r3, [r4, #12]
 8008d0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d12:	6665      	str	r5, [r4, #100]	; 0x64
 8008d14:	f000 f847 	bl	8008da6 <__retarget_lock_init_recursive>
 8008d18:	f7ff ff96 	bl	8008c48 <__sfp_lock_release>
 8008d1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d24:	6025      	str	r5, [r4, #0]
 8008d26:	61a5      	str	r5, [r4, #24]
 8008d28:	2208      	movs	r2, #8
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d30:	f7fd faae 	bl	8006290 <memset>
 8008d34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d40:	3468      	adds	r4, #104	; 0x68
 8008d42:	e7d9      	b.n	8008cf8 <__sfp+0x1c>
 8008d44:	2104      	movs	r1, #4
 8008d46:	4638      	mov	r0, r7
 8008d48:	f7ff ff62 	bl	8008c10 <__sfmoreglue>
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	6030      	str	r0, [r6, #0]
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d1d5      	bne.n	8008d00 <__sfp+0x24>
 8008d54:	f7ff ff78 	bl	8008c48 <__sfp_lock_release>
 8008d58:	230c      	movs	r3, #12
 8008d5a:	603b      	str	r3, [r7, #0]
 8008d5c:	e7ee      	b.n	8008d3c <__sfp+0x60>
 8008d5e:	bf00      	nop
 8008d60:	08009140 	.word	0x08009140
 8008d64:	ffff0001 	.word	0xffff0001

08008d68 <_fwalk_reent>:
 8008d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	4688      	mov	r8, r1
 8008d70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d74:	2700      	movs	r7, #0
 8008d76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d7a:	f1b9 0901 	subs.w	r9, r9, #1
 8008d7e:	d505      	bpl.n	8008d8c <_fwalk_reent+0x24>
 8008d80:	6824      	ldr	r4, [r4, #0]
 8008d82:	2c00      	cmp	r4, #0
 8008d84:	d1f7      	bne.n	8008d76 <_fwalk_reent+0xe>
 8008d86:	4638      	mov	r0, r7
 8008d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d8c:	89ab      	ldrh	r3, [r5, #12]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d907      	bls.n	8008da2 <_fwalk_reent+0x3a>
 8008d92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d96:	3301      	adds	r3, #1
 8008d98:	d003      	beq.n	8008da2 <_fwalk_reent+0x3a>
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	47c0      	blx	r8
 8008da0:	4307      	orrs	r7, r0
 8008da2:	3568      	adds	r5, #104	; 0x68
 8008da4:	e7e9      	b.n	8008d7a <_fwalk_reent+0x12>

08008da6 <__retarget_lock_init_recursive>:
 8008da6:	4770      	bx	lr

08008da8 <__retarget_lock_acquire_recursive>:
 8008da8:	4770      	bx	lr

08008daa <__retarget_lock_release_recursive>:
 8008daa:	4770      	bx	lr

08008dac <__swhatbuf_r>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	460e      	mov	r6, r1
 8008db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db4:	2900      	cmp	r1, #0
 8008db6:	b096      	sub	sp, #88	; 0x58
 8008db8:	4614      	mov	r4, r2
 8008dba:	461d      	mov	r5, r3
 8008dbc:	da08      	bge.n	8008dd0 <__swhatbuf_r+0x24>
 8008dbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	602a      	str	r2, [r5, #0]
 8008dc6:	061a      	lsls	r2, r3, #24
 8008dc8:	d410      	bmi.n	8008dec <__swhatbuf_r+0x40>
 8008dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dce:	e00e      	b.n	8008dee <__swhatbuf_r+0x42>
 8008dd0:	466a      	mov	r2, sp
 8008dd2:	f000 f903 	bl	8008fdc <_fstat_r>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	dbf1      	blt.n	8008dbe <__swhatbuf_r+0x12>
 8008dda:	9a01      	ldr	r2, [sp, #4]
 8008ddc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008de0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008de4:	425a      	negs	r2, r3
 8008de6:	415a      	adcs	r2, r3
 8008de8:	602a      	str	r2, [r5, #0]
 8008dea:	e7ee      	b.n	8008dca <__swhatbuf_r+0x1e>
 8008dec:	2340      	movs	r3, #64	; 0x40
 8008dee:	2000      	movs	r0, #0
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	b016      	add	sp, #88	; 0x58
 8008df4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008df8 <__smakebuf_r>:
 8008df8:	898b      	ldrh	r3, [r1, #12]
 8008dfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dfc:	079d      	lsls	r5, r3, #30
 8008dfe:	4606      	mov	r6, r0
 8008e00:	460c      	mov	r4, r1
 8008e02:	d507      	bpl.n	8008e14 <__smakebuf_r+0x1c>
 8008e04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	6123      	str	r3, [r4, #16]
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	6163      	str	r3, [r4, #20]
 8008e10:	b002      	add	sp, #8
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
 8008e14:	ab01      	add	r3, sp, #4
 8008e16:	466a      	mov	r2, sp
 8008e18:	f7ff ffc8 	bl	8008dac <__swhatbuf_r>
 8008e1c:	9900      	ldr	r1, [sp, #0]
 8008e1e:	4605      	mov	r5, r0
 8008e20:	4630      	mov	r0, r6
 8008e22:	f7ff f963 	bl	80080ec <_malloc_r>
 8008e26:	b948      	cbnz	r0, 8008e3c <__smakebuf_r+0x44>
 8008e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e2c:	059a      	lsls	r2, r3, #22
 8008e2e:	d4ef      	bmi.n	8008e10 <__smakebuf_r+0x18>
 8008e30:	f023 0303 	bic.w	r3, r3, #3
 8008e34:	f043 0302 	orr.w	r3, r3, #2
 8008e38:	81a3      	strh	r3, [r4, #12]
 8008e3a:	e7e3      	b.n	8008e04 <__smakebuf_r+0xc>
 8008e3c:	4b0d      	ldr	r3, [pc, #52]	; (8008e74 <__smakebuf_r+0x7c>)
 8008e3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e40:	89a3      	ldrh	r3, [r4, #12]
 8008e42:	6020      	str	r0, [r4, #0]
 8008e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e48:	81a3      	strh	r3, [r4, #12]
 8008e4a:	9b00      	ldr	r3, [sp, #0]
 8008e4c:	6163      	str	r3, [r4, #20]
 8008e4e:	9b01      	ldr	r3, [sp, #4]
 8008e50:	6120      	str	r0, [r4, #16]
 8008e52:	b15b      	cbz	r3, 8008e6c <__smakebuf_r+0x74>
 8008e54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f000 f8d1 	bl	8009000 <_isatty_r>
 8008e5e:	b128      	cbz	r0, 8008e6c <__smakebuf_r+0x74>
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	f023 0303 	bic.w	r3, r3, #3
 8008e66:	f043 0301 	orr.w	r3, r3, #1
 8008e6a:	81a3      	strh	r3, [r4, #12]
 8008e6c:	89a0      	ldrh	r0, [r4, #12]
 8008e6e:	4305      	orrs	r5, r0
 8008e70:	81a5      	strh	r5, [r4, #12]
 8008e72:	e7cd      	b.n	8008e10 <__smakebuf_r+0x18>
 8008e74:	08008c05 	.word	0x08008c05

08008e78 <_malloc_usable_size_r>:
 8008e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7c:	1f18      	subs	r0, r3, #4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bfbc      	itt	lt
 8008e82:	580b      	ldrlt	r3, [r1, r0]
 8008e84:	18c0      	addlt	r0, r0, r3
 8008e86:	4770      	bx	lr

08008e88 <_raise_r>:
 8008e88:	291f      	cmp	r1, #31
 8008e8a:	b538      	push	{r3, r4, r5, lr}
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	460d      	mov	r5, r1
 8008e90:	d904      	bls.n	8008e9c <_raise_r+0x14>
 8008e92:	2316      	movs	r3, #22
 8008e94:	6003      	str	r3, [r0, #0]
 8008e96:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9a:	bd38      	pop	{r3, r4, r5, pc}
 8008e9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e9e:	b112      	cbz	r2, 8008ea6 <_raise_r+0x1e>
 8008ea0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ea4:	b94b      	cbnz	r3, 8008eba <_raise_r+0x32>
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f000 f830 	bl	8008f0c <_getpid_r>
 8008eac:	462a      	mov	r2, r5
 8008eae:	4601      	mov	r1, r0
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eb6:	f000 b817 	b.w	8008ee8 <_kill_r>
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d00a      	beq.n	8008ed4 <_raise_r+0x4c>
 8008ebe:	1c59      	adds	r1, r3, #1
 8008ec0:	d103      	bne.n	8008eca <_raise_r+0x42>
 8008ec2:	2316      	movs	r3, #22
 8008ec4:	6003      	str	r3, [r0, #0]
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	e7e7      	b.n	8008e9a <_raise_r+0x12>
 8008eca:	2400      	movs	r4, #0
 8008ecc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	4798      	blx	r3
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	e7e0      	b.n	8008e9a <_raise_r+0x12>

08008ed8 <raise>:
 8008ed8:	4b02      	ldr	r3, [pc, #8]	; (8008ee4 <raise+0xc>)
 8008eda:	4601      	mov	r1, r0
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	f7ff bfd3 	b.w	8008e88 <_raise_r>
 8008ee2:	bf00      	nop
 8008ee4:	2000000c 	.word	0x2000000c

08008ee8 <_kill_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d07      	ldr	r5, [pc, #28]	; (8008f08 <_kill_r+0x20>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	602b      	str	r3, [r5, #0]
 8008ef6:	f7f8 fe91 	bl	8001c1c <_kill>
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	d102      	bne.n	8008f04 <_kill_r+0x1c>
 8008efe:	682b      	ldr	r3, [r5, #0]
 8008f00:	b103      	cbz	r3, 8008f04 <_kill_r+0x1c>
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	bd38      	pop	{r3, r4, r5, pc}
 8008f06:	bf00      	nop
 8008f08:	20000348 	.word	0x20000348

08008f0c <_getpid_r>:
 8008f0c:	f7f8 be7e 	b.w	8001c0c <_getpid>

08008f10 <__sread>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	460c      	mov	r4, r1
 8008f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f18:	f000 f894 	bl	8009044 <_read_r>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	bfab      	itete	ge
 8008f20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f22:	89a3      	ldrhlt	r3, [r4, #12]
 8008f24:	181b      	addge	r3, r3, r0
 8008f26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f2a:	bfac      	ite	ge
 8008f2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f2e:	81a3      	strhlt	r3, [r4, #12]
 8008f30:	bd10      	pop	{r4, pc}

08008f32 <__swrite>:
 8008f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f36:	461f      	mov	r7, r3
 8008f38:	898b      	ldrh	r3, [r1, #12]
 8008f3a:	05db      	lsls	r3, r3, #23
 8008f3c:	4605      	mov	r5, r0
 8008f3e:	460c      	mov	r4, r1
 8008f40:	4616      	mov	r6, r2
 8008f42:	d505      	bpl.n	8008f50 <__swrite+0x1e>
 8008f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f48:	2302      	movs	r3, #2
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f000 f868 	bl	8009020 <_lseek_r>
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f5a:	81a3      	strh	r3, [r4, #12]
 8008f5c:	4632      	mov	r2, r6
 8008f5e:	463b      	mov	r3, r7
 8008f60:	4628      	mov	r0, r5
 8008f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f66:	f000 b817 	b.w	8008f98 <_write_r>

08008f6a <__sseek>:
 8008f6a:	b510      	push	{r4, lr}
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f72:	f000 f855 	bl	8009020 <_lseek_r>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	bf15      	itete	ne
 8008f7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f86:	81a3      	strheq	r3, [r4, #12]
 8008f88:	bf18      	it	ne
 8008f8a:	81a3      	strhne	r3, [r4, #12]
 8008f8c:	bd10      	pop	{r4, pc}

08008f8e <__sclose>:
 8008f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f92:	f000 b813 	b.w	8008fbc <_close_r>
	...

08008f98 <_write_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4d07      	ldr	r5, [pc, #28]	; (8008fb8 <_write_r+0x20>)
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	4608      	mov	r0, r1
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	602a      	str	r2, [r5, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f7f8 fe6f 	bl	8001c8a <_write>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d102      	bne.n	8008fb6 <_write_r+0x1e>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	b103      	cbz	r3, 8008fb6 <_write_r+0x1e>
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	20000348 	.word	0x20000348

08008fbc <_close_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4d06      	ldr	r5, [pc, #24]	; (8008fd8 <_close_r+0x1c>)
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	4608      	mov	r0, r1
 8008fc6:	602b      	str	r3, [r5, #0]
 8008fc8:	f7f8 fe7b 	bl	8001cc2 <_close>
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d102      	bne.n	8008fd6 <_close_r+0x1a>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	b103      	cbz	r3, 8008fd6 <_close_r+0x1a>
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	20000348 	.word	0x20000348

08008fdc <_fstat_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4d07      	ldr	r5, [pc, #28]	; (8008ffc <_fstat_r+0x20>)
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	4608      	mov	r0, r1
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	602b      	str	r3, [r5, #0]
 8008fea:	f7f8 fe76 	bl	8001cda <_fstat>
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	d102      	bne.n	8008ff8 <_fstat_r+0x1c>
 8008ff2:	682b      	ldr	r3, [r5, #0]
 8008ff4:	b103      	cbz	r3, 8008ff8 <_fstat_r+0x1c>
 8008ff6:	6023      	str	r3, [r4, #0]
 8008ff8:	bd38      	pop	{r3, r4, r5, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20000348 	.word	0x20000348

08009000 <_isatty_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d06      	ldr	r5, [pc, #24]	; (800901c <_isatty_r+0x1c>)
 8009004:	2300      	movs	r3, #0
 8009006:	4604      	mov	r4, r0
 8009008:	4608      	mov	r0, r1
 800900a:	602b      	str	r3, [r5, #0]
 800900c:	f7f8 fe75 	bl	8001cfa <_isatty>
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	d102      	bne.n	800901a <_isatty_r+0x1a>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	b103      	cbz	r3, 800901a <_isatty_r+0x1a>
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	20000348 	.word	0x20000348

08009020 <_lseek_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d07      	ldr	r5, [pc, #28]	; (8009040 <_lseek_r+0x20>)
 8009024:	4604      	mov	r4, r0
 8009026:	4608      	mov	r0, r1
 8009028:	4611      	mov	r1, r2
 800902a:	2200      	movs	r2, #0
 800902c:	602a      	str	r2, [r5, #0]
 800902e:	461a      	mov	r2, r3
 8009030:	f7f8 fe6e 	bl	8001d10 <_lseek>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d102      	bne.n	800903e <_lseek_r+0x1e>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	b103      	cbz	r3, 800903e <_lseek_r+0x1e>
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	20000348 	.word	0x20000348

08009044 <_read_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4d07      	ldr	r5, [pc, #28]	; (8009064 <_read_r+0x20>)
 8009048:	4604      	mov	r4, r0
 800904a:	4608      	mov	r0, r1
 800904c:	4611      	mov	r1, r2
 800904e:	2200      	movs	r2, #0
 8009050:	602a      	str	r2, [r5, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	f7f8 fdfc 	bl	8001c50 <_read>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	d102      	bne.n	8009062 <_read_r+0x1e>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	b103      	cbz	r3, 8009062 <_read_r+0x1e>
 8009060:	6023      	str	r3, [r4, #0]
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	20000348 	.word	0x20000348

08009068 <_init>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	bf00      	nop
 800906c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906e:	bc08      	pop	{r3}
 8009070:	469e      	mov	lr, r3
 8009072:	4770      	bx	lr

08009074 <_fini>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	bf00      	nop
 8009078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907a:	bc08      	pop	{r3}
 800907c:	469e      	mov	lr, r3
 800907e:	4770      	bx	lr
